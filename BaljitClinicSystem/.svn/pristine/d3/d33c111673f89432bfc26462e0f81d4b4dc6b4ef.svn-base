package BusinessLogic;

import BusinessData.DAL_PopulateData;
import BusinessData.DAL_Stock;
import BusinessData.DAL_StockCostQty;
import BusinessData.DAL_StockReq;
import BusinessData.DAL_StockTransfer;
import static BusinessLogic.Servlet_StockCostQty.UPDATE_STOCK_COSTQTY;
import static BusinessLogic.Servlet_StockTransfer.UpdateStockLedger;
import static BusinessLogic.Servlet_StockTransfer.Xfer_Items;
import java.io.IOException;
import java.io.PrintWriter;
import static java.lang.Character.UnicodeScript.values;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import net.sf.json.JSONArray;
import net.sf.json.JSONException;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;

/**
 *
 * 2016-02-19   CPK     Add
 */
@WebServlet(name = "Servlet_StockRequest", urlPatterns = {"/Servlet_StockRequest"})
public class Servlet_StockRequest extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    
    public void Bind_Request_List(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        String sCompCode = "";
        String sLocCode = "";
        String sReqNo = "";
        String sReqDtFrom = "";
        String sReqDtTo = "";
        String sStkCode = "";
        String sReqStatus = "";
        String sReqType = "";
        String sIdx = "";
        
        String pReqStatus = null, pReqType="";
        int countReqStatus, countReqType;

        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        //Get page and rows value from JSP page
        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));
        sCompCode = request.getParameter("COMPCODE");
        sLocCode = request.getParameter("LOCCODE");
        sReqNo = request.getParameter("REQNO");
        sReqDtFrom = request.getParameter("DTFROM");
        sReqDtTo = request.getParameter("DTTO");
        sStkCode = request.getParameter("STKCODE");
        sReqStatus = request.getParameter("REQSTATUS");
        sReqType = request.getParameter("REQTYPE");
        sIdx = request.getParameter("IDX");

        String sortName = request.getParameter("sidx"); 
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }
        
        if (!"".equals(sReqStatus) && sReqStatus != null) {
            countReqStatus = sReqStatus.length();
            pReqStatus = sReqStatus.substring(0, countReqStatus - 1);
        } else {
            pReqStatus = null;
        }
        
        if (!"".equals(sReqType) && sReqType != null) {
            countReqType = sReqType.length();
            pReqType = sReqType.substring(0, countReqType - 1);
        } else {
            pReqType = null;
        }

        //Calculate offset value
        //int offset = (page - 1) * rows;
        DAL_StockReq DalReq = new DAL_StockReq();

        int total = 0;
        double pageval = 0;

        BLL_Common.Common_Object ReqList = DalReq.DAL_GET_REQUESTLIST(SiteName, new String[]{
            "GET_REQ_LIST", sCompCode, sLocCode, sReqNo, sReqDtFrom, sReqDtTo, sStkCode, pReqStatus, pReqType, sIdx, sOrder, Integer.toString(page), Integer.toString(rows)});

        BLL_Common.Common_Object ReqTotalRow = DalReq.DAL_GET_REQUESTLIST(SiteName, new String[]{
            "COUNT_REQ_LIST", sCompCode, sLocCode, sReqNo, sReqDtFrom, sReqDtTo, sStkCode, pReqStatus, pReqType, sIdx, "", "", ""});

        //Execute all queries here
        try {

            total = ReqTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", ReqList.getJSONArray(0));

            //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }

        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    
    public void Bind_Request_DetList(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
    
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
       
        String sIdx = "";
        String sCompCode = "";
        String sLocCode = "";
       
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        //Get page and rows value from JSP page
        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));
        
        
        sIdx = request.getParameter("IDX");

        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }
        
        //Calculate offset value
        //int offset = (page - 1) * rows;
        DAL_StockReq DalReq = new DAL_StockReq();

        int total = 0;
        double pageval = 0;

        BLL_Common.Common_Object ReqListD = DalReq.DAL_GET_REQUESTLIST(SiteName, new String[]{
            "GET_REQ_DETAIL",sCompCode, sLocCode, "", "", "", "", "", "", sIdx, sOrder, Integer.toString(page), Integer.toString(rows)});

        BLL_Common.Common_Object ReqTotalRow = DalReq.DAL_GET_REQUESTLIST(SiteName, new String[]{
            "COUNT_REQ_DETAIL", sCompCode, sLocCode, "", "", "", "", "", "", sIdx, "", "", ""});

        //Execute all queries here
        try {

            total = ReqTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", ReqListD.getJSONArray(0));

            //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }

        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    
    public void Bind_Request_GrpList(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        
        String sIdx = "";
        String sCompCode = "";
        String sLocCode = "";
       
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        //Get page and rows value from JSP page
        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));
        
        sIdx = request.getParameter("IDX");
        sCompCode = request.getParameter("COMPCODE");
        sLocCode = request.getParameter("LOCCODE");

        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }
             
        //Calculate offset value
        //int offset = (page - 1) * rows;
        DAL_StockReq DalReq = new DAL_StockReq();

        int total = 0;
        double pageval = 0;

        BLL_Common.Common_Object ReqListD = DalReq.DAL_GET_REQUESTLIST(SiteName, new String[]{
            "GET_REQ_GRP", sCompCode, sLocCode, "", "", "", "", "", "", sIdx, sOrder, Integer.toString(page), Integer.toString(rows)});

        BLL_Common.Common_Object ReqTotalRow = DalReq.DAL_GET_REQUESTLIST(SiteName, new String[]{
            "COUNT_REQ_GRP", sCompCode, sLocCode, "", "", "", "", "", "", sIdx, "", "", ""});

        //Execute all queries here
        try {

            total = ReqTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", ReqListD.getJSONArray(0));

            //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }

        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    

public void STOCK_REQUEST_LIST(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
       String jsonIn= request.getParameter("JSONITEM");
       JSONArray jsonarr = JSONArray.fromObject(jsonIn);
       JSONObject json = null;
       JSONObject obj = new JSONObject();
       
       BLL_StockRequest objReq = new BLL_StockRequest();
        
        json = objReq.ConvertJson(jsonIn);
        
        //objReq.STOCK_REQUESTADDEDIT(json);
        
        //System.out.println("JSONObject-->" + json.toString());
    
       
    // System.out.println("Json object-->" + map.toString());  
       
     }
       
    
    public static boolean Update_Fulfilled_Qty(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
    //public static boolean UpdateStockCostQty(String JsonXferItem, String[] sIn) throws ServletException, IOException, SQLException {
    
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        boolean b = false;
         
        DAL_StockReq objUpd = new DAL_StockReq();
                
        String sStkCode = request.getParameter("PRODCODE");
        String sCompCode = request.getParameter("COMPCODE");
        String sQty = request.getParameter("QTY");   
        String sLocation = request.getParameter("LOCATION");
        String sConvUOM = request.getParameter("UOM");
 
        String sMethod = "UPD_FULFILLED_QTY";     

        String[] aryItm = {
                        sMethod,"",sCompCode,sLocation,"",
                        "","","","",sStkCode,
                        sConvUOM,"","","",sQty,
                        "","","",""        
        };
               
        BLL_Common.Common_Object obj = objUpd.DAL_ADDEDIT_STOCKREQ(SiteName, aryItm);
        
        if (obj.getObjectArray(0).toString().equals("00000")) {
             
            obj.commit();
            b = obj.getObjectArray(0).toString().equals("00000");
        } else {
            sMethod = null;
            obj.rollback();
        }
        
        return b;
     
    }  
  
public static boolean Update_Fulfilled_Qty(String SiteName, String[] sIn) throws ServletException, IOException, SQLException {
    //public static boolean UpdateStockCostQty(String JsonXferItem, String[] sIn) throws ServletException, IOException, SQLException {
    
        boolean b = false;
         
        DAL_StockReq objUpd = new DAL_StockReq();
        
        
        String sStkCode = sIn[0];
        String sCompCode = sIn[1];        
        String sLocation = sIn[2];
        String sConvUOM = sIn[3];
        String sQty = sIn[4];  
 
        String sMethod = "UPD_FULFILLED_QTY";     

        String[] aryItm = {
                        sMethod,"",sCompCode,sLocation,"",
                        "","","","",sStkCode,
                        sConvUOM,"","","",sQty,
                        "","","",""        
        };
               
        BLL_Common.Common_Object obj = objUpd.DAL_ADDEDIT_STOCKREQ(SiteName, aryItm);
        
        if (obj.getObjectArray(0).toString().equals("00000")) {
             
            obj.commit();
            b = obj.getObjectArray(0).toString().equals("00000");
        } else {
            sMethod = null;
            obj.rollback();
        }
        
        return b;
    }  
  
  
    protected void Verified_REQ(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
    
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject jsonReturn = new net.sf.json.JSONObject();
        boolean bReturn = false;
        String sMessage = "";
        String sBy = request.getParameter("hdnby");
        
        DAL_StockReq objReq = new DAL_StockReq();
        JSONArray jsonVerifiedItem = JSONArray.fromObject(request.getParameter("REQITEM"));
//        if (jsonVerifiedItem.size() > 0){
//            System.out.println("jsonReqItem-->" + jsonVerifiedItem);
//        }else{
//            System.out.println("jsonReqItem-->" + "no data");
//        }
                                  
             for (Object js : jsonVerifiedItem) {
                  JSONObject json = (JSONObject) js;
                  if (json.size() > 0){
             String[] aryReqDet = {
                     "VERIFIED_REQ" /*0. pMethod    varchar(30)*/,
                     json.get("DetailIDX").toString().trim(), /* 1. pReqNo        varchar(10)*/
                     "", /* 2. pCompCode     varchar(10),*/
                     "", /* 3. pLocCode      varchar(10),*/
                     "", /* 4. pRemarks      varchar(100),*/
                     "", /* 5. pReqType      varchar(1),*/
                     "", /* 6. pStatusCode   varchar(2),*/
                     "", /* 7. precstatus    varchar(10),*/
                     json.get("HIDX").toString().trim(), /* 8. pIDX          varchar(10),*/
                     "", /* 9. pStkCode      varchar(16),*/
                     "", /* 10.pUomCode      varchar(6),*/
                     "", /* 11.pReqQty       varchar(10),*/                    
                     json.get("VerifiedQty").toString().trim(), /* 12.pVerifiedQty  varchar(10),*/
                     "", /* 13.pApprovedQty  varchar(10),*/
                     "", /* 14.pFillQty      varchar(10),*/
                     "", /* 15.pCurrentBal   varchar(10),*/
                     "", /* 16.pReasonCode   varchar(6),*/
                     "", /* 17.pReasonRemark varchar(100),*/
                     (String) session.getAttribute("loginid") /* 18.pBy           varchar(20),*/
                  };
             
             BLL_Common.Common_Object obj = objReq.DAL_ADDEDIT_STOCKREQ(SiteName, aryReqDet);

             try {
                    if (obj.getObjectArray(0).toString().equals("00000")) {
                       
                        obj.commit();
                        bReturn = true;
                        sMessage = obj.getObjectArray(1).toString();
                    } else {
                        obj.rollback();
                    }
                } catch (Exception e) {
                    try {
                            obj.rollback();
                        } catch (SQLException ex) {
                            bReturn = false;
                        }
                }                           
             }
             }
            
             jsonReturn.put("bool", bReturn);
                jsonReturn.put("msg", sMessage);
                out.println(jsonReturn);
                //System.out.println("aryReqDet-->" + aryReqDet.toString());               
  }
  
    protected void Approve_REQ(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject jsonReturn = new net.sf.json.JSONObject();
        boolean bReturn = false;
        String sMessage = "";
                
        DAL_StockReq objReq = new DAL_StockReq();
        JSONArray jsonVerifiedItem = JSONArray.fromObject(request.getParameter("REQITEM"));
//        if (jsonVerifiedItem.size() > 0){
//            System.out.println("jsonReqItem-->" + jsonVerifiedItem);
//        }else{
//            System.out.println("jsonReqItem-->" + "no data");
//        }
                                
             for (Object js : jsonVerifiedItem) {
                  JSONObject json = (JSONObject) js;
                  if (json.size() > 0){
             String[] aryReqDet = {
                     "APPROVE_REQ" /*0. pMethod    varchar(30)*/,
                     json.get("DetailIDX").toString().trim(), /* 1. pReqNo        varchar(10)*/
                     "", /* 2. pCompCode     varchar(10),*/
                     "", /* 3. pLocCode      varchar(10),*/
                     "", /* 4. pRemarks      varchar(100),*/
                     "", /* 5. pReqType      varchar(1),*/
                     json.get("ReqStatus").toString().trim(), /* 6. pStatusCode   varchar(2),*/
                     "", /* 7. precstatus    varchar(10),*/
                     json.get("HIDX").toString().trim(), /* 8. pIDX          varchar(10),*/
                     "", /* 9. pStkCode      varchar(16),*/
                     "", /* 10.pUomCode      varchar(6),*/
                     "", /* 11.pReqQty       varchar(10),*/                    
                     "", /* 12.pVerifiedQty  varchar(10),*/
                     json.get("ApprovedQty").toString().trim(), /* 13.pApprovedQty  varchar(10),*/
                     "0", /* 14.pFillQty      varchar(10),*/
                     "0", /* 15.pCurrentBal   varchar(10),*/
                     "", /* 16.pReasonCode   varchar(6),*/
                     "", /* 17.pReasonRemark varchar(100),*/
                     (String) session.getAttribute("loginid") /* 18.pBy           varchar(20),*/
                  };
             
             BLL_Common.Common_Object obj = objReq.DAL_ADDEDIT_STOCKREQ(SiteName, aryReqDet);

             try {
                    if (obj.getObjectArray(0).toString().equals("00000")) {
                       
                        obj.commit();
                        bReturn = true;
                        sMessage = obj.getObjectArray(1).toString();
                    } else {
                        obj.rollback();
                    }
                } catch (Exception e) {
                    try {
                            obj.rollback();
                        } catch (SQLException ex) {
                            bReturn = false;
                        }
                }                          
             }
             }
            
             jsonReturn.put("bool", bReturn);
                jsonReturn.put("msg", sMessage);
                out.println(jsonReturn);
                //System.out.println("aryReqDet-->" + aryReqDet.toString());             
    }
  
    protected void Rej_REQ(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject jsonReturn = new net.sf.json.JSONObject();
        boolean bReturn = false;
        String sMessage = "";        
        
        DAL_StockReq objReq = new DAL_StockReq();
       // JSONArray jsonVerifiedItem = JSONArray.fromObject(request.getParameter("REQITEM"));
//        if (jsonVerifiedItem.size() > 0){
//            System.out.println("jsonReqItem-->" + jsonVerifiedItem);
//        }else{
//            System.out.println("jsonReqItem-->" + "no data");
//        }
            //String sHidx="", sDetIdx=""
                      String sHidx = request.getParameter("lblHIDX") == null ? "" : request.getParameter("lblHIDX").toUpperCase().trim();
                      String sDetIDx = request.getParameter("lblDetailIDX") == null ? "" : request.getParameter("lblDetailIDX").toUpperCase().trim();
                      String sRejCode = request.getParameter("ddlRej") == null ? "" : request.getParameter("ddlRej").toUpperCase().trim();
                      String sRejRemarks = request.getParameter("txtRemarks") == null ? "" : request.getParameter("txtRemarks").toUpperCase().trim();
        
        System.out.println("sHidx-->" + sHidx);
       
//             for (Object js : jsonVerifiedItem) {
//                  JSONObject json = (JSONObject) js;
//                  if (json.size() > 0){
             String[] aryRejReq = {
                     "REJECT_REQ" /*0. pMethod    varchar(30)*/,
                     sDetIDx, /* 1. pReqNo        varchar(10)*/
                     "", /* 2. pCompCode     varchar(10),*/
                     "", /* 3. pLocCode      varchar(10),*/
                     "", /* 4. pRemarks      varchar(100),*/
                     "", /* 5. pReqType      varchar(1),*/
                     "R", /* 6. pStatusCode   varchar(2),*/
                     "", /* 7. precstatus    varchar(10),*/
                     sHidx, /* 8. pIDX          varchar(10),*/
                     "", /* 9. pStkCode      varchar(16),*/
                     "", /* 10.pUomCode      varchar(6),*/
                     "", /* 11.pReqQty       varchar(10),*/                    
                     "", /* 12.pVerifiedQty  varchar(10),*/
                     "", /* 13.pApprovedQty  varchar(10),*/
                     "0", /* 14.pFillQty      varchar(10),*/
                     "0", /* 15.pCurrentBal   varchar(10),*/
                     sRejCode, /* 16.pReasonCode   varchar(6),*/
                     sRejRemarks, /* 17.pReasonRemark varchar(100),*/
                     (String) session.getAttribute("loginid") /* 18.pBy           varchar(20),*/
                  };
//             
             BLL_Common.Common_Object obj = objReq.DAL_ADDEDIT_STOCKREQ(SiteName, aryRejReq);

             try {
                    if (obj.getObjectArray(0).toString().equals("00000")) {
                       
                        obj.commit();
                        bReturn = true;
                        sMessage = obj.getObjectArray(1).toString();
                    } else {
                        obj.rollback();
                    }
                } catch (Exception e) {
                    try {
                            obj.rollback();
                        } catch (SQLException ex) {
                            bReturn = false;
                        }
                }                            
            // }
            // }
            
             jsonReturn.put("bool", bReturn);
                jsonReturn.put("msg", sMessage);
                out.println(jsonReturn);
                //System.out.println("aryReqDet-->" + aryReqDet.toString());               
  }
     
    protected void VERIFICATION_REQ(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject jsonReturn = new net.sf.json.JSONObject();
        boolean bReturn = false;
        String sMessage = "", sMethod = "", sStatus = "";       
        
        DAL_StockReq objReq = new DAL_StockReq();
        //JSONArray jsonVerifiedItem = (JSONArray) JSONSerializer.toJSON(request.getParameter("REQITEM"));//JSONArray.fromObject(request.getParameter("REQITEM"));
      // JSONObject jsonVerifiedItem = (JSONObject) JSONSerializer.toJSON(request.getParameter("REQITEM"));
        
        //JSONArray sPoDetail = JSONArray.fromObject(request.getParameter("REQITEM"));
       
        JSONArray jsonVerifiedItem = JSONArray.fromObject(request.getParameter("REQITEM"));
       // JSONArray deletedtrs_array = jsonVerifiedItem.getJSONArray(0);
        //JSONObject jsonFilter = (JSONObject) JSONSerializer.toJSON(sPoDetail);
       // JSONArray jsonPoArr = jsonFilter.names();
//        if (jsonVerifiedItem.size() > 0){
//            System.out.println("jsonReqItem-->" + jsonVerifiedItem);
//        }else{
//            System.out.println("jsonReqItem-->" + "no data");
//        }
            
        
        
      //  for (int i = 0; i < jsonPoArr.size(); i++) {
        //    JSONArray innerArray = jsonFilter.getJSONArray((String) jsonPoArr.get(i));
        
        for(int i = 0; i < jsonVerifiedItem.size(); i++)
        {
         JSONObject object3 = jsonVerifiedItem.getJSONObject(i);
         
           sStatus = object3.get("ReqStatus").toString().trim();
                      
                      if (sStatus.equals("A")){
                         sMethod = "APPROVE_REQ" ;
                      }else if(sStatus.equals("V")){
                         sMethod = "VERIFIED_REQ" ; 
                      }else if(sStatus.equals("R")){
                         sMethod = "REJECT_REQ" ; 
                      }
         
         
            String[] aryReqDet = {
                     sMethod /*0. pMethod    varchar(30)*/,
                     object3.get("DetailIDX").toString().trim(), /* 1. pReqNo        varchar(10)*/
                     "", /* 2. pCompCode     varchar(10),*/
                     "", /* 3. pLocCode      varchar(10),*/
                     "", /* 4. pRemarks      varchar(100),*/
                     "", /* 5. pReqType      varchar(1),*/
                     object3.get("ReqStatus").toString().trim(), /* 6. pStatusCode   varchar(2),*/
                     "", /* 7. precstatus    varchar(10),*/
                    object3.get("HIDX").toString().trim(), /* 8. pIDX          varchar(10),*/
                     "", /* 9. pStkCode      varchar(16),*/
                     "", /* 10.pUomCode      varchar(6),*/
                     "", /* 11.pReqQty       varchar(10),*/                    
                     object3.get("VerifiedQty").toString().trim(), /* 12.pVerifiedQty  varchar(10),*/
                     object3.get("ApprovedQty").toString().trim(), /* 13.pApprovedQty  varchar(10),*/
                     "0", /* 14.pFillQty      varchar(10),*/
                     "0", /* 15.pCurrentBal   varchar(10),*/
                     object3.get("RejCode").toString().trim(), /* 16.pReasonCode   varchar(6),*/
                     object3.get("RejRemarks").toString().trim(), /* 17.pReasonRemark varchar(100),*/
                     (String) session.getAttribute("loginid") /* 18.pBy           varchar(20),*/
                  };
           
             BLL_Common.Common_Object obj = objReq.DAL_ADDEDIT_STOCKREQ(SiteName, aryReqDet);

             try {
                    if (obj.getObjectArray(0).toString().equals("00000")) {
                       
                        obj.commit();
                        bReturn = true;
                        sMessage = obj.getObjectArray(1).toString();
                    } else {
                        obj.rollback();
                    }
                } catch (Exception e) {
                    try {
                            obj.rollback();
                        } catch (SQLException ex) {
                            bReturn = false;
                        }
                }
        }                           
            // }
            // }
        //}
             
            
             jsonReturn.put("bool", bReturn);
                jsonReturn.put("msg", sMessage);
                out.println(jsonReturn);
                //System.out.println("aryReqDet-->" + aryReqDet.toString());             
  }

    public static boolean MANUAL_REQ(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
    //public static boolean UpdateStockCostQty(String JsonXferItem, String[] sIn) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        boolean b = false;
         
        DAL_StockReq objReq = new DAL_StockReq();
        DAL_PopulateData obj_No = new DAL_PopulateData();
        BLL_StockRequest BLLStkReq = new BLL_StockRequest();
        
        net.sf.json.JSONObject jsonReturn = new net.sf.json.JSONObject();
       
        String sMessage = "", sReqNo="", sCompany="", sLocCode="";
       
        JSONArray jsonReqHead = JSONArray.fromObject(request.getParameter("REQMASTER"));
        JSONObject jsonReqItem =(JSONObject) JSONSerializer.toJSON(request.getParameter("REQDETAIL")); 
        JSONArray aryReqNo = null;
       // JSONArray jsonReqItem = JSONArray.fromObject(request.getParameter("REQDETAIL"));
        System.out.println("jsonReqHead-->" + jsonReqHead.toString());
        System.out.println("jsonReqItem-->" + jsonReqItem.toString());
        
            BLL_Common.Common_Object rsGRPPoNo = obj_No.DAL_GetNumber(SiteName, new String[]{"GET_NUMBER","REQUEST",""});  
            aryReqNo = (JSONArray) JSONSerializer.toJSON(rsGRPPoNo.getJSONArray(0).toString());
            JSONObject objGrpPoNo = aryReqNo.getJSONObject(0);
            sReqNo = objGrpPoNo.getString("NewNumber");
            
            String[] aryHead = {
                "ADD_STOCKREQHEAD" /*0. pMethod    varchar(30)*/,
                     sReqNo, /* 1. pReqNo        varchar(10)*/
                     "", /* 2. pCompCode     varchar(10),*/
                     "", /* 3. pLocCode      varchar(10),*/
                     "", /* 4. pRemarks      varchar(100),*/
                     "M", /* 5. pReqType      varchar(1),*/
                     "O", /* 6. pStatusCode   varchar(2),*/
                     "1", /* 7. precstatus    varchar(10),*/
                     "", /* 8. pIDX          varchar(10),*/
                     "", /* 9. pStkCode      varchar(16),*/
                     "", /* 10.pUomCode      varchar(6),*/
                     "", /* 11.pReqQty       varchar(10),*/
                     "", /* 12.pVerifiedQty  varchar(10),*/
                     "", /* 13.pApprovedQty  varchar(10),*/
                     "", /* 14.pFillQty      varchar(10),*/
                     "", /* 15.pCurrentBal   varchar(10),*/
                     "", /* 16.pReasonCode   varchar(6),*/
                     "", /* 17.pReasonRemark varchar(100),*/
                     (String) session.getAttribute("loginid"), /* 18.pBy varchar(20),*/
            };
            
            int length = jsonReqHead.size();
            for (int x = 0; x < length; x++) {
                JSONObject jsonObject = jsonReqHead.getJSONObject(x);
                String tempValue = jsonObject.getString("value");
                
                if (jsonObject.getString("name").equals("ddlCompany")) {
                        aryHead[2] = tempValue.toUpperCase();
                        sCompany = tempValue.toUpperCase();

                    } else if (jsonObject.getString("name").equals("ddlLoc")) {
                        aryHead[3] = tempValue.toUpperCase();
                        sLocCode = tempValue.toUpperCase();
                    }                
            }
             BLL_Common.Common_Object obj = objReq.DAL_ADDEDIT_STOCKREQ(SiteName, aryHead);
            
        try {
                    if (obj.getObjectArray(0).toString().equals("00000")) {
                        REQ_DETAIL_ADDEDIT(jsonReqItem, obj.getObjectArray(2).toString(), (String) session.getAttribute("loginid"), SiteName);
                        obj.commit();
                        b = true;
                        sMessage = sReqNo;//obj.getObjectArray(1).toString();
                    } else {
                        obj.rollback();
                    }
                } catch (Exception e) {
                    try {
                            obj.rollback();
                        } catch (SQLException ex) {
                            b = false;
                        }
                }

            
            jsonReturn.put("bool", b);
            jsonReturn.put("msg", sMessage);
            out.println(jsonReturn);
    
        
        return b;    
    }  


    public static boolean REQ_DETAIL_ADDEDIT(JSONObject sJsonIn, String sIDX, String sBy, String SiteName) throws IOException, SQLException {
        boolean b = false;
        DAL_StockReq objReq = new DAL_StockReq();
        BLL_Common.Common_Object objReqDet = new BLL_Common.Common_Object();
       // JSONObject jsonFilter = sJsonIn;//(JSONObject) JSONSerializer.toJSON(JSONObject);
        JSONObject jReqItem =(JSONObject) JSONSerializer.toJSON(sJsonIn); 
        JSONArray jLocCode = jReqItem.names();
       // System.out.println("jLocCode-->" + jLocCode.toString());  
        for (int i = 0; i < sJsonIn.size(); i++) {
            JSONArray innerArray = jReqItem.getJSONArray((String) jLocCode.get(i));
             for (Object js : innerArray) {
                  JSONObject json = (JSONObject) js;
                  
                  //if (sLocCode.equals(json.get("LocCode").toString().trim()) && (Double.parseDouble(json.get("ReqQty").toString().trim())) > 0) {
                  String[] aryReqDet = {
                     "ADD_STOCKREQDETAIL" /*0. pMethod    varchar(30)*/,
                     "", /* 1. pReqNo        varchar(10)*/
                     "", /* 2. pCompCode     varchar(10),*/
                     "", /* 3. pLocCode      varchar(10),*/
                     "", /* 4. pRemarks      varchar(100),*/
                     "M", /* 5. pReqType      varchar(1),*/
                     "O", /* 6. pStatusCode   varchar(2),*/
                     "1", /* 7. precstatus    varchar(10),*/
                     sIDX, /* 8. pIDX          varchar(10),*/
                     json.get("PRDCODE").toString().trim(), /* 9. pStkCode      varchar(16),*/
                     json.get("UOM").toString().trim(),/* 10.pUomCode      varchar(6),*/
                     json.get("QTY").toString().trim(), /* 11.pReqQty       varchar(10),*/
                     "0", /* 12.pVerifiedQty  varchar(10),*/
                     "0", /* 13.pApprovedQty  varchar(10),*/
                     "0", /* 14.pFillQty      varchar(10),*/
                     "0", /* 15.pCurrentBal   varchar(10),*/
                     "", /* 16.pReasonCode   varchar(6),*/
                     "", /* 17.pReasonRemark varchar(100),*/
                     sBy, /* 18.pBy */
                     
                     
                    
                  };
                  
                objReqDet = objReq.DAL_ADDEDIT_STOCKREQ(SiteName, aryReqDet);
                
                try {
                    
                  if (objReqDet.getObjectArray(0).toString().equals("00000")) {
                      b = objReqDet.getObjectArray(0).toString().equals("00000");
                      objReqDet.commit();
                    } else {                        
                        objReqDet.rollback();
                    }
                   } catch (Exception e) {
                    try {
                            objReqDet.rollback();
                        } catch (SQLException ex) {
                            b = false;
                        }
                }
                //  }
             }
        }
            return b;            
      }   
     
     public void Bind_Stock_Balance_List(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession(); 
        String SiteName = (String) session.getAttribute("SiteName");
         
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        //Get page and rows value from JSP page
        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));
        String sCompCode = request.getParameter("COMPCODE");
        String sStkCode = request.getParameter("STKCODE");

        //Calculate offset value
        //int offset = (page - 1) * rows;       
        int total = 0;
        double pageval = 0;
        
        DAL_StockReq DalReq = new DAL_StockReq();

        BLL_Common.Common_Object StkBalList = DalReq.DAL_GET_REQUESTLIST(SiteName, new String[]{
            "GET_STKBALANCE_STKREQ",sCompCode,"","","","",sStkCode,"","","","",Integer.toString(page),Integer.toString(rows)});

        BLL_Common.Common_Object StkBalTotalRow = DalReq.DAL_GET_REQUESTLIST(SiteName, new String[]{
            "COUNT_STKBALANCE_STKREQ",sCompCode,"","","","",sStkCode,"","","","","",""});

        //Execute all queries here
        try {

            total = StkBalTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", StkBalList.getJSONArray(0));

            //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }
        out.print(json);
        out.flush();
        out.close();
    }               
 
    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
       // processRequest(request, response);
        String p_method = null;
        p_method = request.getParameter("SFC");
        
        if (p_method.equals("VERIFIED_REQ")) {
            try {
                Verified_REQ(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }else if (p_method.equals("APPROVE_REQ")) {
            try {
                Approve_REQ(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }        
        }else if (p_method.equals("REJ_REQ")) {
            try {
                Rej_REQ(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }        
        }else if (p_method.equals("VERIFICATION_PROCESS")) {
            try {
                VERIFICATION_REQ(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }        
        }
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // processRequest(request, response);
        String p_method = null;
        p_method = request.getParameter("SFC");
        
         if (p_method.equals("GET_REQUEST_LIST")) {
            try {
                Bind_Request_List(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }  else if (p_method.equals("STOCK_REQ")) {
            try {
                STOCK_REQUEST_LIST(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }

        } else if (p_method.equals("UPDATE_FULFILLED_QTY")) {
            try {
                Update_Fulfilled_Qty(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }else if (p_method.equals("GET_REQ_DETAIL")) {
            try {
                Bind_Request_DetList(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }else if (p_method.equals("GET_REQ_GRP")) {
            try {
                Bind_Request_GrpList(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }else if (p_method.equals("ADD_MANUAL_REQ")) {
            try {
                MANUAL_REQ(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }

 } else if (p_method.equals("GET_STK_BALANCE")) {
            try {
                Bind_Stock_Balance_List(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}

//    public static boolean Re_OrderJson(String JsonString) throws IOException, SQLException {
//         
//    JSONArray jsonArr = JSONArray.fromObject(JsonString);//new JSONArray(jsonIn);
//    JSONObject sortedJsonArray = new JSONObject();
//
//    List<JSONObject> jsonValues = new ArrayList<JSONObject>();
//    for (int i = 0; i < jsonArr.size(); i++) {
//        jsonValues.add(jsonArr.getJSONObject(i));
//    }
//    
//    Collections.sort( jsonValues, new Comparator<JSONObject>() {
//        //You can change "Name" with "ID" if you want to sort by ID
//        private static final String KEY_NAME = "LocCode";
//
//        @Override
//        public int compare(JSONObject a, JSONObject b) {
//            String valA = new String();
//            String valB = new String();
//
//            try {
//                valA = (String) a.get(KEY_NAME);
//                valB = (String) b.get(KEY_NAME);
//            } 
//            catch (JSONException e) {
//                //do something
//            }
//
//            return valA.compareTo(valB);
//            
//            
//            //if you want to change the sort order, simply use the following:
//            //return -valA.compareTo(valB);
//        }
//        
//        
//    });
//  for (int i = 0; i < jsonArr.size(); i++) {
//      
//      
//      
//        sortedJsonArray.put("",jsonValues.get(i));
//        System.out.println("Format Json-->" + sortedJsonArray);
//        
//    }
//  
//      return true;   
//     }