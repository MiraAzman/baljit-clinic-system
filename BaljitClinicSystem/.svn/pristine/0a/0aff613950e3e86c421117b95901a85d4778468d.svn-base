package BusinessLogic;

import BusinessData.DAL_PopulateData;
import BusinessData.DAL_Stock;

import BusinessData.DAL_StockLedger;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JSONException;

import org.apache.commons.collections.CollectionUtils;

import static BusinessLogic.Servlet_Stock.Product_Pricing;
import static BusinessLogic.Servlet_Stock.TRX_UOM_CONVERT;

import java.util.Iterator;
import net.sf.json.JSONSerializer;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author N3359
 */
@WebServlet(name = "Servlet_StockLedger", urlPatterns = {"/Servlet_StockLedger"})
public class Servlet_StockLedger extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet Servlet_StockLedger</title>");            
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet Servlet_StockLedger at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

    public static BLL_Common.Common_Object UPDATE_STOCK_LEDGER(String SiteName, JSONObject JsonLedger) throws IOException, SQLException {
        boolean b = false;
        String sMethod = null;
        
        DAL_StockLedger objUpdLedger = new DAL_StockLedger();
        BLL_Common.Common_Object objLedger = new BLL_Common.Common_Object();

        int i=0;

               switch (JsonLedger.getString("HEADER_DETAIL")) {
                   case "HEADER":
                   {
                        sMethod = "ADD_STOCKLEDGERHEADER";

                        switch (JsonLedger.getString("FUNCTION")) {
                            case "INSERT":
                                sMethod = "ADD_STOCKLEDGERHEADER";
                                break;
                            case "UPDATE":
                                sMethod = "";
                                break;
                            case "DELETE":
                                sMethod = "";
                                break;
                            case "NO":
                                break;
                        }
                        break;
                   }
                   case "DETAIL":
                   {
                        sMethod = "ADD_STOCKLEDGERDETAIL";

                        switch (JsonLedger.getString("FUNCTION")) {
                            case "INSERT":
                                sMethod = "ADD_STOCKLEDGERDETAIL";
                                break;
                            case "UPDATE":
                                sMethod = "";
                                break;
                            case "DELETE":
                                sMethod = "";
                                break;
                            case "NO":
                                break;
                        }
                        break;
                   }
               }
               
               
                if (sMethod != null) {
                    SimpleDateFormat ft = 
                        new SimpleDateFormat ("yyyy-MM-dd hh:mm:ss");
                    
//                     Date dtRefDate = (Date)JsonLedger.get("sldg_refdate");
//                     String sRefDate = "";
//                     if (dtRefDate == null)
//                         sRefDate = null;
//                     else
//                         sRefDate = ft.format(dtRefDate);
                     
                    String sRefDate = JsonLedger.get("sldg_refdate").toString();
//                    if (sRefDate != "")
//                    {
//                        sRefDate = ft.format(sRefDate);
//                    }
//                     
//                    Date dtDODate = (Date)JsonLedger.get("sldg_dodate");
//                    String sDODate = "";
//                     if (dtDODate == null)
//                         sDODate = null;
//                     else
//                         sDODate = ft.format(dtDODate);
                     String sDODate = JsonLedger.get("sldg_dodate").toString();
//                     if (sDODate != "")
//                    {
//                        sDODate = ft.format(sDODate);
//                    }
//                    Date dtInvDate = (Date)JsonLedger.get("sldg_invdate");
//                    String sInvDate = "";
//                     if (dtInvDate == null)
//                         sInvDate = null;
//                     else
//                         sInvDate = ft.format(dtInvDate);
                     String sInvDate =  JsonLedger.get("sldg_invdate").toString();
//                     if (sInvDate != "")
//                    {
//                        sInvDate = ft.format(sInvDate);
//                    }
                      //
//                    Date dtExpDate = (Date)JsonLedger.get("sldl_expirydate");
//                    String sExpDate = "";
//                     if (dtExpDate == null)
//                         sExpDate = null;
//                     else
//                         sExpDate = ft.format(dtExpDate);
                                 
                    String sExpDate = JsonLedger.get("sldl_expirydate").toString();
                    
                    
                    if (sExpDate != "")
                    {
                        try
                        {
                            Date dtExpDate = ft.parse(sExpDate);
                            sExpDate = ft.format(dtExpDate);
                        }
                        catch(Exception e)
                        {}
                    } 
                     
                    String[] aryItm = {
                        sMethod /*sMethod VARCHAR(30)*/,

                        JsonLedger.get("StockLedgerHdrIdx").toString().toUpperCase(), /*INTEGER,*/
                        JsonLedger.get("StockLedgerDtlIdx").toString().toUpperCase(), /*INTEGER,*/
                        JsonLedger.get("sldg_company").toString().toUpperCase(), /*VARCHAR(10),*/
                        JsonLedger.get("sldg_location").toString().toUpperCase(), /*VARCHAR(10),*/
                        JsonLedger.get("sldg_finyear").toString().toUpperCase(), /*INTEGER,*/
                        JsonLedger.get("sldg_finperiod").toString().toUpperCase(), /*INTEGER,*/
                        JsonLedger.get("sldg_reasoncode").toString().toUpperCase(), /*VARCHAR(6),*/
                        JsonLedger.get("sldg_trxtype").toString().toUpperCase(), /*VARCHAR(6),*/
                        JsonLedger.get("sldg_suppliercode").toString().toUpperCase(), /*VARCHAR(10),*/
                        JsonLedger.get("sldg_intercompanysupplier").toString().toUpperCase(), /*VARCHAR(4),*/
                        JsonLedger.get("sldg_docno").toString().toUpperCase(), /*VARCHAR(10),*/
                        JsonLedger.get("sldg_docdate").toString().toUpperCase(), /*DATETIME,*/
                        JsonLedger.get("sldg_refno").toString().toUpperCase(), /*VARCHAR(30),*/
                        sRefDate, /* JsonLedger.get("sldg_refdate").toString().toUpperCase(), DATETIME,*/
                         
                        JsonLedger.get("sldg_invno").toString().toUpperCase(), /*VARCHAR(30),*/
                        sInvDate, /* JsonLedger.get("sldg_invdate").toString().toUpperCase(), /*DATETIME,*/
                        JsonLedger.get("sldg_dono").toString().toUpperCase(), /*VARCHAR(30),*/
                        sDODate, /* JsonLedger.get("sldg_dodate").toString().toUpperCase(), /*DATETIME,*/
                        JsonLedger.get("sldg_remark").toString().toUpperCase(), /*VARCHAR(100),*/
                        JsonLedger.get("sldg_isgstinclusive").toString().toUpperCase(), /*VARCHAR(1),*/
                        JsonLedger.get("sldl_lineno").toString().toUpperCase(), /*INTEGER,*/
                        JsonLedger.get("sldl_stockidx").toString().toUpperCase(), /*INTEGER,*/
                        JsonLedger.get("sldl_stockcode").toString().toUpperCase(), /*VARCHAR(10),*/
                        
                        JsonLedger.get("sldl_uomcode").toString().toUpperCase(), /*VARCHAR(6),*/
                        JsonLedger.get("sldl_uomidx").toString().toUpperCase(), /*INTEGER,*/
                        JsonLedger.get("sldl_unitcost").toString().toUpperCase(), /*VARCHAR(20),*/
                        JsonLedger.get("sldl_qty").toString().toUpperCase(), /*VARCHAR(20),*/
                        JsonLedger.get("sldl_discamt").toString().toUpperCase(), /*VARCHAR(20),*/
                        JsonLedger.get("sldl_subtotalamt").toString().toUpperCase(), /*VARCHAR(20),*/
                        JsonLedger.get("sldl_discpercent").toString().toUpperCase(), /*VARCHAR(20),*/
                        JsonLedger.get("sldl_discoption").toString().toUpperCase(), /*VARCHAR(1),*/
                        sExpDate, /* JsonLedger.get("sldl_expirydate").toString().toUpperCase(), /*DATETIME,*/
                        JsonLedger.get("sldl_batchno").toString().toUpperCase(), /*VARCHAR(10),*/
                        JsonLedger.get("sldl_pono").toString().toUpperCase(), /*VARCHAR(30),*/
                        JsonLedger.get("sldl_location").toString().toUpperCase(), /*VARCHAR(10),*/
                        JsonLedger.get("sldl_poqty").toString().toUpperCase(), /*VARCHAR(20),*/
                        JsonLedger.get("sldl_bonusqty").toString().toUpperCase(), /*VARCHAR(20),*/
                        JsonLedger.get("sldl_pobonusqty").toString().toUpperCase(), /*VARCHAR(20),*/
                        JsonLedger.get("sldl_polineno").toString().toUpperCase(), /*INTEGER,*/
                        JsonLedger.get("sldl_poidx").toString().toUpperCase(), /*INTEGER,*/
                        JsonLedger.get("sldl_convuomidx").toString().toUpperCase(), /*INTEGER,*/
                        JsonLedger.get("sldl_convqty").toString().toUpperCase(), /*VARCHAR(20),*/
                        JsonLedger.get("sldl_convunitcost").toString().toUpperCase(), /*VARCHAR(20),*/
                        JsonLedger.get("sldl_convuomcode").toString().toUpperCase(), /*VARCHAR(6),*/
                        JsonLedger.get("sldl_unitprice").toString().toUpperCase(), /*VARCHAR(20),*/
                        JsonLedger.get("sldl_gstpurcode").toString().toUpperCase(), /*VARCHAR(8),*/
                        JsonLedger.get("sldl_gsttaxrates").toString().toUpperCase(), /*VARCHAR(20),*/
                        JsonLedger.get("sldl_gstamt").toString().toUpperCase(), /*VARCHAR(20),*/
                        JsonLedger.get("sldl_grosstotal").toString().toUpperCase(), /*VARCHAR(20),*/
                        JsonLedger.get("systemname").toString().toUpperCase(), /*VARCHAR(10),*/
                        JsonLedger.get("By").toString().toUpperCase(), /*varchar(10),*/
                        JsonLedger.get("recstatus").toString().toUpperCase(), /*varchar(4),*/
                        "I" /*varchar(4),*/
                        ,"-99999"
                        ,JsonLedger.get("CONTROL_DATETIME").toString()
                        };
                    objLedger = objUpdLedger.DAL_UPDATE_STOCK_LEDGER(SiteName, aryItm);
                    // System.out.println();
                    if (objLedger.getObjectArray(0).toString().equals("00000")) {
                        sMethod = null;
                        objLedger.commit();
                        b = objLedger.getObjectArray(0).toString().equals("00000");
                    } else {
                        sMethod = null;
                        objLedger.rollback();
                    }
                }
//            }
//        }

        //return b;//objLedgerDtl.getObjectArray(0).toString().equals("00000");
                return objLedger;
    }
   
    
    
}
