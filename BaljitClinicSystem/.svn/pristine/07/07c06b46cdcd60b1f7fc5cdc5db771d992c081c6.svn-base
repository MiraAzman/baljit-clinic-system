package BusinessLogic;

import BusinessData.DAL_PopulateData;
import BusinessData.DAL_StockAdjustment;
import BusinessData.DAL_Stock;
import BusinessData.DAL_StockCostQty;
import static BusinessLogic.Servlet_GRN.DataTransfer_GRN;
import static BusinessLogic.Servlet_StockCostQty.UPDATE_STOCK_COSTQTY;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JSONException;

import org.apache.commons.collections.CollectionUtils;

import java.util.Iterator;
import net.sf.json.JSONSerializer;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author USER
 */
@WebServlet(name = "Servlet_StockAdjustment", urlPatterns = {"/Servlet_StockAdjustment"})
public class Servlet_StockAdjustment extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet Servlet_StockAdjustment</title>");            
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet Servlet_StockAdjustment at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        //processRequest(request, response);
        String p_method = null;
        p_method = request.getParameter("SFC");

        if (p_method.equals("GET_STKADJUSTMENT_LIST")) {
            try {
                GET_STOCK_ADJUSTMENT_LIST(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } else if (p_method.equals("GET_REL_LOCATION_WSM")) {
            try {
                GET_RELATED_LOCATION_WSM(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } else if (p_method.equals("GET_PRD_COSTQTY_LIST")) {
            try {
                Bind_Prd_CostQty_List(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } else if (p_method.equals("CREATE_STOCK_ADJUSTMENT")) {
            try {
                ADD_STOCK_ADJUSTMENT(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } else if (p_method.equals("GET_STKADJ_HEADER")) {
            try {
                GET_STOCK_ADJUSTMENT_HEADER(request, response);
            } catch (SQLException e) {
                e.printStackTrace();          
            } 
        } else if (p_method.equals("GET_STKADJ_ITEMS")) {
            try {
                GET_STOCK_ADJUSTMENT_ITEMS(request, response);
            } catch (SQLException e) {
                e.printStackTrace();          
            } 
        } else if (p_method.equals("GET_REL_STOCKUOM")) {
            try {
                GET_RELATED_STOCKUOM(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } 
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

    public void GET_STOCK_ADJUSTMENT_ITEMS(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
 
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
        
        String sAdjHdrIdx = request.getParameter("ADJHDRIDX");                 
        
        DAL_StockAdjustment StkAdjDtl = new DAL_StockAdjustment();
            
        try {
            BLL_Common.Common_Object ItemList = StkAdjDtl.DAL_GET_STOCK_ADJUSTMENT(SiteName, new String[]{
            "GET_STOCK_ADJ_ITEMS",sAdjHdrIdx,"","","","","","","","","","","","","",""});
            
            json.put("rows", ItemList.getJSONArray(0));
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } 
        out.print(json);
        out.flush();
        out.close();
    }
    
    public void GET_STOCK_ADJUSTMENT_HEADER(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
    
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        PrintWriter out = response.getWriter();
        response.setContentType("text/json");
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        String sAdjHdrIdx = request.getParameter("ADJHDRIDX");

        DAL_StockAdjustment StkRetHdr = new DAL_StockAdjustment();
            
        try {            
            BLL_Common.Common_Object rsDetail = StkRetHdr.DAL_GET_STOCK_ADJUSTMENT(SiteName, new String[]{
            "GET_STOCK_ADJ_HEADER",sAdjHdrIdx,"","","","","","","","","","","","","",""});
            
            json.put("row", rsDetail.getJSONArray(0));
            out.print(rsDetail.getJSONArrayAsJSONObject("object"));              
        } catch (Exception e) {
            out.println("Exception Error.");
            e.printStackTrace();
        } 
    } 
    
    public void GET_STOCK_ADJUSTMENT_LIST(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
 
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        //Get page and rows value from JSP page
        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));
        
        String sCompCode = request.getParameter("COMPCODE");          
        String sLocCode = request.getParameter("LOCCODE");
        String sStkCode = request.getParameter("STKCODE");                
        String sDocDate = request.getParameter("DOCDATE");  
                 
        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }
        
        DAL_StockAdjustment StkAdjList = new DAL_StockAdjustment();
        
        int total = 0;
        double pageval = 0;
        BLL_Common.Common_Object ItemList = StkAdjList.DAL_GET_STOCK_ADJUSTMENT(SiteName, new String[]{
            "GET_STOCK_ADJUSTMENT","",sCompCode,sLocCode,sStkCode,"","","",sDocDate,"","","","",sOrder,Integer.toString(page),Integer.toString(rows)});
    
        BLL_Common.Common_Object ItemTotalRow = StkAdjList.DAL_GET_STOCK_ADJUSTMENT(SiteName, new String[]{
            "COUNT_STOCK_ADJUSTMENT","",sCompCode,sLocCode,sStkCode,"","","",sDocDate,"","","","","","",""});
 
        //Execute all queries here
        try {
            total = ItemTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", ItemList.getJSONArray(0));

        //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } 
        out.print(json);
        out.flush();
        out.close();
    }

    public void GET_RELATED_LOCATION_WSM(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
     
        String sCompCode = request.getParameter("COMPANY");
        
        DAL_PopulateData CodeDescList = new DAL_PopulateData();
        BLL_Common.Common_Object obj = CodeDescList.Get_DAL_CODEDESC_Info(SiteName, new String[]{"GET_LOCATION_WSM", sCompCode, ""});

        try {
            json.put("rows", obj.getJSONArray(0));
            out.print(obj.getJSONArrayAsJSONObject("object"));
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        }
    }
    
    public void GET_RELATED_STOCKUOM(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
     
        String sStkCode = request.getParameter("STKCODE");
        
        DAL_PopulateData CodeDescList = new DAL_PopulateData();
        BLL_Common.Common_Object obj = CodeDescList.Get_DAL_CODEDESC_Info(SiteName, new String[]{"GET_REL_STKUOM", sStkCode, ""});

        try {
            json.put("rows", obj.getJSONArray(0));
            out.print(obj.getJSONArrayAsJSONObject("object"));
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        }
    }

    public void Bind_Prd_CostQty_List(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));

        String sCompany = request.getParameter("COMPANY");
        String sLocation = request.getParameter("LOCATION");
        String sPrdCode = request.getParameter("PRDCODE"); 
        String sPrdGrp = request.getParameter("PRDGRP");
        String sPrdType = request.getParameter("PRDTYPE");
        String sPrdCat = request.getParameter("PRDCAT");

        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }

        //Calculate offset value
        //int offset = (page - 1) * rows;
        DAL_StockAdjustment DAL_PrdCostQty = new DAL_StockAdjustment();

        int total = 0;
        double pageval = 0;

        BLL_Common.Common_Object SignUpList = DAL_PrdCostQty.DAL_GET_STOCK_ADJUSTMENT(SiteName, new String[]{
            "GET_PRODUCT_COSTQTY_LIST","",sCompany,sLocation,sPrdCode,sPrdGrp,sPrdType,
            sPrdCat,"","","","","",sOrder,Integer.toString(page),Integer.toString(rows)});

        BLL_Common.Common_Object SignUpTotalRow = DAL_PrdCostQty.DAL_GET_STOCK_ADJUSTMENT(SiteName, new String[]{
            "COUNT_PRODUCT_COSTQTY_LIST","",sCompany,sLocation,sPrdCode,sPrdGrp,sPrdType,
            sPrdCat,"","","","","","","",""});

        try {
            total = SignUpTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }
       
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", SignUpList.getJSONArray(0));           

        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } 

        out.print(json);
        out.flush();
        out.close();
    } 

    public void ADD_STOCK_ADJUSTMENT(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
        //JSONParser parser = new JSONParser();

        String sMessage = "";
        boolean bReturn = false;
         
        String sAdjHdrIdx = request.getParameter("ADJHDRIDX");
        String JsonAdj = request.getParameter("ITEMS");
        String sCompCode = request.getParameter("COMPANY");
        String sLocCode = request.getParameter("LOCATION");    
        String sControlDateTime = request.getParameter("CONTROL_DATETIME") ;

        int curYear = Calendar.getInstance().get(Calendar.YEAR);
        String sCurYear = Integer.toString(curYear);
        int curMonth = Calendar.getInstance().get(Calendar.MONTH);
        String sCurMonth = Integer.toString(curMonth);
        
        JSONArray aryAdjNo = null;
        DAL_PopulateData obj_No = new DAL_PopulateData();              
        BLL_Common.Common_Object rsNo = obj_No.DAL_GetNumber(SiteName, new String[]{"GET_NUMBER","ADJ",""});  
        aryAdjNo = (JSONArray) JSONSerializer.toJSON(rsNo.getJSONArray(0).toString());
        JSONObject objDocNo = aryAdjNo.getJSONObject(0);
        String sDocNo =  objDocNo.getString("NewNumber");
        
        rsNo.commit();        
               
        String[] aryHdr = {
            "ADD_ADJUSTMENT_HEADER", // sMethod VARCHAR(50)
            sAdjHdrIdx, // sadjh_headeridx INTEGER
            "0",         // sadjd_detailidx INTEGER
            sCompCode,  // sadjh_companycode VARCHAR(10)
            sCurYear,   // sadjh_finyear INTEGER
            sCurMonth,  // sadjh_finperiod INTEGER
            "ADJ",      // sadjh_trxtype VARCHAR(6)
            sDocNo,     // sadjh_docno VARCHAR(10)
            "",         // sadjh_docdate VARCHAR(10)
            "",         // sadjh_remarks VARCHAR(200)
            "P",        // sadjh_status VARCHAR(1)
            "ADJ",      // sadjh_reasoncode VARCHAR(6)
            "",         // sadjd_locationcode VARCHAR(10)
            "",         // sadjd_stockcode VARCHAR(10)
            "0",         // sadjd_stockidx INTEGER
            "",         // sadjd_batchno VARCHAR(10)
            "",         // sadjd_expirydate VARCHAR(10)
            "0",         // sadjd_unitcost NUMERIC(15,3)
            "",         // sadjd_uomcode VARCHAR(6)
            "0",         // sadjd_uomidx INTEGER
            "0",         // sadjd_onhandqty NUMERIC(15,3)
            "0",         // sadjd_newqty NUMERIC(15,3)
            "0",         // sadjd_varianceqty NUMERIC(15,3)
            "",         // sadjd_defaultrow VARCHAR(1)
            (String)session.getAttribute("loginid"), // sBy VARCHAR(10)
            "1",         // sRecStatus VARCHAR(4),
            sControlDateTime // CreatedDT VARCHAR(20)
        };
           
        DAL_StockAdjustment objHdr = new DAL_StockAdjustment();
        BLL_Common.Common_Object obj = objHdr.DAL_ADD_STOCK_ADJUSTMENT(SiteName, aryHdr); // Add Stock Adjustment Header
                 
        try {
            if (obj.getObjectArray(0).toString().equals("00000")) {
                                                                                                               
                Date date = new Date();
                String sDocDate = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(date);

                String[] sIn = {sCompCode, sLocCode, sDocNo, sDocDate};
                boolean bUpdateSCQ = UpdateStockCostQty(request, JsonAdj, sIn); 
                boolean bUpdateStkBalance = UpdateStockBalance(request, JsonAdj, sIn);
                boolean bUpdateStkLedger = UpdateStockLedger(request, JsonAdj, sIn); 

                if (bUpdateSCQ && bUpdateStkBalance && bUpdateStkLedger) {   
//                    DataTransfer_GRN();

                    String[] hdrItem = {obj.getObjectArray(2).toString(), sCompCode, sLocCode};
                    Adj_Items(request, JsonAdj, hdrItem);

                    obj.commit(); 
                    bReturn = true;                                                        
                }
                else {
                   obj.rollback();
                }         
            } else {
                obj.rollback();
            }
        } catch (Exception e) {
            try {
                obj.rollback();
            } catch (SQLException ex) {
                bReturn = false;
            }
        }        
        json.put("bool", bReturn);
        json.put("msg", sMessage);
        out.println(json);
    }
    
    public static boolean Adj_Items(HttpServletRequest request, String JsonAdjItem, String[] sHdrItem) throws IOException, SQLException {
         
        HttpSession session = request.getSession();   
        String SiteName = (String) session.getAttribute("SiteName");
        
        boolean bReturn = false; 
        String sAdjHdrIdx = sHdrItem[0];
        String sCompCode = sHdrItem[1];
        String sLocCode = sHdrItem[2];
        
        JSONArray AdjItem_array = (JSONArray) JSONSerializer.toJSON(JsonAdjItem);           
        if (AdjItem_array.size() > 0) {
            for (Object js : AdjItem_array) { //iterate through JsonAdjItem
                        
                try {
                    JSONObject AdjItemjson = (JSONObject) js; 
                                                                 
                    String sStkCode = AdjItemjson.get("STKCODE").toString();
                    String sBatchNo = AdjItemjson.get("BATCHNO").toString();
                    String sExpiryDate = AdjItemjson.get("EXPIRYDATE").toString();
                    String sUnitCost = AdjItemjson.get("UNITCOST").toString();
                    String sUOMCode = AdjItemjson.get("UOMCODE").toString();                       
                    String sQty = AdjItemjson.get("QTY").toString();
                    String sActualQty = AdjItemjson.get("ACTUALQTY").toString();
                    String sVariance = AdjItemjson.get("VARIANCE").toString();
                    String sDefaultRow = AdjItemjson.get("DEFAULTROW").toString();
                    String sStkIdx = AdjItemjson.get("STKIDX").toString();
                    String sControlDatetime = AdjItemjson.get("CONTROL_DATETIME").toString();

                    String[] aryDtl = {
                        "ADD_ADJUSTMENT_DETAIL", // sMethod VARCHAR(50)
                        sAdjHdrIdx, // sadjh_headeridx INTEGER
                        "0",         // sadjd_detailidx INTEGER
                        sCompCode,  // sadjh_companycode VARCHAR(10)
                        "0",         // sadjh_finyear INTEGER
                        "0",         // sadjh_finperiod INTEGER
                        "",         // sadjh_trxtype VARCHAR(6)
                        "",         // sadjh_docno VARCHAR(10)
                        "",         // sadjh_docdate VARCHAR(10)
                        "",         // sadjh_remarks VARCHAR(200)
                        "",         // sadjh_status VARCHAR(1)
                        "",         // sadjh_reasoncode VARCHAR(6)
                        sLocCode,   // sadjd_locationcode VARCHAR(10)
                        sStkCode,   // sadjd_stockcode VARCHAR(10)
                        sStkIdx,    // sadjd_stockidx INTEGER
                        sBatchNo,   // sadjd_batchno VARCHAR(10)
                        sExpiryDate,// sadjd_expirydate VARCHAR(10)
                        sUnitCost,  // sadjd_unitcost NUMERIC(15,3)
                        sUOMCode,   // sadjd_uomcode VARCHAR(6)
                        "0",        // sadjd_uomidx INTEGER
                        sQty,       // sadjd_onhandqty NUMERIC(15,3)
                        sActualQty, // sadjd_newqty NUMERIC(15,3)
                        sVariance,  // sadjd_varianceqty NUMERIC(15,3)
                        sDefaultRow,// sadjd_defaultrow VARCHAR(1)
                        (String)session.getAttribute("loginid"), // sBy VARCHAR(10)
                        "1",         // sRecStatus VARCHAR(4)       
                        sControlDatetime // CreatedDT VARCHAR(20)
                    };

                    BLL_Common.Common_Object objAdjItem = new BLL_Common.Common_Object();
                    DAL_StockAdjustment obj_Adj = new DAL_StockAdjustment();
                    objAdjItem = obj_Adj.DAL_ADD_STOCK_ADJUSTMENT(SiteName, aryDtl);

                    if (objAdjItem.getObjectArray(0).toString().equals("00000")) {
                        
                        objAdjItem.commit();
                        bReturn = true;
                    } else {
                        objAdjItem.rollback();
                    }
                }
                catch (Exception e) {
                    bReturn = false;
                }
            }
        }
        return bReturn;
    }
    
    public static boolean UpdateStockCostQty(HttpServletRequest request, String JsonAdjItem, String[] sIn) throws ServletException, IOException, SQLException {
    
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        String sCompCode = sIn[0];            
        String sLocCode = sIn[1]; 
        boolean bReturn = false;                      
        
        JSONArray AdjItem_array = (JSONArray) JSONSerializer.toJSON(JsonAdjItem);           

        for (Object js : AdjItem_array) { //iterate through JsonAdjItem

            JSONObject AdjItemjson = (JSONObject) js; 
            String sStkCode = AdjItemjson.get("STKCODE").toString();                                             
            String sUOMCode = AdjItemjson.get("UOMCODE").toString();  
            String sBatchNo = AdjItemjson.get("BATCHNO").toString();  
            String sExpiryDate = AdjItemjson.get("EXPIRYDATE").toString();  
            String sUnitCost = AdjItemjson.get("UNITCOST").toString();  

            double dActualQty = Double.parseDouble(AdjItemjson.get("ACTUALQTY").toString());  
            double dQty = Double.parseDouble(AdjItemjson.get("QTY").toString());                 
            double dVariance = Double.parseDouble(AdjItemjson.get("VARIANCE").toString());  
            double deductQty = dVariance * -1;

            String sDefaultRow = AdjItemjson.get("DEFAULTROW").toString();  

            if (sDefaultRow.equals("Y")) 
            {                   
                DAL_StockAdjustment objUpdStkCostQty = new DAL_StockAdjustment();  
                BLL_Common.Common_Object obj = objUpdStkCostQty.DAL_GET_STOCK_ADJUSTMENT(SiteName, new String[]{
                    "GET_SCQ_DETAILS","", sCompCode, sLocCode, sStkCode,"","","","", sUOMCode,
                    sBatchNo, sUnitCost, sExpiryDate,"","",""});

                JSONArray StkCostQty_array = obj.getJSONArray(0);   

                for (Object jsStkCostQty : StkCostQty_array) { //iterate every record from get SCQ details 
 
                    JSONObject StkCostQtyjson = (JSONObject) jsStkCostQty;         

                    double currentQty = Double.parseDouble(StkCostQtyjson.get("scq_qty").toString());
                    double addQty, updatedQty = 0, dAddDeductQty = 0;

                    JSONObject jsUpd = new JSONObject(); 
                    if (dActualQty == 0) //delete record from scq
                    {
                        DAL_StockCostQty objDelStkCostQty = new DAL_StockCostQty();
                        BLL_Common.Common_Object objStkCostQty = new BLL_Common.Common_Object();
                        String[] aryItm = {
                            "DEL_COSTQTY_STKADJ", // 0 - sMethod VARCHAR(30)                                                                          
                            "0", // 1 - sSCQCostQtyIdx Integer
                            sCompCode, // 2 - sSCQCompanyCode varchar(10) 
                            sLocCode, // 3 - sSCQLocationCode varchar(10) 
                            sStkCode, // 4 - sSCQStockCode varchar(10) 
                            "0", // 5 - sSCQStockIdx Integer 
                            sBatchNo, // 6 - sSCQBatchNo varchar(10)
                            sExpiryDate, // 7 - sSCQExpiryDate datetime 
                            sUnitCost, // 8 - sSCQUnitcCost varchar(20) 
                            sUOMCode, // 9 - sSCQUOMCode varchar(6) 
                            "0", // 10 - sSCQUOMIdx Integer 
                            "0", // 11 - sSCQQty varchar(20) 
                            "", // 12 - sSCQReceivedDate datetime 
                            "", // 13 - scq_xfrdtlidx 
                            "", // 14 - sBy varchar(10) 
                            "", // 15 - srecstatus varchar(4) 
                            "", // 16   
                            "" // 17                                            
                        };
                        objStkCostQty = objDelStkCostQty.DAL_UPDATE_STOCK_COSTQTY(SiteName, aryItm);
                        if (objStkCostQty.getObjectArray(0).toString().equals("00000")) {
                            objStkCostQty.commit();
                            bReturn = true;
                            break;
                        } else {
                            objStkCostQty.rollback();
                        }
                    }
                    else if (dActualQty < dQty) //deduction
                    {                            
                        dAddDeductQty = 0;
                        if (currentQty >= deductQty) {
                            updatedQty = currentQty - deductQty;
                            dAddDeductQty = deductQty;
                            deductQty = 0;
                        }
                        else if (currentQty < deductQty) {
                            updatedQty = 0;
                            dAddDeductQty = deductQty - currentQty;
                            deductQty = deductQty - currentQty;
                        }
                        dAddDeductQty = dAddDeductQty * -1;

                        jsUpd.put("FUNCTION", "UPDATE");
                        jsUpd.put("scq_costqtyidx", StkCostQtyjson.get("scq_costqtyidx").toString());
                        jsUpd.put("scq_companycode", StkCostQtyjson.get("scq_companycode").toString());
                        jsUpd.put("scq_locationcode", StkCostQtyjson.get("scq_locationcode").toString());
                        jsUpd.put("scq_stockcode", StkCostQtyjson.get("scq_stockcode").toString());
                        jsUpd.put("scq_stockidx", StkCostQtyjson.get("scq_stockidx").toString());
                        jsUpd.put("scq_uomidx", StkCostQtyjson.get("scq_uomidx").toString());
                        jsUpd.put("BY", (String) session.getAttribute("loginid"));
                        jsUpd.put("recstatus", "1");
                        jsUpd.put("scq_xfrdtlidx", "");  
                        jsUpd.put("dataexchangestatus", "I");
                        jsUpd.put("dataexchangeqty", dAddDeductQty);
                        jsUpd.put("scq_uomcode", StkCostQtyjson.get("scq_uomcode").toString()); 
                        jsUpd.put("scq_batchno", StkCostQtyjson.get("scq_batchno").toString());                                                      
//                        jsUpd.put("scq_expirydate", StkCostQtyjson.get("scq_expirydate").toString());
                        try
                        {
                        jsUpd.put("scq_expirydate", StkCostQtyjson.get("scq_expirydate").toString());
                        }
                        catch (Exception e) 
                        {jsUpd.put("scq_expirydate", "");}

                        jsUpd.put("scq_unitcost", StkCostQtyjson.get("scq_unitcost").toString());                          
                        jsUpd.put("scq_qty", String.valueOf(updatedQty));    
                        try {
                            jsUpd.put("scq_receiveddate", StkCostQtyjson.get("scq_receiveddate").toString());                                 
                        }
                        catch (Exception e) {
                            jsUpd.put("scq_receiveddate", "");                                 
                        }
                        BusinessLogic.Servlet_StockCostQty.UPDATE_STOCK_COSTQTY(SiteName, jsUpd);  

                        if (deductQty == 0) {
                            bReturn = true;
                            break;
                        }
                    }
                    else if (dActualQty > dQty) //add
                    {
                        addQty = dVariance;

                        updatedQty = currentQty + addQty;
                        dAddDeductQty = addQty;

                        jsUpd.put("FUNCTION", "UPDATE");
                        jsUpd.put("scq_costqtyidx", StkCostQtyjson.get("scq_costqtyidx").toString());
                        jsUpd.put("scq_companycode", StkCostQtyjson.get("scq_companycode").toString());
                        jsUpd.put("scq_locationcode", StkCostQtyjson.get("scq_locationcode").toString());
                        jsUpd.put("scq_stockcode", StkCostQtyjson.get("scq_stockcode").toString());
                        jsUpd.put("scq_stockidx", StkCostQtyjson.get("scq_stockidx").toString());
                        jsUpd.put("scq_uomidx", StkCostQtyjson.get("scq_uomidx").toString());
                        jsUpd.put("BY", (String) session.getAttribute("loginid"));
                        jsUpd.put("recstatus", "1");
                        jsUpd.put("scq_xfrdtlidx", "");  
                        jsUpd.put("dataexchangestatus", "I");
                        jsUpd.put("dataexchangeqty", dAddDeductQty);
                        jsUpd.put("scq_uomcode", StkCostQtyjson.get("scq_uomcode").toString()); 
                        jsUpd.put("scq_batchno", StkCostQtyjson.get("scq_batchno").toString());                                                      
//                        jsUpd.put("scq_expirydate", StkCostQtyjson.get("scq_expirydate").toString());

                        try {
                        jsUpd.put("scq_expirydate", StkCostQtyjson.get("scq_expirydate").toString());
                        }
                        catch (Exception e) {
                            jsUpd.put("scq_expirydate", "");                                 
                        }
                        jsUpd.put("scq_unitcost", StkCostQtyjson.get("scq_unitcost").toString());                          
                        jsUpd.put("scq_qty", String.valueOf(updatedQty));    
                        try {
                            jsUpd.put("scq_receiveddate", StkCostQtyjson.get("scq_receiveddate").toString());                                 
                        }
                        catch (Exception e) {
                            jsUpd.put("scq_receiveddate", "");                                 
                        }
                        BusinessLogic.Servlet_StockCostQty.UPDATE_STOCK_COSTQTY(SiteName, jsUpd);  
                        bReturn = true;
                        break;
                    }
                }                    
            }
            else if (sDefaultRow.equals("N"))
            {
                JSONObject jsUpd = new JSONObject(); 
                jsUpd.put("FUNCTION", "INSERT");
                jsUpd.put("scq_costqtyidx", "0");
                jsUpd.put("scq_companycode", sCompCode);
                jsUpd.put("scq_locationcode", sLocCode);
                jsUpd.put("scq_stockcode", sStkCode);
                jsUpd.put("scq_stockidx", "0");
                jsUpd.put("scq_uomidx", "0");
                jsUpd.put("BY", (String) session.getAttribute("loginid"));
                jsUpd.put("recstatus", "1");
                jsUpd.put("scq_xfrdtlidx", "");  
                jsUpd.put("dataexchangestatus", "I");
                jsUpd.put("dataexchangeqty", dActualQty);
                jsUpd.put("scq_uomcode", sUOMCode); 
                jsUpd.put("scq_batchno", sBatchNo);                                                      
                jsUpd.put("scq_expirydate", sExpiryDate);
                jsUpd.put("scq_unitcost", sUnitCost);                          
                jsUpd.put("scq_qty", String.valueOf(dActualQty));     
                jsUpd.put("scq_receiveddate", "");                                 

                BusinessLogic.Servlet_StockCostQty.UPDATE_STOCK_COSTQTY(SiteName, jsUpd);
                bReturn = true;
            }
        }                                                                       
        return bReturn;
    }
       
    public static boolean UpdateStockBalance(HttpServletRequest request, String JsonAdjItem, String[] sIn) throws ServletException, IOException, SQLException {
    
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        String sCompCode = sIn[0];            
        String sLocCode = sIn[1]; 
        boolean bReturn = false;              
        
        JSONArray AdjItem_array = (JSONArray) JSONSerializer.toJSON(JsonAdjItem);           

        for (Object js : AdjItem_array) { //iterate through JsonAdjItem

            JSONObject AdjItemjson = (JSONObject) js; 
            String sStkCode = AdjItemjson.get("STKCODE").toString();
            String sUOMCode = AdjItemjson.get("UOMCODE").toString();              
            
            DAL_StockAdjustment objGetSCQ = new DAL_StockAdjustment();  
            BLL_Common.Common_Object obj = objGetSCQ.DAL_GET_STOCK_ADJUSTMENT(SiteName, new String[]{
                "GET_scq_qty","",sCompCode,sLocCode,sStkCode,"","","","",sUOMCode,"","","","","",""});

            double dBalQty = obj.getJSONArray(0).getJSONObject(0).getDouble("BalQty");                   
                
            String[] aryItm = {
                "STKADJ_UPDATE_STOCK_BALANCE",
                sCompCode,
                sLocCode,
                sStkCode,
                sUOMCode,
                Double.toString(dBalQty),                    
                (String)session.getAttribute("loginid"), 
                "1" 
            };

            DAL_Stock objUpdStkBal = new DAL_Stock();
            BLL_Common.Common_Object objStkBal = new BLL_Common.Common_Object();
            objStkBal = objUpdStkBal.DAL_ADDEDIT_STOCKT_BALANCE(SiteName, aryItm);

            if (objStkBal.getObjectArray(0).toString().equals("00000")) {
                objStkBal.commit();
                bReturn = true;
            } else {
                objStkBal.rollback();
                bReturn = false;
            }
        }
        return bReturn;
    }
    
    private static boolean UpdateStockLedger(HttpServletRequest request, String JsonAdjItem, String[] sIn) throws IOException, SQLException {

        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        boolean bReturn = false;
        String sLedgerHdrIdx = "";
        String sCompCode = sIn[0];            
        String sLocCode = sIn[1];
        String sDocNo = sIn[2];
        String sDocDate = sIn[3];
        
        int year = Calendar.getInstance().get(Calendar.YEAR);
        int mth = Calendar.getInstance().get(Calendar.MONTH);                
                     
        JSONArray AdjItem_array = (JSONArray) JSONSerializer.toJSON(JsonAdjItem); 
                        
        JSONObject jsControl = (JSONObject) AdjItem_array.getJSONObject(0);
        
        JSONObject jsNew = new JSONObject();                             
        jsNew.put("HEADER_DETAIL", "HEADER");          
        jsNew.put("FUNCTION","INSERT");
        jsNew.put("StockLedgerHdrIdx",0);
        jsNew.put("StockLedgerDtlIdx",0);
        jsNew.put("sldg_company",sCompCode);
        jsNew.put("sldg_location",sLocCode);
        jsNew.put("sldg_finyear",year);
        jsNew.put("sldg_finperiod",mth);
        jsNew.put("sldg_reasoncode","ADJ");
        jsNew.put("sldg_trxtype","ADJ");
        jsNew.put("sldg_suppliercode","");
        jsNew.put("sldg_intercompanysupplier","");
        jsNew.put("sldg_docno",sDocNo);
        jsNew.put("sldg_docdate",sDocDate);
        jsNew.put("sldg_refno","");
        jsNew.put("sldg_refdate","");
        jsNew.put("sldg_invno","");
        jsNew.put("sldg_invdate","");
        jsNew.put("sldg_dono","");
        jsNew.put("sldg_dodate","");
        jsNew.put("sldg_remark","");
        jsNew.put("sldg_isgstinclusive","");
        jsNew.put("sldl_lineno",0);
        jsNew.put("sldl_stockidx",0);
        jsNew.put("sldl_stockcode","");
        jsNew.put("sldl_uomcode","");
        jsNew.put("sldl_uomidx",0);
        jsNew.put("sldl_unitcost",0);
        jsNew.put("sldl_qty",0);
        jsNew.put("sldl_discamt",0);
        jsNew.put("sldl_subtotalamt",0);
        jsNew.put("sldl_discpercent",0);
        jsNew.put("sldl_discoption",0);
        jsNew.put("sldl_expirydate","");
        jsNew.put("sldl_batchno","");
        jsNew.put("sldl_pono","");
        jsNew.put("sldl_location","");
        jsNew.put("sldl_poqty",0);
        jsNew.put("sldl_bonusqty",0);
        jsNew.put("sldl_pobonusqty",0);
        jsNew.put("sldl_polineno",0);
        jsNew.put("sldl_poidx",0);
        jsNew.put("sldl_convuomidx",0);
        jsNew.put("sldl_convqty",0);
        jsNew.put("sldl_convunitcost",0);
        jsNew.put("sldl_convuomcode",0);
        jsNew.put("sldl_unitprice",0);
        jsNew.put("sldl_gstpurcode","");
        jsNew.put("sldl_gsttaxrates",0);
        jsNew.put("sldl_gstamt",0);
        jsNew.put("sldl_grosstotal",0);
        jsNew.put("systemname","PORTAL");
        jsNew.put("By","");
        jsNew.put("recstatus","1");    

        jsNew.put("CONTROL_DATETIME", jsControl.get("CONTROL_DATETIME").toString());

        BLL_Common.Common_Object objLedgerHdr = BusinessLogic.Servlet_StockLedger.UPDATE_STOCK_LEDGER(SiteName, jsNew);  

        if (objLedgerHdr.getObjectArray(0).toString().equals("00000")) {
            sLedgerHdrIdx = objLedgerHdr.getObjectArray(2).toString();
        } else {
            return false;
        }       

        for (Object js : AdjItem_array) { //iterate each item

            JSONObject AdjItemjson = (JSONObject) js;                     

            jsNew = new JSONObject();                             
            jsNew.put("HEADER_DETAIL", "DETAIL");
            jsNew.put("FUNCTION","INSERT");
            jsNew.put("StockLedgerHdrIdx",sLedgerHdrIdx);
            jsNew.put("StockLedgerDtlIdx",0);
            jsNew.put("sldg_company",sCompCode);
            jsNew.put("sldg_location",sLocCode);
            jsNew.put("sldg_finyear",year);
            jsNew.put("sldg_finperiod",mth);
            jsNew.put("sldg_reasoncode","ADJ");
            jsNew.put("sldg_trxtype","ADJ"); 
            if (AdjItemjson.get("DEFAULTROW").toString().equals("N"))
            {
              jsNew.put("sldl_qty",AdjItemjson.get("ACTUALQTY").toString());   
            }
            else
            {
                jsNew.put("sldl_qty",AdjItemjson.get("VARIANCE").toString());            
            }                                            
            jsNew.put("sldg_suppliercode","");
            jsNew.put("sldg_intercompanysupplier","");
            jsNew.put("sldg_docno",sDocNo);
            jsNew.put("sldg_docdate",sDocDate);
            jsNew.put("sldg_refno","");
            jsNew.put("sldg_refdate","");
            jsNew.put("sldg_invno","");
            jsNew.put("sldg_invdate","");
            jsNew.put("sldg_dono","");
            jsNew.put("sldg_dodate","");
            jsNew.put("sldg_remark","");
            jsNew.put("sldg_isgstinclusive","");
            jsNew.put("sldl_lineno",0);
            jsNew.put("sldl_stockidx",0);
            jsNew.put("sldl_stockcode",AdjItemjson.get("STKCODE").toString());
            jsNew.put("sldl_uomcode",AdjItemjson.get("UOMCODE").toString());
            jsNew.put("sldl_uomidx",0);
            jsNew.put("sldl_unitcost",AdjItemjson.get("UNITCOST").toString());                
            jsNew.put("sldl_discamt",0);
            jsNew.put("sldl_subtotalamt",0);
            jsNew.put("sldl_discpercent",0);
            jsNew.put("sldl_discoption",0);
            if (AdjItemjson.get("EXPIRYDATE") != null)
                jsNew.put("sldl_expirydate",AdjItemjson.get("EXPIRYDATE").toString());
            else
                jsNew.put("sldl_expirydate","");
            jsNew.put("sldl_batchno",AdjItemjson.get("BATCHNO").toString());
            jsNew.put("sldl_pono","");
            jsNew.put("sldl_location",sLocCode);
            jsNew.put("sldl_poqty",0);
            jsNew.put("sldl_bonusqty",0);
            jsNew.put("sldl_pobonusqty",0);
            jsNew.put("sldl_polineno",0);
            jsNew.put("sldl_poidx",0);
            jsNew.put("sldl_convuomidx",0);
            //jsNew.put("sldl_convqty",AdjItemjson.get("VARIANCE").toString());
            if (AdjItemjson.get("DEFAULTROW").toString().equals("N"))
            {
              jsNew.put("sldl_convqty",AdjItemjson.get("ACTUALQTY").toString());   
            }
            else
            {
                jsNew.put("sldl_convqty",AdjItemjson.get("VARIANCE").toString());    
            }

            jsNew.put("sldl_convunitcost",AdjItemjson.get("UNITCOST").toString());
            jsNew.put("sldl_convuomcode",AdjItemjson.get("UOMCODE").toString());
            jsNew.put("sldl_unitprice",0);
            jsNew.put("sldl_gstpurcode","");
            jsNew.put("sldl_gsttaxrates",0);
            jsNew.put("sldl_gstamt",0); 
            jsNew.put("sldl_grosstotal",0);
            jsNew.put("systemname","PORTAL");
            jsNew.put("By","");
            jsNew.put("recstatus","1");    
            jsNew.put("CONTROL_DATETIME", jsControl.get("CONTROL_DATETIME").toString());
            
            BLL_Common.Common_Object objLedgerDtl = BusinessLogic.Servlet_StockLedger.UPDATE_STOCK_LEDGER(SiteName, jsNew);             
            if (objLedgerDtl.getObjectArray(0).toString().equals("00000")) {

                objLedgerDtl.commit();
                bReturn = true;
            } else {
                objLedgerDtl.rollback();
            }              
        }
        return bReturn;
    }  
    
}
