package BusinessLogic;

import BusinessData.BaseDAL;
import BusinessData.DAL_PopulateData;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JSONException;

import org.apache.commons.collections.CollectionUtils;
import BusinessData.DAL_StockUOM;
import java.util.Iterator;
import net.sf.json.JSONSerializer;
import org.json.simple.parser.JSONParser;

import java.net.HttpURLConnection;
import java.net.URL;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;


/**
 *
 * @author N0535
 */
@WebServlet(name = "Servlet_StockUOM", urlPatterns = {"/Servlet_StockUOM"})

public class Servlet_StockUOM extends HttpServlet{
    
    public void Bind_StkUOM_List(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException 
    {
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        String sStkUOMCode = "";
        String sStkUOMDesc = "";
        
        JSONObject json = new JSONObject();

        //Get page and rows value from JSP page
        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));
        sStkUOMCode = request.getParameter("UOMCODE");
        sStkUOMDesc = request.getParameter("UOMDESC");
         
        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }

        //Calculate offset value
        //int offset = (page - 1) * rows;
        DAL_StockUOM DAL_UOM = new DAL_StockUOM();

        int total = 0;
        double pageval = 0;

        BLL_Common.Common_Object SignUpList = DAL_UOM.DAL_GET_STKUOMLIST(SiteName, new String[]{
            "GET_STKUOM_LIST", sStkUOMCode, sStkUOMDesc, sOrder, Integer.toString(page), Integer.toString(rows)});

        BLL_Common.Common_Object SignUpTotalRow = DAL_UOM.DAL_GET_STKUOMLIST(SiteName, new String[]{
            "COUNT_STKUOM_LIST", sStkUOMCode, sStkUOMDesc, "", "", ""});

        //Execute all queries here
        try {

            total = SignUpTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", SignUpList.getJSONArray(0));

            //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }

        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    
    public void Bind_StkUOM_Detail(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException
    {
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        PrintWriter out = response.getWriter();
        response.setContentType("text/json");

        JSONObject json = new JSONObject();

        try {
            String sStkUOMCode = request.getParameter("UOMCODE");
             DAL_StockUOM SupDetail = new DAL_StockUOM();
             BLL_Common.Common_Object rsStkUOM = SupDetail.DAL_GET_STKUOMLIST(SiteName, new String[]{
             "STKUOM_DETAIL", sStkUOMCode, "", "", "", ""});
              json.put("rows", rsStkUOM.getJSONArray(0));
              out.print(rsStkUOM.getJSONArrayAsJSONObject("object"));
             
        } catch (Exception e) {
            out.println("Exception Error.");
            e.printStackTrace();
        } finally {
           // BLL_Common.closeResultSet(rs,"");
        }
    }
    
    protected void INSERT_STKUOM(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
        //JSONParser parser = new JSONParser();
        //boolean return_bool = false;
        //String return_msg = "";

        String sMessage = "";
        JSONArray jsonSupplier = JSONArray.fromObject(request.getParameter("ADDUOM"));
        String sMode = request.getParameter("MODE");
        DAL_StockUOM obj_supplier = new DAL_StockUOM();
        String[] arySupplier = {
            sMode /*sMethod VARCHAR(30)*/,
            "" /*1-sStkUOMCode           varchar(10)*/,
            ""/*""/*2-sStkUOMDesc           varchar(100)*/,
            
            ""/*""/*31-sBy                varchar(10)*/,
            ""/*""/*32-srecstatus         varchar(4)*/};

        int length = jsonSupplier.size();
        for (int i = 0; i < length; i++) {
            JSONObject jsonObject = jsonSupplier.getJSONObject(i);
            String tempValue = jsonObject.getString("value");

            if (jsonObject.getString("name").equals("txtUOMCode")) {
                arySupplier[1] = tempValue.toUpperCase();
            } else if (jsonObject.getString("name").equals("txtUOMDesc")) {
                arySupplier[2] = tempValue.toUpperCase();
            }   else if (jsonObject.getString("name").equals("chkrecstatus")) {
                arySupplier[4] = tempValue.toUpperCase();
            }           
        }
        
        BLL_Common.Common_Object obj = obj_supplier.DAL_ADDEDIT_STKUOM(SiteName, arySupplier);
        boolean bReturn = false;

        try {
            if (obj.getObjectArray(0).toString().equals("00000")) {
                obj.commit();
                
                bReturn = true;
                sMessage = obj.getObjectArray(1).toString();
                DataTransfer_StockUOM(arySupplier[1], SiteName); //LLT - 20160516 DATA EXCHANGE
            } else {
                obj.rollback();
            }
        } catch (Exception e) {
            try {
                obj.rollback();
            } catch (SQLException ex) {
                bReturn = false;
            }
        }

        json.put("bool", bReturn);
        json.put("msg", sMessage);

        out.println(json);
    }
    
    public static String DataTransfer_StockUOM(String sUOMCode, String SiteName){
        return DataTransfer_StockUOM(sUOMCode, SiteName,"","");
    }
    //LLT - 20160516 DATA EXCHANGE
    public static String DataTransfer_StockUOM(String sUOMCode, String SiteName,String CompanyCode, String LocationCode){
//    public static String DataTransfer_StockUOM(String sUOMCode, String SiteName){

   
        int AllowableThreadCount = 50;
//        BLL_Stock sm = new BLL_Stock();
        DAL_StockUOM objUOM = new DAL_StockUOM();
        JSONObject obj_add = new JSONObject();
        JSONObject obj_pass = new JSONObject();
        String sMessage = "";
        
        String[] aryUOM = {
            "GET_DATAEX",     /*0. sMethod    varchar(30)  */
            sUOMCode,         /*1. sUOMCode    varchar(20)  */
            "",               /*2. sUOMDesc    varchar(100) */
            "",               /*3. sOrderBy    varchar(30)  */
            "",               /*4. sPage       varchar(10)  */
            ""                /*5. sPerPage    varchar(10)  */
        };
        
        BLL_Common.Common_Object obj = objUOM.DAL_GET_STKUOMLIST(SiteName, aryUOM);
        
        try{
            if(obj.getJSONArray(0).size() > 0){
                obj_add.put("UOM", obj.getJSONArray(0));
                
                if(obj.getJSONArray(1).size() > 0){
                    obj_pass.put("DATA", obj_add);
                    String sURL = "";
                    String sLoc = "";
                     String sComp = "";
                    
//                    for(Object jsonURL : obj.getJSONArray(1)){
//                        JSONObject jsURL = (JSONObject) jsonURL;
//                        
//                        sURL = jsURL.get("wsc_url").toString() + "HIS_WebServices_Inventory/webresources/HIS_WebServices/UpdateUOM";
//                        sLoc = jsURL.get("wsc_url").toString();
//                        if(!sURL.equals("")){
//                            sm.DataTransfer_Stock(obj_pass.toString(), sURL, sLoc);                            
//                        }
//                    }
                    

                    ExecutorService executor = Executors.newFixedThreadPool(AllowableThreadCount);  
                    
                    boolean bSingleSite = false;
                    if (!CompanyCode.equals("") && !LocationCode.equals(""))
                    {bSingleSite = true;}
                    
                    boolean bSiteFound = false;
                    
                    for(Object jsonURL : obj.getJSONArray(1)){
                        JSONObject jsURL = (JSONObject) jsonURL;
                        
                        sLoc = jsURL.get("wsc_locationcode").toString();
                        sComp = jsURL.get("wsc_companycode").toString();
                        bSiteFound = false;
                        
                        if (bSingleSite)
                        {
                            if (sLoc.equals(LocationCode) && sComp.equals(CompanyCode))
                            {
                                bSiteFound = true;
                            }
                        }
                        else
                        {
                            bSiteFound = true; //TAKE EVERY SITE 
                        }
                        
                        if (BaseDAL.CMSIntegrationType.equals("HIS")) {
                            sURL = jsURL.get("wsc_url").toString() + "HIS_WebServices_Inventory/webresources/HIS_WebServices/UpdateUOM";
                         }
                        else if (BaseDAL.CMSIntegrationType.equals("CMS")) {
                            sURL = jsURL.get("wsc_url").toString() + "CMS_WebServices_Inventory/webresources/CMS_WebServices/UpdateUOM";
                         }
                        else if (BaseDAL.CMSIntegrationType.equals("SKIN")) {
                            sURL = jsURL.get("wsc_url").toString() + "SKIN_WebServices_Inventory/webresources/SKIN_WebServices/UpdateUOM";
                        }
                        else {
                        sURL = jsURL.get("wsc_url").toString() + "HIS_WebServices_Inventory/webresources/HIS_WebServices/UpdateUOM";
                         }
//                        sURL = jsURL.get("wsc_url").toString() + "HIS_WebServices_Inventory/webresources/HIS_WebServices/UpdateUOM";
//                        sLoc = jsURL.get("wsc_url").toString();
                        
                        if (bSiteFound)
                        {
                            
                            boolean bStatus = false;
                            if (jsURL.get("wsc_url").toString().equals(""))
                            {
                                bStatus = false;
                            }
                            else
                            {
                                bStatus = BLL_Common.AA.isReachable2(jsURL.get("wsc_url").toString());
                            }
                            if (!bStatus)
                            {

                                if (!bSingleSite)
                                {
                                    String[] aryMasRecSync = new String[]{"ADD","STOCKUOM", sComp, sLoc, sUOMCode,"","",""};
                                    String sStatus = Servlet_MasterRecSync.UPDATE_MASTERREC_SYNC(aryMasRecSync, SiteName);
                                }
                            }
                            else
                            {
                                if(!sURL.equals(""))
                                {                            
                                    Runnable DEThread = new BLL_StockDataExchange(obj_pass.toString(), sURL, sLoc);
                                    executor.execute(DEThread);  
                                    sMessage = "SITE CONTACTED";
                                }
                            }
                        }
                        
                    }
                    executor.shutdown();
		// Wait until all threads are finish
//                    while (!executor.isTerminated()) { }
                }                
            }else{
                sMessage = "No data transfer.";
            }            
        }catch (Exception e){
            sMessage = e.toString();
        }
        
        return sMessage;
    }
    //END LLT - 20160516 DATA EXCHANGE
    
    
    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        // processRequest(request, response);
         String p_method = null;
        p_method = request.getParameter("SFC");
        
        if (p_method.equals("GET_STKUOM_DETAIL")) {
            try {
                Bind_StkUOM_Detail(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        
        
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // processRequest(request, response);
        String p_method = null;
        p_method = request.getParameter("SFC");

        if (p_method.equals("GET_STKUOM_LIST")) {
            try {
                Bind_StkUOM_List(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else if (p_method.equals("INSERT_STKUOM")) {
            try {
                INSERT_STKUOM(request, response);
           } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        else if (p_method.equals("UPDATE_STKUOM")) {
            try {
                INSERT_STKUOM(request, response);
           } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
}
