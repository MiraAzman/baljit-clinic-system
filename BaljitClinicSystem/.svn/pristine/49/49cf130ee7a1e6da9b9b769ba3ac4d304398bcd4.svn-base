package BusinessLogic;

import BusinessData.BaseDAL;
import static BusinessData.BaseDAL.JavaMySQLDriver;
import static BusinessData.BaseDAL.SiteDB_PWD;
import static BusinessData.BaseDAL.SiteDB_URL;
import static BusinessData.BaseDAL.SiteDB_USER;
import BusinessLogic.BLL_Common;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
// pengkee import Campaign.AutoSendEmail;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Calendar;
import java.util.Date;
import net.sf.json.JSONArray;
 
 
 

/**
 *
 * @author joe
 */
public class Scheduler implements ServletContextListener {

// pengkee   AutoSendEmail AS = new AutoSendEmail();
    BLL_Common DAL_CM = new BLL_Common();
    String ContextPathJasper = "";

    final Runnable myRunnable = new Runnable() {
        @Override
        public void run() {
            Calendar clRightNow = Calendar.getInstance();
            Date dtRightNow = clRightNow.getTime();
             
            Date now = new Date();
            DateFormat dateFormat = new SimpleDateFormat("EEE");

            String currWeekday = dateFormat.format(now);
            String currhour = new Integer(clRightNow.get(Calendar.HOUR_OF_DAY)).toString();

//            System.out.println("working at fixed rate delay");  

        Connection conn = null;  
        boolean bContinue = false;
        
        try {          
            Class.forName(JavaMySQLDriver);
            conn = DriverManager.getConnection(SiteDB_URL, SiteDB_USER, SiteDB_PWD);
            conn.setAutoCommit(true);
            bContinue = true;
        } catch (Exception ex) {             
             bContinue = false;
        }                
        
        
        if (bContinue)
        {
            //DAL_CM.write_log("Calling Scheduler Event", "");        
            BLL_Common.Common_Object objSchEvents = BaseDAL.Get_Multiple_QueryReturn(conn, "SP_GET_COMMON(?,?,?)", new String[]{"GET_SCHEDULED_EVENT", "", ""}, new int[]{});        
            if (objSchEvents.getJSONArray(0).size() > 0)
            {                
                JSONArray arySchEvent = objSchEvents.getJSONArray(0);

                for (int a = 0; a < arySchEvent.size(); a++) {
                    String[] param_sch = new String[11];
                    /* param
                                0 - index
                                1 - sch type -> the type of event
                                2 - sch sitename -> which inventory database to use for the process
                                3 - sch recurring (minute) -> loop after how many minutes
                                4 - sch valid hours range -> effetive on which hours with the day. 
                                        eg. 08:00-18:00 => 8am - 6pm. BLANK will mean no restriction.
                                5 - sch week days -> effective on which days of the week. BALNK will mean all days
                                6 - created by
                                7 - created on
                                8 - modified by
                                9 - modified on                                
                                10 - sch last run -> Last run. Null mean never un before.
                     */

                    param_sch[0] = arySchEvent.getJSONObject(a).getString("sch_index");
                    param_sch[1] = arySchEvent.getJSONObject(a).getString("sch_type");
                    param_sch[2] = arySchEvent.getJSONObject(a).getString("sch_sitename");
                    param_sch[3] = arySchEvent.getJSONObject(a).getString("sch_recurring_minute");
                    param_sch[4] = arySchEvent.getJSONObject(a).getString("sch_valid_hour_range");
                    
                    String[] aryValidHours = new String[]{};
                    if (param_sch[4].equals(""))
                    {aryValidHours = "00:00-23:59".split("-");}
                    else
                    {aryValidHours = param_sch[4].split("-");}
                     
                    param_sch[5] = arySchEvent.getJSONObject(a).getString("sch_weekday");
                    param_sch[6] = arySchEvent.getJSONObject(a).getString("createdby");
                    param_sch[7] = arySchEvent.getJSONObject(a).getString("createddt");
                    if (arySchEvent.getJSONObject(a).get("modifiedby") != null)
                    {param_sch[8] = arySchEvent.getJSONObject(a).getString("modifiedby");}
                    else
                    {param_sch[8] ="";                    }
                    
                    if (arySchEvent.getJSONObject(a).get("modifieddt") != null)
                    {param_sch[9] = arySchEvent.getJSONObject(a).getString("modifieddt");}
                    else
                    {param_sch[9] ="";}
                    
                    if (arySchEvent.getJSONObject(a).get("sch_last_run") != null)
                    {param_sch[10] = arySchEvent.getJSONObject(a).getString("sch_last_run");}
                    else
                    {param_sch[10] = "";}
                    
                    String[] weekday = new String[]{};
                    if (param_sch[5].equals(""))
                    {weekday = "MON;TUE;WED;THU;FRI;SAT;SUN".split(";");}
                    else
                    {weekday = param_sch[5].split(";");}

                    for (int i = 0; i < weekday.length; i++) {
                        if (weekday[i].equals(currWeekday.toUpperCase())) { //check valid weekday
                                                     
                            //check valid hours
                            boolean bHourValid = false;
                            
                            String sTmp = "";                                         
                            Date dtStart = null;
                            Date dtEnd = null;
                            try
                            {
                                sTmp = sTmp + Integer.toString( clRightNow.get(Calendar.YEAR)) + "-" + Integer.toString( clRightNow.get(Calendar.MONTH) + 1); //Calendar.Month is Zero base
                                sTmp = sTmp + "-" + Integer.toString( clRightNow.get(Calendar.DAY_OF_MONTH));
                                sTmp = sTmp + " " + aryValidHours[0];
                                dtStart = new SimpleDateFormat("yyyy-MM-dd HH:mm").parse(sTmp);
                            }
                            catch (Exception ex) {
                                DAL_CM.write_log("Exception : " + ex.toString(), "");
                            }

                            try
                            {
                                sTmp = "";
                                sTmp = sTmp + Integer.toString( clRightNow.get(Calendar.YEAR)) + "-" + Integer.toString( clRightNow.get(Calendar.MONTH)+ 1); //Calendar.Month is Zero base
                                sTmp = sTmp + "-" + Integer.toString( clRightNow.get(Calendar.DAY_OF_MONTH));
                                sTmp = sTmp + " " + aryValidHours[1];
                                dtEnd = new SimpleDateFormat("yyyy-MM-dd HH:mm").parse(sTmp);
                            }
                            catch (Exception ex) {
                                 DAL_CM.write_log("Exception : " + ex.toString(), "");
                            }
                            if (dtStart != null && dtEnd != null)
                            {
                                
                                if ( (dtRightNow.after(dtStart) || dtRightNow.equals(dtStart))
                                    && (dtRightNow.before(dtEnd) || dtRightNow.equals(dtEnd)))
                                //if (clRightNow.after(dtStart) && clRightNow.before(dtEnd))
//                                if (clRightNow.after(dtStart))
                                {
                                    bHourValid = true;                                                  
                                }
                            }
                            //check valid hours               
                            
                            if (bHourValid)
                            {
                                
                            
                                if (param_sch[10].equals(""))
                                {
                                    //fire
                                  //DAL_CM.write_log("fire ", "");
                                    String sStatus = "";        
                                    switch (param_sch[1]) {
                                    case "MASTER_SYNCH":                                          
                                    {    //DAL_CM.write_log("calling CALL_MASTERREC_SYNC_PROCESS. SiteName : " + param_sch[2], "");
                                        sStatus = Servlet_MasterRecSync.CALL_MASTERREC_SYNC_PROCESS(param_sch[2]);                                        
                                        break;
                                    }
                                    default:  
                                        break;
                                    }
                                    if (sStatus.equals( "OK"))
                                    {
                                        DAL_CM.write_log("calling UpdateLastRun. " + param_sch[0], "");
                                        UpdateLastRun(param_sch[0]);
                                    }
                                }
                                else
                                {
                                    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");        
                                    Date dtLastRun = null;
                                     try
                                        {
                                            dtLastRun = formatter.parse(param_sch[10]);                                        
//                                            dtLastRun = formatter.parse("2018-05-15 00:00");                                        
                                        } 
                                     catch (Exception ex) 
                                        {
                                            DAL_CM.write_log("Exception catched: " + ex.toString(), "");                
                                        }
                                     if (dtLastRun != null)
                                     {         
                                       Calendar clNextRun = Calendar.getInstance();                                       
                                       clNextRun.setTime(dtLastRun);       
                                       clNextRun.add(Calendar.MINUTE, Integer.parseInt(param_sch[3]));                                        
                                       if (clRightNow.after(clNextRun))
                                       {
                                         //fire
                                           Date aa = clNextRun.getTime();
                                           System.out.println(clNextRun.getTime());  
                                            String sStatus = "";
                                            switch (param_sch[1]) {
                                            case "MASTER_SYNCH":  
                                            {
                                                sStatus = Servlet_MasterRecSync.CALL_MASTERREC_SYNC_PROCESS(param_sch[2]);                                                
                                                break;
                                            }
                                            default:  
                                                break;
                                            }
                                             
                                            if (sStatus.equals( "OK"))
                                            {
                                                UpdateLastRun(param_sch[0]);
                                            }
                                       }
                                     }
                                }
                                
                            }
                           
                        }
                    }
                    //--
                    
                }
            }
//            try
//            {
//            conn.close();
//            }
//            catch (Exception e) 
//            {
//            }
        }
            
        }
    };

    private static void UpdateLastRun(String ScheduleIndex)
    {
        Connection conn2 = null;  
        boolean bConn2OK = false;
        try {          
            Class.forName(JavaMySQLDriver);
            conn2 = DriverManager.getConnection(SiteDB_URL, SiteDB_USER, SiteDB_PWD);
            conn2.setAutoCommit(true);
            bConn2OK = true;
            } catch (Exception ex) {             
                bConn2OK = false;
            }    
        if (bConn2OK)
        {
            BLL_Common.Common_Object obj = BaseDAL.Get_Multiple_QueryReturn(conn2, "SP_TRX_SCHEDULER(?,?,?,?,?,?,?,?,?,?,?)", new String[]{"EDIT_LAST_RUN",ScheduleIndex, "", "","", "","", "","", "",""}, new int[]{});        

            try
            {
            conn2.close();
            }
            catch(Exception e){}
        }
    }
    private volatile ScheduledExecutorService executor;

    @Override
    public void contextInitialized(ServletContextEvent sce) {
        ContextPathJasper = sce.getServletContext().getRealPath("/WEB-INF/JasperReport/");
        LocalDateTime localNow = LocalDateTime.now();
//        LocalDateTime sendEmailTime = LocalDate.now().atTime(13, 0);

        //every Hour
/*        LocalDateTime sendEmailTime = LocalDate.now().atTime((localNow.getHour() + 1), 0);

        if (localNow.compareTo(sendEmailTime) > 0) {
            sendEmailTime = sendEmailTime.plusDays(1);
        }

        Duration duration = Duration.between(localNow, sendEmailTime);
        long initalDelay = duration.getSeconds();
*/
        executor = Executors.newScheduledThreadPool(2);
//        executor.scheduleAtFixedRate(myRunnable, 0, 1000, TimeUnit.MINUTES);
// pengkee       executor.scheduleAtFixedRate(myRunnable, initalDelay, 3600, TimeUnit.SECONDS);
        //executor.scheduleAtFixedRate(myRunnable, 0, 30, TimeUnit.MINUTES);
        executor.scheduleAtFixedRate(myRunnable, 30, 90, TimeUnit.SECONDS);
        
        
    }

    @Override
    public void contextDestroyed(ServletContextEvent sce) {
        final ScheduledExecutorService executor = this.executor;

        if (executor != null) {
            executor.shutdown();
            this.executor = null;
        }
    }

}
