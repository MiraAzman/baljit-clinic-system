package BusinessLogic;

import BusinessData.DAL_PopulateData;
import BusinessData.DAL_Stock;
import BusinessData.DAL_StockLedger;
import BusinessData.DAL_StockTransfer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JSONException;

import org.apache.commons.collections.CollectionUtils;

import static BusinessLogic.Servlet_Stock.Product_Pricing;
import static BusinessLogic.Servlet_Stock.TRX_UOM_CONVERT;


import java.util.Iterator;
import net.sf.json.JSONSerializer;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author N3359
 */
@WebServlet(name = "Servlet_Transfer", urlPatterns = {"/Servlet_Transfer"})
public class Servlet_Transfer extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet Servlet_Transfer</title>");            
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet Servlet_Transfer at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }

    public JSONArray ddlGetCompanyBal(String sPrdCode, String sConvUOM, String SiteName) {
        DAL_StockTransfer CompList = new DAL_StockTransfer();
        String[] sMethod={};
        sMethod = new String[]{"GET_COMP_LIST",sPrdCode, sConvUOM, "stk_stockcode Desc", "1","20"};
        BLL_Common.Common_Object obj = CompList.DAL_GETCOMPLIST(SiteName, sMethod);
        try {
            return obj.getJSONArray(0);
        } catch (NullPointerException e) {
            return null;
        }
     }
     
    public void Bind_Company_StockBalance_List(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        String sPrdCode = "";
        String sConvUOM = ""; 

        //JSON object
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        //Get page and rows value from JSP page
        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));
        sPrdCode = request.getParameter("PRDCODE");
        sConvUOM = request.getParameter("CONVUOM");
         

        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }

        //Calculate offset value
        //int offset = (page - 1) * rows;
         DAL_StockTransfer DAL_Xfer = new DAL_StockTransfer();

        int total = 0;
        double pageval = 0;

//        BLL_Common.Common_Object XferList = DAL_Xfer.DAL_GETCOMPLIST(new String[]{
//            "TEST", sPrdCode, sOrder, Integer.toString(page), Integer.toString(rows)});
//
//        BLL_Common.Common_Object XferTotalRow = DAL_Xfer.DAL_GETCOMPLIST(new String[]{
//            "TEST", sPrdCode, "", "", ""});
        
         BLL_Common.Common_Object XferList = DAL_Xfer.DAL_GETCOMPLIST(SiteName, new String[]{
             "GET_COMP_LIST_WITH_PENDINGXFR",sPrdCode, sConvUOM, sOrder, Integer.toString(page), Integer.toString(rows)});

        BLL_Common.Common_Object XferTotalRow = DAL_Xfer.DAL_GETCOMPLIST(SiteName, new String[]{
           "COUNT_COMP_LIST", sPrdCode, sConvUOM, "", "", ""});

        //Execute all queries here
        try {

            total = XferTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", XferList.getJSONArray(0));

            //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }

        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }

    public void GET_LOCATION_STK_BAL(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        String sCompCode = "";
        String sStkCode = "";
        String sMethod = ""; 
        String sConvUOM = "";
        String sLocation = "";

        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        sMethod = request.getParameter("METHOD");
        sStkCode = request.getParameter("STKCODE");
        sCompCode = request.getParameter("COMPCODE");
        sConvUOM = request.getParameter("CONVUOM");
        sLocation = request.getParameter("LOCATION");
        DAL_StockTransfer LocStkBalList = new DAL_StockTransfer();
        
        //BLL_Common.Common_Object obj = LocStkBalList.DAL_GET_LOCATION_STK_BAL(new String[]{"GET_LOCATION_STK_BAL", sStkCode, sCompCode});
        BLL_Common.Common_Object obj = LocStkBalList.DAL_GET_LOCATION_STK_BAL(SiteName, new String[]{sMethod,sStkCode, sCompCode, sConvUOM, sLocation});
     
       // DAL_Stock obj_Po = new DAL_Stock();

       // BLL_Common.Common_Object rsPoQty = obj_Po.DAL_PO_AUTOALLOCATION(new String[]{
       //     "GET_PO_AUTOALLO", sStkCode, "", "", "", "", ""});

        //Execute all queries here
        try {

            json.put("rows", obj.getJSONArray(0));

            //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }

        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    public void CREATE_STOCK_TRANSFER(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
        //JSONParser parser = new JSONParser();
        //boolean return_bool = false;
        //String return_msg = "";

        String sMessage = "";
                
        String JsonCostQty = request.getParameter("XFERITEMS");
        String sCompCode = request.getParameter("COMPCODE");
        String sLocationCode = request.getParameter("LOCATION_FROM");
        String sProdCode = request.getParameter("PRODCODE");
        String sConvUOM = request.getParameter("CONVUOM");
        String sAvailQty = request.getParameter("AVAIL_QTY") ;
        String sControlDateTime = request.getParameter("CONTROL_DATETIME") ;
    //-------------------- 
        String sXferDocNo = "";
        JSONArray aryXferNo = null;
        DAL_PopulateData obj_No = new DAL_PopulateData();
        BLL_Common.Common_Object rsPoNo = obj_No.DAL_GetNumber(SiteName, new String[]{"GET_NUMBER","XFR",""});  
        aryXferNo = (JSONArray) JSONSerializer.toJSON(rsPoNo.getJSONArray(0).toString());
        JSONObject objXferNo = aryXferNo.getJSONObject(0);
                 
        sXferDocNo =  objXferNo.getString("NewNumber");
                
                 
        DAL_StockTransfer objXferHeader = new DAL_StockTransfer();
        String[] aryXferHeader = {
            "ADD_XFERHEADER" /*sMethod VARCHAR(30)*/,
            "0"/*2-sxfrd_stockxfrhdridx INTEGER*/,
            "0"/*3-sxfrd_stockxfrdtlidx INTEGER,*/,
            "0"/*4-sxfrd_lineno INTEGER*/,
            ""/*5-sxfrd_stockcode VARCHAR(16)*/,
            ""/*6-sxfrd_uomcode VARCHAR(6)*/,
            "0"/*7-sxfrd_uomidx INTEGER*/,
            "0"/*8-sxfrd_qty VARCHAR(30) */,
            ""/*9-sxfrd_issuelocation VARCHAR(10)*/,
            ""/*10-sxfrd_recievelocation VARCHAR(10)*/,
            ""/*11-sxfrd_status VARCHAR(4)*/,
            ""/*12-sxfrd_remarks VARCHAR(200)*/,
            "0"/*13-sxfrd_unitcost VARCHAR(30) */,
            "0"/*14-sxfrd_discamt VARCHAR(30) */,
            "0"/*15-sxfrd_subtotalamt VARCHAR(30) */,
            "0"/*16-sxfrd_discpercent NUMERIC(5,2)*/,
            ""/*17-sxfrd_discoption VARCHAR(1)*/,
            null/*18-sxfrd_expirydate DATETIME*/,
            ""/*19-sxfrd_batchno VARCHAR(10)*/,
            ""/*20-sxfrd_pono VARCHAR(30)*/,
            "0"/*21-sxfrd_poqty VARCHAR(30) */,
            "0"/*22-sxfrd_bonusqty VARCHAR(30) */,
            "0"/*23-sxfrd_pobonusqty VARCHAR(30) */,
            "0"/*24-sxfrd_polineno INTEGER*/,
            "0"/*25-sxfrd_poidx INTEGER*/,
            "0"/*26-sxfrd_convuomidx INTEGER*/,
            "0"/*27-sxfrd_convqty VARCHAR(30) */,
            "0"/*28-sxfrd_convunitcost VARCHAR(30) */,
            ""/*29-sxfrd_convuomcode VARCHAR(6)*/,
            "0"/*30-sxfrd_unitprice VARCHAR(30) */,
            ""/*31-sxfrd_gstpurcode VARCHAR(8)*/,
            "0"/*32-sxfrd_gsttaxrates VARCHAR(30) */,
            "0"/*33-sxfrd_gstamt VARCHAR(30) */,
            "0"/*34-sxfrd_grosstotal VARCHAR(30) */,
            "0"/*35-sxfrd_dispatchedqty VARCHAR(30) */,
            sCompCode /*36-sxfrh_company VARCHAR(10),*/,
            sXferDocNo/*37-sxfrh_docno VARCHAR(10),*/,
            ""/*38-sxfrh_docdate VARCHAR(30),*/,
            ""/*39-sxfrh_remark VARCHAR(100),*/,
            ""/*40-sxfrh_status VARCHAR(4),*/,
            "XFR"/*41-sxfrh_xfrtype VARCHAR(4),*/,
            (String) session.getAttribute("loginid") /*42-sBy varchar(10)*/,
            "1"/*43-sRecStatus varchar(4)*/,
             
             sControlDateTime/*42-sBy varchar(20)*/
//            ""/*44-Result varchar(30)*/,
//            ""/*45-Message varchar(30)*/,
//            "0"/*46-xfrh_stockxfrhdridx INTEGER*/,
//            "0"/*47-xfrd_stockxfrdtlidx INTEGER*/

            };


        BLL_Common.Common_Object obj = objXferHeader.DAL_ADDEDIT_STOCKTRANSFER(SiteName, aryXferHeader);
         
//--------------------      
         
//        String[] ary = {sProdCode, sCompCode, sLocationCode,sXferDocNo,sAvailQty,sConvUOM};
        String[] ary = {sProdCode, sCompCode, sLocationCode,sXferDocNo,sAvailQty,sConvUOM,sControlDateTime};
        boolean bReturn = false;
        try {
            if (obj.getObjectArray(0).toString().equals("00000")) {
                
                sMessage = obj.getObjectArray(2).toString();
                
                String[] aryXfrDtlIdxs = Xfer_Items(request, JsonCostQty,obj.getObjectArray(2).toString());
             
                String usedespatchfunction = (String) session.getAttribute("APP_USE_DESPATCH");
                if (usedespatchfunction.equals("Y"))
                {
                    UpdateTemporaryStockBalance(request, sConvUOM,JsonCostQty ); //update temporary stock balance
                    
                    obj.commit();
                    bReturn = true;
                    sMessage = obj.getObjectArray(1).toString();
                }
                else
                {
                
                    String JsonCostQtyWithXfrDtlIdx = "";
                    if (aryXfrDtlIdxs != null)
                    {
                        JSONArray XferItem_array = (JSONArray) JSONSerializer.toJSON(JsonCostQty);
                        if (XferItem_array.size() > 0) {
                            int z = 0;
                            for (Object js : XferItem_array) {
                                JSONObject XferItemjson = (JSONObject) js;
                                XferItemjson.put("XFERDTLIDX", aryXfrDtlIdxs[z]);
                                z=z+1;
                            }
                            JsonCostQtyWithXfrDtlIdx = XferItem_array.toString();
                        }
                    }
                
//                JSONArray aryProcessdCostQty =
//                BusinessLogic.Servlet_StockCostQty.UpdateStockCostQty(JsonCostQty, ary);
                //--- Codes to Skip Add to COST QTY + Stock LEDGER if DESPATCH FUNCTION IS NOT USED.
                
                    JSONArray aryProcessdCostQty =
                    BusinessLogic.Servlet_StockCostQty.UpdateStockCostQty(request, JsonCostQtyWithXfrDtlIdx, ary);
                    if (aryProcessdCostQty != null)
                    {
                        obj.commit();
                        bReturn = true;
                        sMessage = obj.getObjectArray(1).toString();
                    }
                    else
                    {
                        obj.rollback();
                    }

                    if (bReturn)
                    {
                        UpdateStockLedger(aryProcessdCostQty.toString(), ary, SiteName);
                    }
                }
                
            } else {
                // objPrice.rollback();
                //  objUom.rollback();
                obj.rollback();
            }
        } catch (Exception e) {
            try {
                obj.rollback();
            } catch (SQLException ex) {
                bReturn = false;
            }
        }                
        json.put("bool", bReturn);
        json.put("msg", sMessage);
        //json.put("CorpCode", sCorpCode);
        out.println(json);
    }
    public static String[] Xfer_Items(HttpServletRequest request, String JsonXferItem, String XferHdrIdx) throws IOException, SQLException {
    //public static boolean Xfer_Items(String JsonXferItem, String XferHdrIdx) throws IOException, SQLException {
        
        HttpSession session =  request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        boolean b = false;
        String sMethod = null;
        DAL_StockTransfer obj_Xfer = new DAL_StockTransfer();
        BLL_Common.Common_Object objXferItem = new BLL_Common.Common_Object();
        JSONArray XferItem_array = (JSONArray) JSONSerializer.toJSON(JsonXferItem);
        
        String[] aryXfrDtlIdxs = new String[XferItem_array.size()];
        
        int i=0;
        if (XferItem_array.size() > 0) {
            for (Object js : XferItem_array) {
                JSONObject XferItemjson = (JSONObject) js;
                sMethod = "ADD_XFERDETAIL";
//                
//                switch (XferItemjson.getString("FUNCTION")) {
//                    case "INSERT":
//                        sMethod = "ADD_PRDPRICE";
//                        break;
//                    case "UPDATE":
//                        sMethod = "UPDATE_PRDPRICE";
//                        break;
//                    case "DELETE":
//                        sMethod = "DEL_PRDPRICE";
//                        break;
//                    case "NO":
//                        break;
//                }

                if (sMethod != null) {
                    i=i+1;
                    String[] aryItm = {
                        sMethod /*sMethod VARCHAR(30)*/,
                        
                        XferHdrIdx/*2-sxfrd_stockxfrhdridx INTEGER*/,
                        "0"/*3-sxfrd_stockxfrdtlidx INTEGER,*/,
                        String.valueOf(i)/*4-sxfrd_lineno INTEGER*/,
                        XferItemjson.get("PRODCODE").toString().toUpperCase() /*5-sxfrd_stockcode VARCHAR(16)*/,
                        XferItemjson.get("UOM_FROM").toString().toUpperCase()/*6-sxfrd_uomcode VARCHAR(6)*/,
                        "0"/*7-sxfrd_uomidx INTEGER*/,
                        XferItemjson.get("XFER_QTY").toString().toUpperCase()/*8-sxfrd_qty VARCHAR(30) */,
                        XferItemjson.get("LOCATION_FROM").toString().toUpperCase()/*9-sxfrd_issuelocation VARCHAR(10)*/,
                        XferItemjson.get("LOCATION_TO").toString().toUpperCase()/*10-sxfrd_recievelocation VARCHAR(10)*/,
                        ""/*11-sxfrd_status VARCHAR(4)*/,
                        ""/*12-sxfrd_remarks VARCHAR(200)*/,
                        "0"/*13-sxfrd_unitcost VARCHAR(30) */,
                        "0"/*14-sxfrd_discamt VARCHAR(30) */,
                        "0"/*15-sxfrd_subtotalamt VARCHAR(30) */,
                        "0"/*16-sxfrd_discpercent NUMERIC(5,2)*/,
                        ""/*17-sxfrd_discoption VARCHAR(1)*/,
                        null/*18-sxfrd_expirydate DATETIME*/,
                        ""/*19-sxfrd_batchno VARCHAR(10)*/,
                        ""/*20-sxfrd_pono VARCHAR(30)*/,
                        "0"/*21-sxfrd_poqty VARCHAR(30) */,
                        "0"/*22-sxfrd_bonusqty VARCHAR(30) */,
                        "0"/*23-sxfrd_pobonusqty VARCHAR(30) */,
                        "0"/*24-sxfrd_polineno INTEGER*/,
                        "0"/*25-sxfrd_poidx INTEGER*/,
                        "0"/*26-sxfrd_convuomidx INTEGER*/,
                        XferItemjson.get("XFER_QTY").toString().toUpperCase()/*27-sxfrd_convqty VARCHAR(30) */,
                        "0"/*28-sxfrd_convunitcost VARCHAR(30) */,
                        XferItemjson.get("UOM_FROM").toString().toUpperCase()/*29-sxfrd_convuomcode VARCHAR(6)*/,
                        "0"/*30-sxfrd_unitprice VARCHAR(30) */,
                        ""/*31-sxfrd_gstpurcode VARCHAR(8)*/,
                        "0"/*32-sxfrd_gsttaxrates VARCHAR(30) */,
                        "0"/*33-sxfrd_gstamt VARCHAR(30) */,
                        "0"/*34-sxfrd_grosstotal VARCHAR(30) */,
                        "0"/*35-sxfrd_dispatchedqty VARCHAR(30) */,
                        "" /*36-sxfrh_company VARCHAR(10),*/,
                        ""/*37-sxfrh_docno VARCHAR(10),*/,
                        ""/*38-sxfrh_docdate VARCHAR(30),*/,
                        ""/*39-sxfrh_remark VARCHAR(100),*/,
                        ""/*40-sxfrh_status VARCHAR(4),*/,
                        ""/*41-sxfrh_xfrtype VARCHAR(4),*/,
                        (String) session.getAttribute("loginid")/*42-sBy varchar(10)*/,
                        "1"/*43-sRecStatus varchar(4)*/,
                      
                      XferItemjson.get("CONTROL_DATETIME").toString()/*44-sBy varchar(20)*/
                        };
                    objXferItem = obj_Xfer.DAL_ADDEDIT_STOCKTRANSFER(SiteName, aryItm);
                    // System.out.println();
                    if (objXferItem.getObjectArray(0).toString().equals("00000")) {
                        sMethod = null;
                        objXferItem.commit();
                        b = objXferItem.getObjectArray(0).toString().equals("00000");
                        aryXfrDtlIdxs[i-1] = objXferItem.getObjectArray(3).toString();
                        //XferItemjson.put("XFRHDRIDX", objXferItem.getObjectArray(3).toString());
                    } else {
                        sMethod = null;
                        objXferItem.rollback();
                    }
                }
            }
        }
        if (b)
        {
            return aryXfrDtlIdxs;
        }
        else
        {
            return null;
        }
        //return b;//objXferItem.getObjectArray(0).toString().equals("00000");
    }
    
     public static boolean UpdateStockLedger(String JsonCostQty, String[] sIn, String SiteName) throws IOException, SQLException {
                 
        boolean b = false;
        String sMethod = null;
        
        String sStkCode = sIn[0];
        String sCompCode = sIn[1];            
        String sLocation = sIn[2];
        String sXfrNo = sIn[3];
        String sControlDateTime = sIn[6];        
        Date dt =  new Date();
         
        SimpleDateFormat ft = 
            new SimpleDateFormat ("yyyy-MM-dd hh:mm:ss");
        String sDt = ft.format(dt);
        String sLegderHdrIdx = "";
        
        int year = Calendar.getInstance().get(Calendar.YEAR);
        int mth = Calendar.getInstance().get(Calendar.MONTH);
        
        JSONArray XferItem_array = (JSONArray) JSONSerializer.toJSON(JsonCostQty);
        int i=0;
        JSONObject jsNew = null;
        if (XferItem_array.size() > 0) {
                        
            //Create header
            jsNew = new JSONObject();                             
            jsNew.put("HEADER_DETAIL", "HEADER");
            
            jsNew.put("FUNCTION","INSERT");
            jsNew.put("StockLedgerHdrIdx",0);
            jsNew.put("StockLedgerDtlIdx",0);
            jsNew.put("sldg_company",sCompCode);
            jsNew.put("sldg_location",sLocation);
            jsNew.put("sldg_finyear",year);
            jsNew.put("sldg_finperiod",mth);
            jsNew.put("sldg_reasoncode","XFR");
            jsNew.put("sldg_trxtype","XFR");
            jsNew.put("sldg_suppliercode","");
            jsNew.put("sldg_intercompanysupplier","");
            jsNew.put("sldg_docno",sXfrNo);
            jsNew.put("sldg_docdate",sDt);
            jsNew.put("sldg_refno","");
            jsNew.put("sldg_refdate","");
            jsNew.put("sldg_invno","");
            jsNew.put("sldg_invdate","");
            jsNew.put("sldg_dono","");
            jsNew.put("sldg_dodate","");
            jsNew.put("sldg_remark","");
            jsNew.put("sldg_isgstinclusive","");
            jsNew.put("sldl_lineno",0);
            jsNew.put("sldl_stockidx",0);
            jsNew.put("sldl_stockcode","");
            jsNew.put("sldl_uomcode","");
            jsNew.put("sldl_uomidx",0);
            jsNew.put("sldl_unitcost",0);
            jsNew.put("sldl_qty",0);
            jsNew.put("sldl_discamt",0);
            jsNew.put("sldl_subtotalamt",0);
            jsNew.put("sldl_discpercent",0);
            jsNew.put("sldl_discoption",0);
            jsNew.put("sldl_expirydate","");
            jsNew.put("sldl_batchno","");
            jsNew.put("sldl_pono","");
            jsNew.put("sldl_location","");
            jsNew.put("sldl_poqty",0);
            jsNew.put("sldl_bonusqty",0);
            jsNew.put("sldl_pobonusqty",0);
            jsNew.put("sldl_polineno",0);
            jsNew.put("sldl_poidx",0);
            jsNew.put("sldl_convuomidx",0);
            jsNew.put("sldl_convqty",0);
            jsNew.put("sldl_convunitcost",0);
            jsNew.put("sldl_convuomcode",0);
            jsNew.put("sldl_unitprice",0);
            jsNew.put("sldl_gstpurcode","");
            jsNew.put("sldl_gsttaxrates",0);
            jsNew.put("sldl_gstamt",0);
            jsNew.put("sldl_grosstotal",0);
            jsNew.put("systemname","PORTAL");
            jsNew.put("By","");
            jsNew.put("recstatus","1");    
jsNew.put("CONTROL_DATETIME",sControlDateTime);            
 
            BLL_Common.Common_Object objLedgerHdr = BusinessLogic.Servlet_StockLedger.UPDATE_STOCK_LEDGER(SiteName, jsNew);             
            if (objLedgerHdr.getObjectArray(0).toString().equals("00000")) {
               
                sLegderHdrIdx = objLedgerHdr.getObjectArray(2).toString();
                objLedgerHdr.commit();
            } else {
                objLedgerHdr.rollback();
                return false;
            }       
            
            for (Object js : XferItem_array) {
                JSONObject XferItemjson = (JSONObject) js;
                
                if (XferItemjson.get("scq_locationcode").toString().toUpperCase()
                        != sLocation.toUpperCase())
                {    
                    //Create detail - Recive End (+qty)
                    jsNew = new JSONObject();                             
                    jsNew.put("HEADER_DETAIL", "DETAIL");

                    jsNew.put("FUNCTION","INSERT");
                    jsNew.put("StockLedgerHdrIdx",sLegderHdrIdx);
                    jsNew.put("StockLedgerDtlIdx",0);
                    jsNew.put("sldg_company",sCompCode);
                    jsNew.put("sldg_location",XferItemjson.get("scq_locationcode").toString().toUpperCase());
                    jsNew.put("sldg_finyear",year);
                    jsNew.put("sldg_finperiod",mth);
                    jsNew.put("sldg_reasoncode","XFR");
                    jsNew.put("sldg_trxtype","XFR"); 
                    String dQty = XferItemjson.get("scq_qty").toString();
                    double dRevQty = Double.parseDouble(dQty) * -1;
                    jsNew.put("sldl_qty",XferItemjson.get("scq_qty").toString().toUpperCase());                                
                    jsNew.put("sldg_suppliercode","");
                    jsNew.put("sldg_intercompanysupplier","");
                    jsNew.put("sldg_docno",sXfrNo);
                    jsNew.put("sldg_docdate",sDt);
                    jsNew.put("sldg_refno","");
                    jsNew.put("sldg_refdate","");
                    jsNew.put("sldg_invno","");
                    jsNew.put("sldg_invdate","");
                    jsNew.put("sldg_dono","");
                    jsNew.put("sldg_dodate","");
                    jsNew.put("sldg_remark","");
                    jsNew.put("sldg_isgstinclusive","");
                    jsNew.put("sldl_lineno",0);
                    jsNew.put("sldl_stockidx",0);
                    jsNew.put("sldl_stockcode",XferItemjson.get("scq_stockcode").toString().toUpperCase());
                    jsNew.put("sldl_uomcode",XferItemjson.get("scq_uomcode").toString().toUpperCase());
                    jsNew.put("sldl_uomidx",0);
                    jsNew.put("sldl_unitcost",XferItemjson.get("scq_unitcost").toString().toUpperCase());                
                    jsNew.put("sldl_discamt",0);
                    jsNew.put("sldl_subtotalamt",0);
                    jsNew.put("sldl_discpercent",0);
                    jsNew.put("sldl_discoption",0);
                    if (XferItemjson.get("scq_expirydate") != null)
                        jsNew.put("sldl_expirydate",XferItemjson.get("scq_expirydate").toString());
                    else
                        jsNew.put("sldl_expirydate","");
                    jsNew.put("sldl_batchno",XferItemjson.get("scq_batchno").toString().toUpperCase());
                    jsNew.put("sldl_pono","");
                    jsNew.put("sldl_location",XferItemjson.get("scq_locationcode").toString().toUpperCase());
                    jsNew.put("sldl_poqty",0);
                    jsNew.put("sldl_bonusqty",0);
                    jsNew.put("sldl_pobonusqty",0);
                    jsNew.put("sldl_polineno",0);
                    jsNew.put("sldl_poidx",0);
                    jsNew.put("sldl_convuomidx",0);
                    jsNew.put("sldl_convqty",XferItemjson.get("scq_qty").toString().toUpperCase());
                    jsNew.put("sldl_convunitcost",XferItemjson.get("scq_unitcost").toString().toUpperCase());
                    jsNew.put("sldl_convuomcode",XferItemjson.get("scq_uomcode").toString().toUpperCase());
                    jsNew.put("sldl_unitprice",0);
                    jsNew.put("sldl_gstpurcode","");
                    jsNew.put("sldl_gsttaxrates",0);
                    jsNew.put("sldl_gstamt",0); //not included, if needed pls recalculate base on qty transferred
                    jsNew.put("sldl_grosstotal",0);
                    jsNew.put("systemname","PORTAL");
                    jsNew.put("By","");
                    jsNew.put("recstatus","1");    
jsNew.put("CONTROL_DATETIME",sControlDateTime);  

                    BLL_Common.Common_Object objLedgerDtl = BusinessLogic.Servlet_StockLedger.UPDATE_STOCK_LEDGER(SiteName, jsNew);             
                    if (objLedgerDtl.getObjectArray(0).toString().equals("00000")) {
                            sMethod = null;
                            objLedgerDtl.commit();
                            b = objLedgerDtl.getObjectArray(0).toString().equals("00000");
                            jsNew.put("sldl_location",sLocation);
                            jsNew.put("sldl_qty",dRevQty); 
                            jsNew.put("sldl_convqty",dRevQty);
                            BLL_Common.Common_Object objLedgerDtlRev = BusinessLogic.Servlet_StockLedger.UPDATE_STOCK_LEDGER(SiteName, jsNew);             
                            if (objLedgerDtlRev.getObjectArray(0).toString().equals("00000"))
                            {
                                objLedgerDtlRev.commit();
                            }
                            else
                            {
                                objLedgerDtlRev.rollback();
                            } 
                    }
                    else {
                            sMethod = null;
                            objLedgerDtl.rollback();
                        }
                }
                
            }
        }

        return b;//objXferItem.getObjectArray(0).toString().equals("00000");
    }
  
    public static boolean UpdateTemporaryStockBalance(HttpServletRequest request,String sConvUOM, String JsonXferItem ) throws ServletException, IOException, SQLException //update temporary stock balance
    {
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName"); 
         
        boolean b = false;
        JSONArray aryXferItem = (JSONArray) JSONSerializer.toJSON(JsonXferItem);
         
        if (aryXferItem.size() > 0) 
        {
            for (Object js : aryXferItem) 
            {
                
                JSONObject XferItemJs = (JSONObject) js;
                String sComp = XferItemJs.get("COMPCODE").toString();
                double dXfrQty = Double.parseDouble(XferItemJs.get("XFER_QTY").toString());
                String sUOMFrom = XferItemJs.get("UOM_FROM").toString();
                String sUOMTo = XferItemJs.get("UOM_TO").toString();
                String sLocationFrom = XferItemJs.get("LOCATION_FROM").toString();
                String sLocationTo = XferItemJs.get("LOCATION_TO").toString();
                String sStkCode = XferItemJs.getString("PRODCODE").toString();
                
                JSONObject jsUpdStkBal = new JSONObject();  
                jsUpdStkBal.put("FUNCTION", "UPDATE_TEMPORARY_STOCK_BALANCE");
                jsUpdStkBal.put("bal_companycode", sComp);
                jsUpdStkBal.put("bal_location", sLocationTo);
                jsUpdStkBal.put("bal_stockcode", sStkCode);                                                
                jsUpdStkBal.put("bal_uom", sConvUOM);                                
                jsUpdStkBal.put("UpdateQty", dXfrQty);    
                jsUpdStkBal.put("BY", (String) session.getAttribute("loginid"));
                jsUpdStkBal.put("recstatus", "1");
                b = BusinessLogic.Servlet_Stock.UPDATE_STOCK_BALANCE(jsUpdStkBal, SiteName);
                
                if (b)
                {                
                    JSONObject jsUpdStkBalDeduct = new JSONObject();  
                    jsUpdStkBalDeduct.put("FUNCTION", "UPDATE_TEMPORARY_STOCK_BALANCE");
                    jsUpdStkBalDeduct.put("bal_companycode", sComp);
                    jsUpdStkBalDeduct.put("bal_location", sLocationFrom);
                    jsUpdStkBalDeduct.put("bal_stockcode", sStkCode);                                                
                    jsUpdStkBalDeduct.put("bal_uom", sConvUOM);                                
                    jsUpdStkBalDeduct.put("UpdateQty", dXfrQty * -1);    
                    jsUpdStkBalDeduct.put("BY", (String) session.getAttribute("loginid"));
                    jsUpdStkBalDeduct.put("recstatus", "1");
                    BusinessLogic.Servlet_Stock.UPDATE_STOCK_BALANCE(jsUpdStkBalDeduct, SiteName);
                }
                                
            }
        }         
        return b;
     }
     
    public void Get_Stock_Transfer(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        String sCompCode = "";
        String sStkCode = "";
        String sMethod = ""; 
        String sConvUOM = "";
        
        
        String sLocation = "";
        String sStkGroup = "";
        String sStkType = ""; 
        String sStkConsumable = "";
        
        String sDateFrom = "";
        String sDateTo = "";

        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        sMethod = request.getParameter("METHOD");
        sStkCode = request.getParameter("STKCODE");
        sCompCode = request.getParameter("COMPCODE");
        sConvUOM = request.getParameter("CONVUOM");
        
        sLocation = request.getParameter("LOCATION");
        sStkGroup = request.getParameter("STKGROUP");
        sStkType = request.getParameter("STKTYPE");
        sStkConsumable = request.getParameter("STKCONSUMABLE");
        
        sDateFrom = request.getParameter("DATEFROM");
        sDateTo = request.getParameter("DATETO");
        
        
        
        DAL_StockTransfer LocStkBalList = new DAL_StockTransfer();
        
        
        //BLL_Common.Common_Object obj = LocStkBalList.DAL_GET_STOCK_TRANSFER_ALLOCATION(new String[]{sMethod, sStkCode, sCompCode, sConvUOM});
        BLL_Common.Common_Object obj = LocStkBalList.DAL_GET_STOCK_TRANSFER(SiteName, new String[]{sMethod, sStkCode, "", sCompCode, sConvUOM
        ,sLocation,sStkGroup,sStkType,sStkConsumable,sDateFrom,sDateTo, "","",""});
        
        //Execute all queries here
        try {

            json.put("rows", obj.getJSONArray(0));

            //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }

        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    
     public void Get_Undispatached_StockList(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
         
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        //Get page and rows value from JSP page
        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));

        String sCompCode = "";
        String sStkCode = request.getParameter("STKCODE");
        String sStkDesc = request.getParameter("STKDESC");
        String sMethod = ""; 
        String sConvUOM = "";
        
        
        String sLocation = "";
        String sStkGroup = "";
        String sStkType = ""; 
        String sStkConsumable = "";
        
        String sDateFrom = "";
        String sDateTo = "";
       
        sMethod = ""; //request.getParameter("METHOD");

        if (sStkCode == null)
        {
            sStkCode = "";
        }
        if (!sStkCode.equals("") && sStkCode != null)
        {
            String[] sStkCodeArray = sStkCode.split(",");
            sStkCode = "";
            for (int i = 0; i < sStkCodeArray.length; i++) {
                if (i>0)
                {
                    sStkCode = "," +  sStkCode ; 
                }
                 sStkCode = sStkCode + '"' + sStkCodeArray[i].toString() + '"';
                 
            }           
        }
        
        sCompCode = request.getParameter("COMPCODE"); 
        if (sCompCode == null)
        {
            sCompCode = "";
        }
        if (!sCompCode.equals("") && sCompCode != null)        
        {
            String[] sStkCodeArray = sCompCode.split(",");
            sCompCode = "";
            for (int i = 0; i < sStkCodeArray.length; i++) {
                if (i>0)
                {
                    sCompCode = "," +  sCompCode ; 
                }
                 sCompCode = sCompCode + '"' + sStkCodeArray[i].toString() + '"';
                 
            }           
        }
        
        sConvUOM = request.getParameter("CONVUOM");
        if (sConvUOM == null)
        {
            sConvUOM = "";
        }
        sLocation = request.getParameter("LOCATION");
        if (sLocation == null)
        {
            sLocation = "";
        }
        if (!sLocation.equals("") && sLocation != null)       
        {
            String[] sStkCodeArray = sLocation.split(",");
            sLocation = "";
            for (int i = 0; i < sStkCodeArray.length; i++) {
                if (i>0)
                {
                    sLocation = "," +  sLocation ; 
                }
                 sLocation = sLocation + '"' + sStkCodeArray[i].toString() + '"';
                 
            }           
        }
        
        sStkGroup = request.getParameter("STKGROUP");  
        if (sStkGroup == null)
        {
            sStkGroup = "";
        }
        if (!sStkGroup.equals("") && sStkGroup != null)
        {
            String[] sStkCodeArray = sStkGroup.split(",");
            sStkGroup = "";
            for (int i = 0; i < sStkCodeArray.length; i++) {
                if (i>0)
                {
                    sStkGroup = "," +  sStkGroup ; 
                }
                 sStkGroup = sStkGroup + '"' + sStkCodeArray[i].toString() + '"';
                 
            }           
        }
        
        sStkType = request.getParameter("STKTYPE");  
        if (sStkType == null)
        {
            sStkType = "";
        }
        if (!sStkType.equals("") && sStkType != null)        
        {
            String[] sStkCodeArray = sStkType.split(",");
            sStkType = "";
            for (int i = 0; i < sStkCodeArray.length; i++) {
                if (i>0)
                {
                    sStkType = "," +  sStkType ; 
                }
                 sStkType = sStkType + '"' + sStkCodeArray[i].toString() + '"';
                 
            }           
        }
        
       
        sStkConsumable = request.getParameter("STKCONSUMABLE"); 
        if (sStkConsumable == null)
        {
            sStkConsumable = "";
        }
        if (!sStkConsumable.equals("") && sStkConsumable != null)         
        {
            String[] sStkCodeArray = sStkConsumable.split(",");
            sStkConsumable = "";
            for (int i = 0; i < sStkCodeArray.length; i++) {
                if (i>0)
                {
                    sStkConsumable = "," +  sStkConsumable ; 
                }
                 sStkConsumable = sStkConsumable + '"' + sStkCodeArray[i].toString() + '"';
                 
            }           
        }
        
        sDateFrom = request.getParameter("DATEFROM");
        if (sDateFrom == null)
        {
            sDateFrom = "";
        }
        sDateTo = request.getParameter("DATETO");
        if (sDateTo == null)
        {
            sDateTo = "";
        }
        
        if (sDateFrom == "" || sDateTo == "")
        {
            sDateFrom = "";
            sDateTo = "";
        }
        
        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }
        
        DAL_StockTransfer LocStkBalList = new DAL_StockTransfer();
        
        int total = 0;
        double pageval = 0;
        sMethod = "GET_UNDISPATCHED_STOCK";
       BLL_Common.Common_Object ItemList = LocStkBalList.DAL_GET_STOCK_TRANSFER(SiteName, new String[]{sMethod, sStkCode, sStkDesc, sCompCode, sConvUOM
        ,sLocation,sStkGroup,sStkType,sStkConsumable,sDateFrom, sDateTo, sOrder, Integer.toString(page), Integer.toString(rows)});
    
       sMethod = "COUNT_UNDISPATCHED_STOCK";
       BLL_Common.Common_Object ItemTotalRow = LocStkBalList.DAL_GET_STOCK_TRANSFER(SiteName, new String[]{sMethod, sStkCode, sStkDesc, sCompCode, sConvUOM
        ,sLocation,sStkGroup,sStkType,sStkConsumable,sDateFrom, sDateTo,"", "", ""});
      
        //Execute all queries here
        try {

            total = ItemTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");
            //total = ItemList.getJSONArray(0).size();

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", ItemList.getJSONArray(0));

        //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }
        
        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    
     
    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
     protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // processRequest(request, response);
        String p_method = null;
        p_method = request.getParameter("SFC");

        if (p_method.equals("GET_LOCATION_STK_BAL")) {
            try {
                GET_LOCATION_STK_BAL(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }
        if (p_method.equals("GET_STOCK_TRANSFER")) {
            try {
                Get_Stock_Transfer(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }
        if (p_method.equals("GET_UNDISPATCHED_STOCK_LIST")) {
            try {
                Get_Undispatached_StockList(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }

    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // processRequest(request, response);
        String p_method = null;
        p_method = request.getParameter("SFC");

        if (p_method.equals("COMPANY_STOCK_BAL")) {
            try {
                Bind_Company_StockBalance_List(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        }
        else if (p_method.equals("GET_LOCATION_STK_BAL")) {
            try {
                GET_LOCATION_STK_BAL(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        }
        else if (p_method.equals("CREATE_STOCK_TRANSFER")) {
            try {
                CREATE_STOCK_TRANSFER(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } else if (p_method.equals("GET_STOCK_TRANSFER")) {
            try {
                Get_Stock_Transfer(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } else if (p_method.equals("GET_UNDISPATCHED_STOCK_LIST")) {
            try {
                Get_Undispatached_StockList(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } 
        
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
