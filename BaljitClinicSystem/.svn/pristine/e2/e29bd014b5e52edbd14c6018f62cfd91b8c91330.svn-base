package BusinessLogic;

import static BusinessData.BaseDAL.Object_BLL_Common;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import BusinessData.DAL_GRN;
import java.sql.SQLException;
import net.sf.json.JSONSerializer;
import BusinessData.DAL_StockCostQty;
import BusinessData.DAL_StockLedger;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
//import java.util.concurrent.ExecutorService;
//import java.util.concurrent.Executors;
import javax.servlet.http.HttpSession;
/**
 *
 * @author N0535
 */
@WebServlet(name = "Servlet_GRN", urlPatterns = {"/Servlet_GRN"})
public class Servlet_GRN extends HttpServlet {

    public void BIND_GRN_LIST(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        String sGRN = "";
        String sGRNDateFrom = "";
        String sGRNDateTo = "";
        String sMethod;
        String sMethodCount;
        String sortName = null;
        String sortOrder = null;   
        String Comp = ""; //LLT Modified 2016-05-24 user auth control

        //JSON object
        JSONObject json = new JSONObject();
        int page = 1;
        int rows = 10;
        //Get page and rows value from JSP page
              
        sGRN = request.getParameter("GRNNUM");        
        
        if(request.getParameter("METHOD").equals("HEADER")){
            sMethod = "GET_GRN_LIST";
            sMethodCount = "COUNT_GRN_LIST";
            page = Integer.parseInt(request.getParameter("page"));
            rows = Integer.parseInt(request.getParameter("rows"));  
            sortName = request.getParameter("sidx");
            sortOrder = request.getParameter("sord");
            sGRNDateFrom = request.getParameter("GRNDATEFR");
            sGRNDateTo = request.getParameter("GRNDATETO");
            Comp = request.getParameter("COMP"); //LLT Modified 2016-05-24 user auth control
        }else{
            sMethod = "GET_GRN_DETAIL";
            sMethodCount = "COUNT_GRN_DETAIL";
        }
        
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }

        //Calculate offset value
        //int offset = (page - 1) * rows;
        DAL_GRN DAL_GRN = new DAL_GRN();

        int total = 0;
        double pageval = 0;

        BLL_Common.Common_Object GRNList = DAL_GRN.DAL_GET_GRNLIST(SiteName, new String[]{
            sMethod, sGRN, sGRNDateFrom, sGRNDateTo, Comp, sOrder, Integer.toString(page), Integer.toString(rows)}); //LLT modified 2016-05-24

        BLL_Common.Common_Object GRNTotalRow = DAL_GRN.DAL_GET_GRNLIST(SiteName, new String[]{
            sMethodCount, sGRN, sGRNDateFrom, sGRNDateTo, Comp, "", "", ""}); //LLT modified 2016-05-24

        //Execute all queries here
        try {

            total = GRNTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", GRNList.getJSONArray(0));

            //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }

        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    
    //View GRN Header - Amira
    public void BIND_GRN_DETAIL(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
    
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        PrintWriter out = response.getWriter();
        response.setContentType("text/json");
        
        //JSON object
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
        
        try {   
            String sGRN = request.getParameter("GRNNUM");
            DAL_GRN DAL_GRN = new DAL_GRN();
            
            BLL_Common.Common_Object GRNHdr = DAL_GRN.DAL_GET_GRNLIST(SiteName, new String[]{
            "GET_GRN_LIST", sGRN, "", "", "", "1", "20"});
            
            json.put("row", GRNHdr.getJSONArray(0));
            out.print(GRNHdr.getJSONArrayAsJSONObject("object"));
            
        } catch (Exception e) {
            out.println("Exception Error.");
            e.printStackTrace();
        } finally {
           // BLL_Common.closeResultSet(rs,"");
        } 
        //out.println(json);
    }
    
    //Insert GRN Header - LLT
    protected void INSERT_GRN(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject jsonReturn = new net.sf.json.JSONObject();
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
      //  try {
            String sMessage = "";
            String sIDx = "";
            String sGRNNo = "";
            DAL_GRN obj_GRN = new DAL_GRN();
            JSONArray jsonGRNMaster = JSONArray.fromObject(request.getParameter("GRNMASTER"));

            String sGRNDetail = request.getParameter("GRNDETAIL");
            String sGRNMethod;
            boolean bReturn = false;   
            boolean bLine = false;
            
            if (request.getParameter("GRNMETHOD").equals("ADD")){
                sGRNMethod = "ADD_GRNHEADER";
            }else{
                sGRNMethod = "UPD_GRNHEADER";
            }

            String[] aryGRN = {
                sGRNMethod            /*0. pMethod    varchar(30)  "ADD_GRNHEADER"*/,
                ""                    /*1. sGRNIDX    varchar(10)*/,
                ""                    /*2. sGRNCompany    varchar(10)*/,
                ""                    /*3. sGRNLocation   varchar(10)*/,
                ""                    /*4. sGRNSuppCode   varchar(10)*/,
                ""                    /*5. sGRNDate       varchar(10)*/,
                ""                    /*6. sGRNRefNo      varchar(30)*/,
                null                  /*7. sGRNRefDate    varchar(10)*/,
                ""                    /*8. sGRNInvNo      varchar(30)*/,
                ""                    /*9. sGRNInvDate    varchar(10)*/,
                ""                    /*10. sGRNDONo      varchar(30)*/,
                ""                    /*11. sGRNDODate    varchar(10)*/,
                ""                    /*12. sGRNRemark    varchar(100)*/,
                "N"                   /*13. sGRNGSTInc    varchar(1)*/,
                "1"                   /*14. sGRNrecstatus       varchar(4)*/,
                ""                    /*15. sGRNLine            varchar(10)*/,
                ""                    /*16. sStockCode          varchar(30)*/,
                ""                    /*17. sUOMCode            varchar(6)*/,
                "0"                   /*18. sUnitCost           varchar(15)*/,
                "0"                   /*19. sQty                varchar(15)*/,
                "0"                   /*20. sDiscAmt            varchar(15)*/,
                "0"                   /*21. sSubTotal           varchar(15)*/,
                "0"                   /*22. sDiscPercent        varchar(15)*/,
                "0"                   /*23. sDiscOpt            varchar(1)*/,
                ""                    /*24. sExpiryDate         varchar(10)*/,
                ""                    /*25. sBatchNo            varchar(10)*/,
                ""                    /*26. sPONo               varchar(30)*/,
                "0"                   /*27. sPOQty              varchar(15)*/,
                "0"                   /*28. sBonusQty           varchar(15)*/,
                "0"                   /*29. sPOBonusQty         varchar(15)*/,
                ""                    /*30. sPOLine             varchar(15)*/,
                ""                    /*31. sGSTPurCode         varchar(8)*/,
                "0"                   /*32. sGSTTaxRates        varchar(15)*/,
                "0"                   /*33. sGSTAmt             varchar(15)*/,
                "0"                   /*34. sGrossTotal         varchar(15)*/,
                (String) session.getAttribute("loginid")        /*35. sBy                 varchar(10)*/,
                "N"                   /*36. sInSupplier         varchar(10)*/,
                ""                    /*37. sInGSTSupCode       varchar(8)*/,
                ""                    /*38. sInLocation         varchar(10)*/,
                "0"                   /*39. GRNDIDX         varchar(10)*/,
                ""                    /*40. sConvQty         varchar(20)*/,
                ""                    /*41. sConvUnitCost    varchar(20)*/,
                ""                    /*42. sConvUom         varchar(6)*/,
                ""                    /*43. ControlDateTime     varchar(20)*/};
            
            int length = jsonGRNMaster.size();
            for (int x = 0; x < length; x++) {
                JSONObject jsonObject = jsonGRNMaster.getJSONObject(x);
                String tempValue = jsonObject.getString("value");

                if (jsonObject.getString("name").equals("ddlCompany")) {
                    aryGRN[2] = tempValue.toUpperCase();
                }else if (jsonObject.getString("name").equals("ddlSupplier")) {
                    aryGRN[4] = tempValue.toUpperCase();
                }else if (jsonObject.getString("name").equals("txtGRNDate")) {
                    aryGRN[5] = tempValue.toUpperCase();
                }else if (jsonObject.getString("name").equals("txtInvNo")) {
                    aryGRN[8] = tempValue.toUpperCase();
                }else if (jsonObject.getString("name").equals("txtInvDate")) {
                    aryGRN[9] = tempValue.toUpperCase();
                }else if (jsonObject.getString("name").equals("txtDONo")) {
                    aryGRN[10] = tempValue.toUpperCase();
                }else if (jsonObject.getString("name").equals("txtDODate")) {
                    aryGRN[11] = tempValue.toUpperCase();
                }else if (jsonObject.getString("name").equals("txtRemarks")) {
                    aryGRN[12] = tempValue.toUpperCase();
                }else if (jsonObject.getString("name").equals("chkGSTIncGRN")) {
                    if(tempValue.toUpperCase().equals("Y")){
                        aryGRN[13] = tempValue.toUpperCase();}
                }else if (jsonObject.getString("name").equals("chkGenInv")) {
                    if(tempValue.toUpperCase().equals("Y")){
                        aryGRN[36] = tempValue.toUpperCase();}
                }else if (jsonObject.getString("name").equals("ddlInLocation")) {
                    aryGRN[38] = tempValue.toUpperCase();
                }else if (jsonObject.getString("name").equals("ControlDateTime")) {
                    aryGRN[43] = tempValue.toUpperCase();
                }else if(jsonObject.getString("name").equals("hidGRNID")){
                    if(sGRNMethod.equals("UPD_GRNHEADER")){
                        aryGRN[1] = tempValue.toUpperCase();
                    }
                }
            }

            BLL_Common.Common_Object obj = obj_GRN.DAL_ADDEDIT_GRN(SiteName, aryGRN);

            try {
                if (obj.getObjectArray(0).toString().equals("00000")) {
      
                    bLine = TRX_GRN_Detail(SiteName, sGRNDetail, obj.getObjectArray(2).toString(),(String) session.getAttribute("loginid"));
                    bReturn = true;                   
                    sMessage = obj.getObjectArray(1).toString();
                    if(!bLine){
                        sMessage = obj.getObjectArray(1).toString() + "<br>Some lines failed to insert.";
                    }
                    sIDx = obj.getObjectArray(2).toString();
                    sGRNNo = obj.getObjectArray(3).toString();
                } else {
                    sMessage = "Error : " + obj.getObjectArray(0).toString();
                    obj.rollback();
                }
            } catch (Exception e) {
                try {
                        sMessage = obj.getJSONArray(0).getJSONObject(0).getString("@sError");
                    } catch (Exception ex) {
                        sMessage = ex.toString();
                    }finally{
                    obj.rollback();
    
                }
            }

         jsonReturn.put("bool", bReturn);
         jsonReturn.put("msg", sMessage);
         jsonReturn.put("idx", sIDx);
         jsonReturn.put("grnno", sGRNNo);
         out.println(jsonReturn);
         
  
    }
    //End Insert GRN Header

    //Insert GRN Detail - LLT
    public static boolean TRX_GRN_Detail(String SiteName, String JsonString, String IdxKey, String sBy) throws IOException, SQLException {
        
        boolean b = true;
        DAL_GRN obj_GRN = new DAL_GRN();
        BLL_Common.Common_Object objGRNDetail = new BLL_Common.Common_Object();
        JSONArray jsonGRNArr = (JSONArray) JSONSerializer.toJSON(JsonString);
        
        //JSONArray jsonGRNArr = jsonFilter.names();
        int iLineNo = 1;
        String sDisP;
        String sDisA;
        String sMethod;

        if (jsonGRNArr.size() > 0) {
            //JSONArray innerArray = jsonFilter.getJSONArray((String) jsonGRNArr.get(i));
            for (Object js : jsonGRNArr) {
                
                JSONObject json = (JSONObject) js;
                
                if(json.get("DISC_TYPE").toString().trim().equals("A")){
                    sDisP = "0";
                    sDisA = json.get("DISC").toString().trim();
                }else{
                    sDisA = "0";
                    sDisP = json.get("DISC").toString().trim();
                }
                String sConvQty = "0";
                String sConvUnitCost = "0";
                
                if (json.get("CONV_QTY").toString() != null)
                {
                    sConvQty = json.get("CONV_QTY").toString().trim();                
                    if(sConvQty.equals("")){
                        sConvQty = "0";
                    }

                    sConvUnitCost = json.get("CONV_UNITCOST").toString().trim();
                    if(sConvUnitCost.equals("")){
                        sConvUnitCost = "0";
                    }
                }
                
                if(json.get("GRND_IDX").toString().trim().equals("0")){
                    sMethod = "ADD_GRNDETAIL";
                }else{
                    sMethod = "UPD_GRNDETAIL";
                }

                String[] aryGRNItem = {
                sMethod               /*0. pMethod    varchar(30)*/,
                IdxKey                /*1. sGRNIDX    varchar(10)*/,
                ""                    /*2. sGRNCompany    varchar(10)*/,
                json.get("OUTLET").toString().trim()      /*3. sGRNLocation   varchar(10)*/,
                ""                    /*4. sGRNSuppCode   varchar(10)*/,
                ""                    /*5. sGRNDate       varchar(10)*/,
                ""                    /*6. sGRNRefNo      varchar(30)*/,
                ""                    /*7. sGRNRefDate    varchar(10)*/,
                ""                    /*8. sGRNInvNo      varchar(30)*/,
                ""                    /*9. sGRNInvDate    varchar(10)*/,
                ""                    /*10. sGRNDONo      varchar(30)*/,
                ""                    /*11. sGRNDODate    varchar(10)*/,
                ""                    /*12. sGRNRemark    varchar(100)*/,
                "N"                   /*13. sGRNGSTInc    varchar(1)*/,
                "1"                   /*14. sGRNrecstatus       varchar(4)*/,
                String.valueOf(iLineNo)                    /*15. sGRNLine            varchar(10)*/,
                json.get("PRD_Code").toString().trim()     /*16. sStockCode          varchar(30)*/,
                json.get("UOM").toString().trim()          /*17. sUOMCode            varchar(6)*/,
                json.get("COST").toString().trim()         /*18. sUnitCost           varchar(15)*/,
                json.get("RCV_QTY").toString().trim()      /*19. sQty                varchar(15)*/,
                sDisA                                      /*20. sDiscAmt            varchar(15)*/,
                json.get("NETT_AMT").toString().trim()     /*21. sSubTotal           varchar(15)*/,
                sDisP                                      /*22. sDiscPercent        varchar(15)*/,
                json.get("DISC_TYPE").toString().trim()    /*23. sDiscOpt            varchar(1)*/,
                json.get("EXPIRY").toString().trim()       /*24. sExpiryDate         varchar(10)*/,
                json.get("BATCH").toString().trim()        /*25. sBatchNo            varchar(10)*/,
                json.get("PO").toString().trim()           /*26. sPONo               varchar(30)*/,
                json.get("ORDER_QTY").toString().trim()    /*27. sPOQty              varchar(15)*/,
                json.get("RCV_BONUS").toString().trim()    /*28. sBonusQty           varchar(15)*/, //LLT MODIFIED
                json.get("ORDER_BONUS").toString().trim()  /*29. sPOBonusQty         varchar(15)*/,
                json.get("POLine").toString().trim()       /*30. sPOLine             varchar(15)*/,
                json.get("gst_code").toString().trim()     /*31. sGSTPurCode         varchar(8)*/,
                json.get("GST_PUR_Rate").toString().trim() /*32. sGSTTaxRates        varchar(15)*/,
                json.get("GST_AMT").toString().trim()      /*33. sGSTAmt             varchar(15)*/,
                json.get("GROSS").toString().trim()        /*34. sGrossTotal         varchar(15)*/,
                sBy                    /*35. sBy                 varchar(10)*/,
                ""                    /*36. sInSupplier         varchar(10)*/,
                json.get("GST_Code_Sup").toString().trim() /*37. sInGSTSupCode       varchar(8)*/,
                ""                    /*38. sInLocation         varchar(10)*/,           
                json.get("GRND_IDX").toString().trim()     /*39. GRNDIDX             varchar(10)*/,   
                sConvQty          /*40. sConvQty         varchar(20)*/,
                sConvUnitCost     /*41. sConvUnitCost    varchar(20)*/,
                json.get("CONV_UOM").toString().trim()     /*42. sConvUom         varchar(6)*/,
                json.get("CONTROL_DATETIME").toString().trim()     /*43. ControlDateTime     varchar(20)*/};   

                objGRNDetail = obj_GRN.DAL_ADDEDIT_GRN(SiteName, aryGRNItem);
                try{
                    if (objGRNDetail.getObjectArray(0).toString().equals("00000")) {
                        iLineNo = iLineNo + 1;
                    } else {                    
                        b = false;
                    }                
                }catch(Exception ex){
                    b = false;
                }
            }
        }        
         return b;
    }
    //End Insert GRN Detail
    
    protected void DELETE_GRN_DETAIL(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException{
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject jsonReturn = new net.sf.json.JSONObject();
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
      //  try {
            String sMessage = "";
            String sGRNDIDX = request.getParameter("GRNDIDX");
            String sControlDateTime = request.getParameter("CONTROL_DATETIME") ;
            boolean bReturn = false;
            DAL_GRN obj_GRN = new DAL_GRN();

            String sGRNMethod = "DEL_GRNDETAIL";
            String[] aryGRN = {
                sGRNMethod            /*0. pMethod    varchar(30)  "ADD_GRNHEADER"*/,
                ""                    /*1. sGRNIDX    varchar(10)*/,
                ""                    /*2. sGRNCompany    varchar(10)*/,
                ""                    /*3. sGRNLocation   varchar(10)*/,
                ""                    /*4. sGRNSuppCode   varchar(10)*/,
                ""                    /*5. sGRNDate       varchar(10)*/,
                ""                    /*6. sGRNRefNo      varchar(30)*/,
                ""                    /*7. sGRNRefDate    varchar(10)*/,
                ""                    /*8. sGRNInvNo      varchar(30)*/,
                ""                    /*9. sGRNInvDate    varchar(10)*/,
                ""                    /*10. sGRNDONo      varchar(30)*/,
                ""                    /*11. sGRNDODate    varchar(10)*/,
                ""                    /*12. sGRNRemark    varchar(100)*/,
                "N"                   /*13. sGRNGSTInc    varchar(1)*/,
                "1"                   /*14. sGRNrecstatus       varchar(4)*/,
                ""                    /*15. sGRNLine            varchar(10)*/,
                ""                    /*16. sStockCode          varchar(30)*/,
                ""                    /*17. sUOMCode            varchar(6)*/,
                "0"                   /*18. sUnitCost           varchar(15)*/,
                "0"                   /*19. sQty                varchar(15)*/,
                "0"                   /*20. sDiscAmt            varchar(15)*/,
                "0"                   /*21. sSubTotal           varchar(15)*/,
                "0"                   /*22. sDiscPercent        varchar(15)*/,
                "0"                   /*23. sDiscOpt            varchar(1)*/,
                ""                    /*24. sExpiryDate         varchar(10)*/,
                ""                    /*25. sBatchNo            varchar(10)*/,
                ""                    /*26. sPONo               varchar(30)*/,
                "0"                   /*27. sPOQty              varchar(15)*/,
                "0"                   /*28. sBonusQty           varchar(15)*/,
                "0"                   /*29. sPOBonusQty         varchar(15)*/,
                ""                    /*30. sPOLine             varchar(15)*/,
                ""                    /*31. sGSTPurCode         varchar(8)*/,
                "0"                   /*32. sGSTTaxRates        varchar(15)*/,
                "0"                   /*33. sGSTAmt             varchar(15)*/,
                "0"                   /*34. sGrossTotal         varchar(15)*/,
                (String) session.getAttribute("loginid")        /*35. sBy                 varchar(10)*/,
                "N"                   /*36. sInSupplier         varchar(10)*/,
                ""                    /*37. sInGSTSupCode       varchar(8)*/,
                ""                    /*38. sInLocation         varchar(10)*/,
                sGRNDIDX              /*39. GRNDIDX             varchar(10)*/,               
                ""                    /*40. sConvQty         varchar(20)*/,
                ""                    /*41. sConvUnitCost    varchar(20)*/,
                ""                    /*42. sConvUom         varchar(6)*/,           
                sControlDateTime      /*43. ControlDateTime     varchar(20)*/};
            
            BLL_Common.Common_Object obj = obj_GRN.DAL_ADDEDIT_GRN(SiteName, aryGRN);
            
            try {
                if (obj.getObjectArray(0).toString().equals("00000")) {
                    //TRX_GRN_Detail(sGRNDetail, obj.getObjectArray(2).toString());
                    bReturn = true;
                    sMessage = obj.getObjectArray(1).toString();
                } else {
                    sMessage = "Error : " + obj.getObjectArray(0).toString();
                    obj.rollback();
                }
            } catch (Exception e) {
                try {
                        sMessage = obj.getJSONArray(0).getJSONObject(0).getString("@sError");
                        obj.rollback();
                    } catch (SQLException ex) {
                        bReturn = false;
                    }
            }
            
            jsonReturn.put("bool", bReturn);
            jsonReturn.put("msg", sMessage);
            out.println(jsonReturn);
    }

    protected void Confirm_GRN(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException, SQLException{
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject jsonReturn = new net.sf.json.JSONObject();
        
        HttpSession session = request.getSession(); 
        String SiteName = (String) session.getAttribute("SiteName");
        
      //  try {
            String sMessage = "";
            String sGRNIDX = request.getParameter("GRNIDX");
            String sControlDateTime = request.getParameter("CONTROL_DATETIME") ;
            boolean bReturn = false;
            DAL_GRN obj_GRN = new DAL_GRN();

            String sGRNMethod = "CONFIRM_GRNDETAIL";
            String[] aryGRN = {
                sGRNMethod            /*0. pMethod    varchar(30)  "ADD_GRNHEADER"*/,
                sGRNIDX               /*1. sGRNIDX    varchar(10)*/,
                ""                    /*2. sGRNCompany    varchar(10)*/,
                ""                    /*3. sGRNLocation   varchar(10)*/,
                ""                    /*4. sGRNSuppCode   varchar(10)*/,
                ""                    /*5. sGRNDate       varchar(10)*/,
                ""                    /*6. sGRNRefNo      varchar(30)*/,
                ""                    /*7. sGRNRefDate    varchar(10)*/,
                ""                    /*8. sGRNInvNo      varchar(30)*/,
                ""                    /*9. sGRNInvDate    varchar(10)*/,
                ""                    /*10. sGRNDONo      varchar(30)*/,
                ""                    /*11. sGRNDODate    varchar(10)*/,
                ""                    /*12. sGRNRemark    varchar(100)*/,
                "N"                   /*13. sGRNGSTInc    varchar(1)*/,
                "1"                   /*14. sGRNrecstatus       varchar(4)*/,
                ""                    /*15. sGRNLine            varchar(10)*/,
                ""                    /*16. sStockCode          varchar(30)*/,
                ""                    /*17. sUOMCode            varchar(6)*/,
                "0"                   /*18. sUnitCost           varchar(15)*/,
                "0"                   /*19. sQty                varchar(15)*/,
                "0"                   /*20. sDiscAmt            varchar(15)*/,
                "0"                   /*21. sSubTotal           varchar(15)*/,
                "0"                   /*22. sDiscPercent        varchar(15)*/,
                "0"                   /*23. sDiscOpt            varchar(1)*/,
                ""                    /*24. sExpiryDate         varchar(10)*/,
                ""                    /*25. sBatchNo            varchar(10)*/,
                ""                    /*26. sPONo               varchar(30)*/,
                "0"                   /*27. sPOQty              varchar(15)*/,
                "0"                   /*28. sBonusQty           varchar(15)*/,
                "0"                   /*29. sPOBonusQty         varchar(15)*/,
                ""                    /*30. sPOLine             varchar(15)*/,
                ""                    /*31. sGSTPurCode         varchar(8)*/,
                "0"                   /*32. sGSTTaxRates        varchar(15)*/,
                "0"                   /*33. sGSTAmt             varchar(15)*/,
                "0"                   /*34. sGrossTotal         varchar(15)*/,
                (String) session.getAttribute("loginid")        /*35. sBy                 varchar(10)*/,
                "N"                   /*36. sInSupplier         varchar(10)*/,
                ""                    /*37. sInGSTSupCode       varchar(8)*/,
                ""                    /*38. sInLocation         varchar(10)*/,
                ""                    /*39. GRNDIDX             varchar(10)*/,
                ""                    /*40. sConvQty         varchar(20)*/,
                ""                    /*41. sConvUnitCost    varchar(20)*/,
                ""                    /*42. sConvUom         varchar(6)*/,     
                sControlDateTime      /*43. CONTROLDATETIME             */};            
            
            
            BLL_Common.Common_Object obj = obj_GRN.DAL_ADDEDIT_GRN(SiteName, aryGRN);
            
            try {
                if (obj.getObjectArray(0).toString().equals("00000")) {
                    DataTransfer_GRN(SiteName);
                    bReturn = true;
                    sMessage = obj.getObjectArray(1).toString();
                } else {
                    sMessage = "Error : " + obj.getObjectArray(0).toString();
                    obj.rollback();
                }
            } catch (Exception e) {
                try {
                        sMessage = obj.getJSONArray(0).getJSONObject(0).getString("@sError");
                        obj.rollback();
                    } catch (SQLException ex) {
                        bReturn = false;
                    }
            }
            
            jsonReturn.put("bool", bReturn);
            jsonReturn.put("msg", sMessage);
            out.println(jsonReturn);
    }
    
    // this is for testing purpose only
    protected void DataTransfer_GRN(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException, SQLException{
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject jsonReturn = new net.sf.json.JSONObject();        
        String sMessage = "";
        boolean bReturn = false;
  
        sMessage = DataTransfer_GRN(SiteName);
        
        if(sMessage.equals("")){
            bReturn = true;
        }
        
        jsonReturn.put("bool", bReturn);
        jsonReturn.put("msg", sMessage);
        out.println(jsonReturn);
    }
   //END testing purpose
    
    public static String DataTransfer_GRN(String SiteName) throws IOException, SQLException {
        
        BLL_GRN grn = new BLL_GRN();
        DAL_StockCostQty obj_SCQ = new DAL_StockCostQty();
        DAL_StockLedger obj_STKLEDG = new DAL_StockLedger();
        JSONObject obj_add = new JSONObject();
        JSONObject obj_pass = new JSONObject();
        String sMessage = "";
        boolean b = true;
//        int AllowableThreadCount = 50;
        String[] arySCQ = {
            "GET_DATAEX",     /*0. sMethod    varchar(30)  */
            "",             /*1. sStkCode    varchar(20)  */
            "",             /*2. sConvUOM    varchar(10)  */
            "",             /*3. sCompCode    varchar(20)  */
            "",             /*4. sLocationCode    varchar(30)  */
            ""              /*5. sSortMethod    varchar(10)  */           
        };
        
        String[] arrStkl = {
            "GET_DATAEX",     /*0. sMethod    varchar(30)  */
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""           
        };
       
        BLL_Common.Common_Object obj = obj_SCQ.DAL_GET_STOCK_COSTQTY_DETAILS(SiteName, arySCQ);
        BLL_Common.Common_Object objstkl = obj_STKLEDG.DAL_GET_STOCK_LEDGER(SiteName, arrStkl);
        
        try {
                if(obj.getJSONArray(0).size() > 0 || objstkl.getJSONArray(0).size() > 0){
                    JSONArray conarr = BLL_Common.concatArray(obj.getJSONArray(1),objstkl.getJSONArray(1));
                    JSONObject mergeObj = BLL_Common.mergeObjectValue(conarr,"Location");
                    JSONArray arrLoc = mergeObj.names();
                    //filter by location
//                     ExecutorService executor = Executors.newFixedThreadPool(AllowableThreadCount);  
                    
                    for (int i = 0; i < arrLoc.size(); i++) {
                        
                        String sLocation = arrLoc.getString(i);
                        
                        JSONArray innerArray = new JSONArray();
                        innerArray.add(mergeObj.getJSONObject(sLocation));
                        String sURL="";
                        String sID="";
                        String sPW="";
                        String sLoc = "";

                        for(Object jsURL : innerArray){
                            JSONObject objURL = (JSONObject)jsURL;
                            
                            sURL = objURL.get("wsc_url").toString();
                            sID = objURL.get("wsc_userid").toString();
                            sPW = objURL.get("wsc_password").toString();
                            sLoc = objURL.get("wsc_url").toString();
                        }

                        
                        // --- get stock cost qty and stockledger data ---
                        if (obj.getJSONArray(0).size() > 0){ 
                            JSONArray arrSCQ = new JSONArray();
                            
                            for(Object jsonSCQ : obj.getJSONArray(0)){
                                JSONObject jsSCQ = (JSONObject) jsonSCQ;
                                
                                if(jsSCQ.get("Location").equals(sLocation)){
                                    arrSCQ.add(jsSCQ);
                                }
                            }
                            obj_add.put("SCQ", arrSCQ);
                        }

                        if (objstkl.getJSONArray(0).size()>0){
                            JSONArray arrSTKL = new JSONArray();
                            
                            for(Object jsonSTKL : objstkl.getJSONArray(0)){
                                JSONObject jsSTKL = (JSONObject) jsonSTKL;
/* 2016-04-07 By CPK 1. Fixed Error-> Location field not exists. 2. Pick up right location from between Header/Detail 
                                accoridng to sldg_trxtype, if SALE use sldg_location and if GRN use sldl_location.
                                */ 
                                if(jsSTKL.get("sldg_trxtype").equals("SALE"))
                                {
                                    if(jsSTKL.get("sldg_location").equals(sLocation)){
                               
                                        arrSTKL.add(jsSTKL);
                                
                                    }
                                }
                                else
                                {
                                    if(jsSTKL.get("sldl_location").equals(sLocation)){
                                
                                        arrSTKL.add(jsSTKL);
                                    
                                    }
                                }
//                                if(jsSTKL.get("Location").equals(sLocation)){
//                                    arrSTKL.add(jsSTKL);
//                                }
                            }
                      
                            obj_add.put("STKLEDG", arrSTKL);
                           
                        }                        
                        // --- END get stock cost qty and stockledger data ---
                        
                        obj_pass.put("GRN", obj_add);
                
//before implement multi-thread 
                        if (!sURL.equals("")) {
                            Object_BLL_Common.write_log(sLocation + " : accessing DataTransfer_GRN() ", "");
                        grn.DataTransfer_GRN(obj_pass.toString(), sURL, sID, sPW, SiteName);         
                            Object_BLL_Common.write_log(sLocation + " : end of DataTransfer_GRN() ", "");
                        } else {
                            Object_BLL_Common.write_log(sLocation + " : Tomcat is not running. Skipped.", "");
                        }
//                          Runnable DEThread = new BLL_GRN(obj_pass.toString(), sURL, sID, sPW);
//                          executor.execute(DEThread); 
                    }
        
                    //END filter by location              
                } else{
                    Object_BLL_Common.write_log("No data transfer", "");
                    sMessage = "No data transfer.";
                    b = false;
                }
            } catch (Exception e) {
                sMessage = e.toString();
                Object_BLL_Common.write_log("Exception at Servlet_GRN : " + sMessage, "");                
                b = false;  
            }
            
        return sMessage;
           
        //String input = "{\"DISP\":{\"SCQ\":[{\"STKCOSTCOMPANY\":\"a\",\"STKCOSTWAREHOUSE\":\"1\"},{\"STKCOSTCOMPANY\":\"b\",\"STKCOSTWAREHOUSE\":\"2\"}],\"STKLEDG\":[{\"STKCOSTCOMPANY\":\"a\",\"STKCOSTWAREHOUSE\":\"1\"},{\"STKCOSTCOMPANY\":\"b\",\"STKCOSTWAREHOUSE\":\"2\"}]}}";

    }
    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String p_method = null;
        p_method = request.getParameter("SFC");

        if(p_method.equals("GET_GRN_LIST")){
            try{
                BIND_GRN_LIST(request ,response);
            }catch (SQLException e){
                e.printStackTrace();
            }
        }
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String p_method = null;
        p_method = request.getParameter("SFC");

        if (p_method.equals("INSERT_GRN")) {
            try {
                INSERT_GRN(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }else if(p_method.equals("GET_GRN_LIST")){
            try{
                BIND_GRN_LIST(request ,response);
            }catch (SQLException e){
                e.printStackTrace();
            }
        }else if(p_method.equals("DELETE_GRN_DETAIL")){
            try{
                DELETE_GRN_DETAIL(request ,response);
            }catch (SQLException e){
                e.printStackTrace();
            }
        }else if(p_method.equals("CONFIRM_GRN")){
            try{
                Confirm_GRN(request ,response);
            }catch (SQLException e){
                e.printStackTrace();
            }
        }else if(p_method.equals("DT_GRN")){
            try{
                DataTransfer_GRN(request, response);
            }catch (SQLException e){
                e.printStackTrace();
            }
        } else if(p_method.equals("GET_GRN_DETAIL")){
            try{
                BIND_GRN_DETAIL(request ,response);
            }catch (SQLException e){
                e.printStackTrace();
            }
        }
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
