package BusinessLogic;

import BusinessData.DAL_PopulateData;
import BusinessData.DAL_StockLedger;
import BusinessData.DAL_StockDespatch;
import BusinessData.DAL_StockReturn;
import static BusinessLogic.Servlet_GRN.DataTransfer_GRN;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JSONException;

import org.apache.commons.collections.CollectionUtils;

import static BusinessLogic.Servlet_Stock.Product_Pricing;
import static BusinessLogic.Servlet_Stock.TRX_UOM_CONVERT;
import static BusinessLogic.Servlet_StockTransfer.UpdateTemporaryStockBalance;

import java.util.Iterator;
import net.sf.json.JSONSerializer;
import org.json.simple.parser.JSONParser;

@WebServlet(name = "Servlet_StockReturn", urlPatterns = {"/Servlet_StockReturn"})
public class Servlet_StockReturn extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet Servlet_StockTransfer</title>");            
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet Servlet_StockTransfer at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // processRequest(request, response);
        String p_method = null;
        p_method = request.getParameter("SFC");
        
//        if (p_method.equals("GET_UNDISPATCHED_STOCK_LIST")) {
//            try {
//                Get_Undispatached_StockList(request, response);
//            } catch (SQLException e) {
//                e.printStackTrace();
//            }
//
//        }
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // processRequest(request, response);
        String p_method = null;
        p_method = request.getParameter("SFC");

        if (p_method.equals("GET_STKRETURN_LIST")) {
            try {
                GET_STOCK_RETURN_LIST(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } else if (p_method.equals("GET_PRD_COSTQTY_LIST")) {
            try {
                Bind_Prd_CostQty_List(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } else if (p_method.equals("CREATE_STOCK_RETURN")) {
            try {
                ADDUPDATE_STOCK_RETURN(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } else if (p_method.equals("GET_STKRETURN_HEADER")) {
            try {
                GET_STOCK_RETURN_HEADER(request, response);
            } catch (SQLException e) {
                e.printStackTrace();          
            } 
        } else if (p_method.equals("GET_STKRETURN_ITEMS")) {
            try {
                GET_STOCK_RETURN_ITEMS(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        }  else if (p_method.equals("UPDATE_STOCK_RETURN")) {
            try {
                ADDUPDATE_STOCK_RETURN(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        }        
    }
    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

    public void GET_STOCK_RETURN_LIST(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
 
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));
        
        String sCompCode = request.getParameter("COMPCODE");          
        String sLocCode = request.getParameter("LOCCODE");
        String sStkCode = request.getParameter("STKCODE");                
        String sDocDate = request.getParameter("DOCDATE");  
                 
        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }
        
        DAL_StockReturn StkRetList = new DAL_StockReturn();
        
        int total = 0;
        double pageval = 0;
        BLL_Common.Common_Object ItemList = StkRetList.DAL_GET_STOCK_RETURN(SiteName, new String[]{
            "GET_STOCK_RETURN","","",sCompCode,sLocCode,sStkCode,"","","","",sDocDate,sOrder,Integer.toString(page),Integer.toString(rows)});
    
        BLL_Common.Common_Object ItemTotalRow = StkRetList.DAL_GET_STOCK_RETURN(SiteName, new String[]{
            "COUNT_STOCK_RETURN","","",sCompCode,sLocCode,sStkCode,"","","","",sDocDate,"","",""});
 
        //Execute all queries here
        try {
            total = ItemTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", ItemList.getJSONArray(0));

        //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } 
        out.print(json);
        out.flush();
        out.close();
    }
    
    public void Bind_Prd_CostQty_List(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));

        String sCompany = request.getParameter("COMPANY");
        String sLocation = request.getParameter("LOCATION");
        String sPrdCode = request.getParameter("PRDCODE"); 
        String sPrdDesc = request.getParameter("PRDDESC"); 
        String sPrdGrp = request.getParameter("PRDGRP");
        String sPrdType = request.getParameter("PRDTYPE");
        String sPrdCat = request.getParameter("PRDCAT");

        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }

        //Calculate offset value
        //int offset = (page - 1) * rows;
        DAL_StockReturn DAL_PrdCostQty = new DAL_StockReturn();

        int total = 0;
        double pageval = 0;

        BLL_Common.Common_Object SignUpList = DAL_PrdCostQty.DAL_GET_STOCK_RETURN(SiteName, new String[]{
            "GET_PRODUCT_COSTQTY_LIST","","",sCompany,sLocation,sPrdCode,sPrdDesc,sPrdGrp,sPrdType,
            sPrdCat,"",sOrder,Integer.toString(page),Integer.toString(rows)});

        BLL_Common.Common_Object SignUpTotalRow = DAL_PrdCostQty.DAL_GET_STOCK_RETURN(SiteName, new String[]{
            "COUNT_PRODUCT_COSTQTY_LIST","","",sCompany,sLocation,sPrdCode,sPrdDesc,sPrdGrp,sPrdType,
            sPrdCat,"","","",""});

        try {
            total = SignUpTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", SignUpList.getJSONArray(0));           
        //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } 

        out.print(json);
        out.flush();
        out.close();
    } 
    
    public void ADDUPDATE_STOCK_RETURN(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
        //JSONParser parser = new JSONParser();

        String sMessage = "";
        boolean bReturn = false;
         
        String sRetHdrIdx = request.getParameter("RETHDRIDX");
        String JsonReturn = request.getParameter("ITEMS");
        String sCompCode = request.getParameter("COMPANY");
        String sLocCode = request.getParameter("LOCATION");
        String sRecvCode = request.getParameter("RECVLOCATION");
        String sPersonName = request.getParameter("PERSONNAME");
        String sRemarks = request.getParameter("REMARKS");     
        String sStatus = request.getParameter("STATUS");  
        String sFunction = request.getParameter("FUNCTION");
        String sDocNo = "";
        String sDocDate = "";
        String sMethod = "";  
        
        switch (sFunction) {
            case "INSERT":
                sMethod = "ADD_RETURN_HEADER";
                break;
            case "UPDATE":
                sMethod = "UPDATE_RETURN_HEADER";
                sDocNo = request.getParameter("DOCNO");
                sDocDate = request.getParameter("DOCDATE");
                break;
        }
       
        JSONArray aryRetNo = null;
        DAL_PopulateData obj_No = new DAL_PopulateData();              
        if (sFunction.equals("INSERT")) {
            BLL_Common.Common_Object rsNo = obj_No.DAL_GetNumber(SiteName, new String[]{"GET_NUMBER","RETURN",""});  
            aryRetNo = (JSONArray) JSONSerializer.toJSON(rsNo.getJSONArray(0).toString());
            JSONObject objDocNo = aryRetNo.getJSONObject(0);
            sDocNo =  objDocNo.getString("NewNumber");
            int idxDeleteCharAt = 3; 
            sDocNo = sDocNo.substring(0, idxDeleteCharAt) + sDocNo.substring(idxDeleteCharAt+1);
            rsNo.commit();        
        }
               
        String[] aryHdr = {
            sMethod,    /* sMethod VARCHAR(50) */
            sRetHdrIdx, /* sreth_returnhdridx INTEGER */
            "0",        /* sRETD_ReturnDtlIdx INTEGER */
            sCompCode,  /* sreth_company VARCHAR(10) */
            sLocCode,   /* sreth_issuelocation VARCHAR(10) */
            sRecvCode,   /* sreth_recievelocation VARCHAR(10) */
            sDocNo,     /* sreth_docno VARCHAR(10) */
            "",         /* sreth_docdate VARCHAR(100) */
            sRemarks,   /* sreth_remark VARCHAR(100) */
            sPersonName,/* sreth_personname VARCHAR(200) */
            "",         /* sretd_stockcode VARCHAR(16) */
            "",         /* sretd_uomcode VARCHAR(6) */
            "0",        /* sretd_uomidx INTEGER */
            "0",        /* sretd_qty NUMERIC(15,3) */
            "",         /* sretd_costqtyidx VARCHAR(10) */
            "",         /* sretd_batchno VARCHAR(10) */
            "",         /* sretd_expirydate VARCHAR(10) */
            "",         /* sretd_unitcost VARCHAR(10) */
            "",         /* sretd_status VARCHAR(4) */
            "",         /* sretd_remarks VARCHAR(200) */
            "0",        /* sretd_stockledgerdtlidx INTEGER */
            "0",        /* sretd_accepted_qty NUMERIC(15,3) */
            sStatus,    /* sreth_status VARCHAR(10) */
            (String)session.getAttribute("loginid"), /* sBy VARCHAR(10) */
            "1"          /* srecstatus VARCHAR(4) */    
        };
           
        DAL_StockReturn objHdr = new DAL_StockReturn();
        BLL_Common.Common_Object obj = objHdr.DAL_ADDEDIT_STOCK_RETURN(SiteName, aryHdr); // Add/Update Stock Return Header
                 
        try {
            if (obj.getObjectArray(0).toString().equals("00000")) {
                bReturn = true;
                
                // Add/Update Stock Return Detail
                boolean bAddUpdateItemsSuccessful = Return_Items(request,JsonReturn,obj.getObjectArray(2).toString());
                                         
                if (bAddUpdateItemsSuccessful) {                   
                    if (sFunction.equals("UPDATE")) {
                        
                        //Update Stock Cost Qty & Stock Balance 
                        //Create record in stock ledger
                        String[] s = {sCompCode, sLocCode, sDocNo, sDocDate, sRetHdrIdx, sRecvCode};
                        boolean bUpdateAllSuccessful = UpdateStockCostQty(request, JsonReturn, s);                     
                    
                        if (bUpdateAllSuccessful) {   
                            DataTransfer_GRN(SiteName);
                            obj.commit(); 
                            bReturn = true;                                                        
                        }
                        else {
                           obj.rollback(); 
                        }
                    }
                    else {
                        bReturn = true;
                        obj.commit();
                    }
                }
                else {
                    obj.rollback();
                }           
            } else {
                obj.rollback();
            }
        } catch (Exception e) {
            try {
                obj.rollback();
            } catch (SQLException ex) {
                bReturn = false;
            }
        }        
        json.put("bool", bReturn);
        json.put("msg", sMessage);
        out.println(json);
    }
    
    public static boolean Return_Items(HttpServletRequest request, String JsonReturnItem, String RetHdrIdx) throws IOException, SQLException {
         
        HttpSession session = request.getSession();   
        String SiteName = (String) session.getAttribute("SiteName");
        
        boolean bReturn = false;      
        String sMethod = "";                                          
        String sRetDtlIdx = "0";
        String sStkCode = "";
        String sUOMCode = "";
        String sBatchNo = "";
        String sExpiryDate = "";
        String sUnitCost = "";
        String sRetQty = "0.0";
        String sAcceptQty = "0.0";
        
        JSONArray RetItem_array = (JSONArray) JSONSerializer.toJSON(JsonReturnItem);           
        if (RetItem_array.size() > 0) {
            for (Object js : RetItem_array) { //iterate through JsonReturnItem
                        
                try {
                    JSONObject RetItemjson = (JSONObject) js;

                    String sFunction = RetItemjson.getString("FUNCTION");
                    switch (sFunction) {
                        case "INSERT":
                            sMethod = "ADD_RETURN_DETAIL";  
                            sStkCode = RetItemjson.get("STKCODE").toString();
                            sUOMCode = RetItemjson.get("UOMCODE").toString();
                            sBatchNo = RetItemjson.get("BATCHNO").toString();
                            sExpiryDate = RetItemjson.get("EXPIRYDATE").toString();
                            sUnitCost = RetItemjson.get("UNITCOST").toString();
                            sRetQty = RetItemjson.get("QTY").toString();
                            break;
                        case "UPDATE":
                            sMethod = "UPDATE_RETURN_DETAIL";
                            sRetDtlIdx = RetItemjson.get("RETDTLIDX").toString();
                            sAcceptQty = RetItemjson.get("ACCEPTED_QTY").toString();
                            break;
                    }

                    String[] aryDtl = {
                        sMethod,      /* sMethod VARCHAR(50) */
                        RetHdrIdx,    /* sreth_returnhdridx INTEGER */
                        sRetDtlIdx,   /* sRETD_ReturnDtlIdx INTEGER */
                        "",           /* sreth_company VARCHAR(10) */
                        "",           /* sreth_issuelocation VARCHAR(10) */
                        "",           /* sreth_recievelocation VARCHAR(10) */
                        "",           /* sreth_docno VARCHAR(10) */
                        "",           /* sreth_docdate VARCHAR(100) */
                        "",           /* sreth_remark VARCHAR(100) */
                        "",           /* sreth_personname VARCHAR(200) */
                        sStkCode,     /* sretd_stockcode VARCHAR(16) */
                        sUOMCode,     /* sretd_uomcode VARCHAR(6) */
                        "0",          /* sretd_uomidx INTEGER */
                        sRetQty,      /* sretd_qty NUMERIC(15,3) */
                        "0",          /* sretd_costqtyidx VARCHAR(10) */
                        sBatchNo,     /* sretd_batchno VARCHAR(10) */
                        sExpiryDate,  /* sretd_expirydate VARCHAR(10) */
                        sUnitCost,    /* sretd_unitcost VARCHAR(10) */
                        RetItemjson.get("STATUS").toString(),     /* sretd_status VARCHAR(4) */
                        RetItemjson.get("REMARKS").toString(),    /* sretd_remarks VARCHAR(200) */
                        "0",                                      /* sretd_stockledgerdtlidx INTEGER */
                        sAcceptQty,                               /* sretd_accepted_qty NUMERIC(15,3) */
                        "",                                       /* sreth_status VARCHAR(10) */
                        (String)session.getAttribute("loginid"),  /* sBy VARCHAR(10) */
                        "1"                                       /* srecstatus VARCHAR(4) */    
                    };

                    BLL_Common.Common_Object objRetItem = new BLL_Common.Common_Object();
                    DAL_StockReturn obj_Ret = new DAL_StockReturn();
                    objRetItem = obj_Ret.DAL_ADDEDIT_STOCK_RETURN(SiteName, aryDtl);

                    if (objRetItem.getObjectArray(0).toString().equals("00000")) {
                        
                        objRetItem.commit();
                        bReturn = true;
                    } else {
                        objRetItem.rollback();
                    }
                }
                catch (Exception e) {
                    bReturn = false;
                }
            }
        }
        return bReturn;
    }
    
    public void GET_STOCK_RETURN_HEADER(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
    
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        PrintWriter out = response.getWriter();
        response.setContentType("text/json");
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        String sRetHdrIdx = request.getParameter("RETHDRIDX");

        DAL_StockReturn StkRetHdr = new DAL_StockReturn();
            
        try {            
            BLL_Common.Common_Object rsDetail = StkRetHdr.DAL_GET_STOCK_RETURN(SiteName, new String[]{
                "GET_STOCK_RETURN_HEADER",sRetHdrIdx,"","","","","","","","","","","",""});
            
            json.put("row", rsDetail.getJSONArray(0));
            out.print(rsDetail.getJSONArrayAsJSONObject("object"));              
        } catch (Exception e) {
            out.println("Exception Error.");
            e.printStackTrace();
        } 
    } 
    
    public void GET_STOCK_RETURN_ITEMS(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
 
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
        
        String sRetHdrIdx = request.getParameter("RETHDRIDX");                 
        
        DAL_StockReturn StkRetDtl = new DAL_StockReturn();
            
        try {
            BLL_Common.Common_Object ItemList = StkRetDtl.DAL_GET_STOCK_RETURN(SiteName, new String[]{
                "GET_STOCK_RETURN_ITEMS",sRetHdrIdx,"","","","","","","","","","","",""});
            
            json.put("rows", ItemList.getJSONArray(0));
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } 
        out.print(json);
        out.flush();
        out.close();
    }
  
    public static boolean UpdateStockCostQty(HttpServletRequest request, String JsonReturnItem, String[] sIn)  throws ServletException, IOException, SQLException  {
   
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        boolean bReturn = false;
        boolean bUpdateStkCostQtySuccessful = false;
        boolean bUpdateStkLedgerSuccessful = false;
        boolean bUpdateStkLedger = false;
        String sCompCode = sIn[0];
        String sLocCode = sIn[1];
        String sDocNo = sIn[2];
        String sDocDate = sIn[3];
        String sRetHdrIdx = sIn[4];
        
        String sRecvLocCode = sIn[5];
         
        JSONArray RetItemSingleStk_array = new JSONArray();
        
        JSONArray RetItem_array = (JSONArray) JSONSerializer.toJSON(JsonReturnItem);
        if (RetItem_array.size() > 0) {

            for (Object js : RetItem_array) { //Iterate through JsonReturnItem
                
                JSONObject RetItemjson = (JSONObject) js;               
                RetItemSingleStk_array.add(RetItemjson);                        
            }
            String JsonReturnWithDtlIdx = RetItemSingleStk_array.toString(); //all items data
            
            for (Object js : RetItem_array) { //Iterate through JsonReturnItem
                
                JSONObject RetItemjson = (JSONObject) js;              
                String sStkCode = RetItemjson.get("STKCODE").toString(); 
                String sUOMCode = RetItemjson.get("UOMCODE").toString(); 
                String sStatus = RetItemjson.get("STATUS").toString();                 
                String sControlDatetime = RetItemjson.getString("CONTROL_DATETIME");
               
                
                //pengkee 2018JUN08
                //need to add filter key using RETDTLIDX.
                String sRetDtlIdx = RetItemjson.get("RETDTLIDX").toString();   
                
                //if (sStatus.equals("A")) {
                 if (sStatus.equals("A") || sStatus.equals("W")) {   
//                    String[] ary = {sStkCode,sCompCode,sLocCode,sUOMCode,sDocNo,sDocDate,sRetHdrIdx,sControlDatetime};
                    String[] ary = {sStkCode,sCompCode,sLocCode,sUOMCode,sDocNo,sDocDate,sRetHdrIdx,sControlDatetime,sRetDtlIdx, sRecvLocCode}; //pengkee 2018JUN08
                    bUpdateStkCostQtySuccessful = BusinessLogic.Servlet_StockCostQty.UpdateStockCostQty_StkReturn(request, JsonReturnWithDtlIdx, ary);       

                    if (bUpdateStkCostQtySuccessful){                        
                        if (!bUpdateStkLedger) {
                            bUpdateStkLedgerSuccessful = UpdateStockLedger(JsonReturnWithDtlIdx, ary, SiteName);                            
                            
                            
                            if (bUpdateStkLedgerSuccessful) {                       
                                bReturn = true;
                                bUpdateStkLedger = true;
                            } 
                            else {
                                bReturn = false;
                                break;
                            }
                        }
                    } 
                    else {
                        bReturn = false;
                        break;
                    }
                }
                else { 
                    bReturn = true;
                }
            }                                                                       
        }
        return bReturn;             
    }
     private static boolean UpdateStockLedger(String JsonRetItem, String[] sIn, String SiteName) throws IOException, SQLException {
         //2018Jun04
        
         
        int iAcceptedCount = UpdateStockLedger(JsonRetItem, sIn, SiteName, "A");
        int iWriteoffCount = UpdateStockLedger(JsonRetItem, sIn, SiteName, "W");

        if (iAcceptedCount == 0 && iWriteoffCount == 0)
        {    return false;}
        else if (iAcceptedCount == -1 && iWriteoffCount == -1)
        {return false;}
        else
        {return true;}
     }
     
    private static int UpdateStockLedger(String JsonRetItem, String[] sIn, String SiteName, String sStatus) throws IOException, SQLException {

        boolean bReturn = false;
        String sLedgerHdrIdx = "";
        String sRecvLedgerHdrIdx = "";
        String sCompCode = sIn[1];            
        String sLocCode = sIn[2];
        String sDocNo = sIn[4];
        String sDocDate = sIn[5].substring(0,10);
        String sRetHdrIdx = sIn[6];
        String sControlDatetime = sIn[7];
        
        String sRecvLocation = sIn[9];
        
        int year = Calendar.getInstance().get(Calendar.YEAR);
        int mth = Calendar.getInstance().get(Calendar.MONTH);                
        
        String sReason = "";
        String sTrxType = "";
        
        if (sStatus.equals("A"))
        {
            sReason = "RTN_IN";
            sTrxType = "RTN_IN";
        }
        else if (sStatus.equals("W"))
        {
            sReason = "WROFF";
            sTrxType = "WROFF";
        }
        
        int iRecsMatached = 0;
        
        JSONArray RetItem_array = (JSONArray) JSONSerializer.toJSON(JsonRetItem); 
        //JSONObject RetItemjson = new JSONObject(JsonRetItem);
        if (RetItem_array.size() > 0) { 
                    
            for (Object js : RetItem_array) { //iterate each item
                              
                JSONObject RetItemjson = (JSONObject) js;              
                
                String ItemStatus = RetItemjson.get("STATUS").toString();
                
                if (ItemStatus.equals(sStatus))
                {
                    iRecsMatached = iRecsMatached + 1;
                }
            }
            
            if (iRecsMatached == 0)
            {
                return 0;
            }
            
            
            JSONObject jsNew = null;
            jsNew = new JSONObject();                             
            jsNew.put("HEADER_DETAIL", "HEADER");          
            jsNew.put("FUNCTION","INSERT");
            jsNew.put("StockLedgerHdrIdx",0);
            jsNew.put("StockLedgerDtlIdx",0);
            jsNew.put("sldg_company",sCompCode);
            jsNew.put("sldg_location",sLocCode);
            jsNew.put("sldg_finyear",year);
            jsNew.put("sldg_finperiod",mth);
//            jsNew.put("sldg_reasoncode","WROFF");
//            jsNew.put("sldg_trxtype","WROFF");
            jsNew.put("sldg_reasoncode",sReason);
            jsNew.put("sldg_trxtype",sTrxType);
            jsNew.put("sldg_suppliercode","");
            jsNew.put("sldg_intercompanysupplier","");
            jsNew.put("sldg_docno",sDocNo);
            jsNew.put("sldg_docdate",sDocDate);
            jsNew.put("sldg_refno","");
            jsNew.put("sldg_refdate","");
            jsNew.put("sldg_invno","");
            jsNew.put("sldg_invdate","");
            jsNew.put("sldg_dono","");
            jsNew.put("sldg_dodate","");
            jsNew.put("sldg_remark","");
            jsNew.put("sldg_isgstinclusive","");
            jsNew.put("sldl_lineno",0);
            jsNew.put("sldl_stockidx",0);
            jsNew.put("sldl_stockcode","");
            jsNew.put("sldl_uomcode","");
            jsNew.put("sldl_uomidx",0);
            jsNew.put("sldl_unitcost",0);
            jsNew.put("sldl_qty",0);
            jsNew.put("sldl_discamt",0);
            jsNew.put("sldl_subtotalamt",0);
            jsNew.put("sldl_discpercent",0);
            jsNew.put("sldl_discoption",0);
            jsNew.put("sldl_expirydate","");
            jsNew.put("sldl_batchno","");
            jsNew.put("sldl_pono","");
            jsNew.put("sldl_location","");
            jsNew.put("sldl_poqty",0);
            jsNew.put("sldl_bonusqty",0);
            jsNew.put("sldl_pobonusqty",0);
            jsNew.put("sldl_polineno",0);
            jsNew.put("sldl_poidx",0);
            jsNew.put("sldl_convuomidx",0);
            jsNew.put("sldl_convqty",0);
            jsNew.put("sldl_convunitcost",0);
            jsNew.put("sldl_convuomcode",0);
            jsNew.put("sldl_unitprice",0);
            jsNew.put("sldl_gstpurcode","");
            jsNew.put("sldl_gsttaxrates",0);
            jsNew.put("sldl_gstamt",0);
            jsNew.put("sldl_grosstotal",0);
            jsNew.put("systemname","PORTAL");
            jsNew.put("By","");
            jsNew.put("recstatus","1");    
            jsNew.put("CONTROL_DATETIME",sControlDatetime); 
            
           
             
            BLL_Common.Common_Object objLedgerHdr = BusinessLogic.Servlet_StockLedger.UPDATE_STOCK_LEDGER(SiteName, jsNew);  
            
            if (objLedgerHdr.getObjectArray(0).toString().equals("00000")) {
                
                sLedgerHdrIdx = objLedgerHdr.getObjectArray(2).toString();
            } else {
                return -1;
            }
            
            if (sStatus.equals("A"))
            {
                JSONObject jsRecv = jsNew;
                jsRecv.replace("sldg_location", sRecvLocation);
                BLL_Common.Common_Object objRecvLedgerHdr = BusinessLogic.Servlet_StockLedger.UPDATE_STOCK_LEDGER(SiteName, jsRecv);              
                if (objRecvLedgerHdr.getObjectArray(0).toString().equals("00000")) {

                    sRecvLedgerHdrIdx = objRecvLedgerHdr.getObjectArray(2).toString();
                } else {
                    return -1;
                }      
            }
            
            
            for (Object js : RetItem_array) { //iterate each item
                              
                JSONObject RetItemjson = (JSONObject) js;              
                String ItemRetHdrIdx = RetItemjson.get("RETHDRIDX").toString();
                String ItemStatus = RetItemjson.get("STATUS").toString();
                
                //if (ItemRetHdrIdx.equals(sRetHdrIdx) && (ItemStatus.equals("A"))) { 
                if (ItemRetHdrIdx.equals(sRetHdrIdx) && (ItemStatus.equals(sStatus))) { 

                    jsNew = new JSONObject();                             
                    jsNew.put("HEADER_DETAIL", "DETAIL");
                    jsNew.put("FUNCTION","INSERT");
                    jsNew.put("StockLedgerHdrIdx",sLedgerHdrIdx);
                    jsNew.put("StockLedgerDtlIdx",0);
                    jsNew.put("sldg_company",sCompCode);
                    jsNew.put("sldg_location",sLocCode);
                    jsNew.put("sldg_finyear",year);
                    jsNew.put("sldg_finperiod",mth);
//                    jsNew.put("sldg_reasoncode","WROFF");
//                    jsNew.put("sldg_trxtype","WROFF"); 
                    jsNew.put("sldg_reasoncode",sReason);
                    jsNew.put("sldg_trxtype",sTrxType); 
                    
                    //String dQty = RetItemjson.get("ACCEPTED_QTY").toString();
                    //double dRevQty = Double.parseDouble(dQty) * -1;                    
                    
                    double dQty = Double.parseDouble(RetItemjson.get("ACCEPTED_QTY").toString()) ;                    
                    //jsNew.put("sldl_qty",RetItemjson.get("ACCEPTED_QTY").toString()); 
                    jsNew.put("sldl_qty",dQty * -1); 
                    
                    jsNew.put("sldg_suppliercode","");
                    jsNew.put("sldg_intercompanysupplier","");
                    jsNew.put("sldg_docno",sDocNo);
                    jsNew.put("sldg_docdate",sDocDate);
                    jsNew.put("sldg_refno","");
                    jsNew.put("sldg_refdate","");
                    jsNew.put("sldg_invno","");
                    jsNew.put("sldg_invdate","");
                    jsNew.put("sldg_dono","");
                    jsNew.put("sldg_dodate","");
                    jsNew.put("sldg_remark","");
                    jsNew.put("sldg_isgstinclusive","");
                    jsNew.put("sldl_lineno",0);
                    jsNew.put("sldl_stockidx",0);
                    jsNew.put("sldl_stockcode",RetItemjson.get("STKCODE").toString());
                    jsNew.put("sldl_uomcode",RetItemjson.get("UOMCODE").toString());
                    jsNew.put("sldl_uomidx",0);
                    jsNew.put("sldl_unitcost",RetItemjson.get("UNITCOST").toString());                
                    jsNew.put("sldl_discamt",0);
                    jsNew.put("sldl_subtotalamt",0);
                    jsNew.put("sldl_discpercent",0);
                    jsNew.put("sldl_discoption",0);
                    if (RetItemjson.get("EXPIRYDATE") != null)
                        jsNew.put("sldl_expirydate",RetItemjson.get("EXPIRYDATE").toString());
                    else
                        jsNew.put("sldl_expirydate","");
                    jsNew.put("sldl_batchno",RetItemjson.get("BATCHNO").toString());
                    jsNew.put("sldl_pono","");
                    jsNew.put("sldl_location",sLocCode);
                    jsNew.put("sldl_poqty",0);
                    jsNew.put("sldl_bonusqty",0);
                    jsNew.put("sldl_pobonusqty",0);
                    jsNew.put("sldl_polineno",0);
                    jsNew.put("sldl_poidx",0);
                    jsNew.put("sldl_convuomidx",0);
                    jsNew.put("sldl_convqty",dQty * -1);
                    jsNew.put("sldl_convunitcost",RetItemjson.get("UNITCOST").toString());
                    jsNew.put("sldl_convuomcode",RetItemjson.get("UOMCODE").toString());
                    jsNew.put("sldl_unitprice",0);
                    jsNew.put("sldl_gstpurcode","");
                    jsNew.put("sldl_gsttaxrates",0);
                    jsNew.put("sldl_gstamt",0); //not included, if needed pls recalculate base on qty transferred
                    jsNew.put("sldl_grosstotal",0);
                    jsNew.put("systemname","PORTAL");
                    jsNew.put("By","");
                    jsNew.put("recstatus","1");    
                    jsNew.put("CONTROL_DATETIME",sControlDatetime);

                    BLL_Common.Common_Object objLedgerDtl = BusinessLogic.Servlet_StockLedger.UPDATE_STOCK_LEDGER(SiteName, jsNew);             
                    if (objLedgerDtl.getObjectArray(0).toString().equals("00000")) {
                        
                        objLedgerDtl.commit();
                        bReturn = true;
                    }
                    else {
                        objLedgerDtl.rollback();
                    }
                    
                    if (sStatus.equals("A"))
                    {
                        JSONObject jsRecv =jsNew;                             
                     
                        jsRecv.replace("StockLedgerHdrIdx",sRecvLedgerHdrIdx);
                        jsRecv.replace("sldg_location",sRecvLocation);
                        jsRecv.replace("sldl_location",sRecvLocation);
                        //jsNew.put("sldl_qty",RetItemjson.get("ACCEPTED_QTY").toString()); 
                        jsRecv.replace("sldl_qty",dQty); 

                        BLL_Common.Common_Object objRecvLedgerDtl = BusinessLogic.Servlet_StockLedger.UPDATE_STOCK_LEDGER(SiteName, jsRecv);             
                        if (objRecvLedgerDtl.getObjectArray(0).toString().equals("00000")) {

                            objRecvLedgerDtl.commit();
                            bReturn = true;
                        }
                        else {
                            objRecvLedgerDtl.rollback();
                        }
                    }
                }               
            }
        }
        return iRecsMatached;
    }                       
}