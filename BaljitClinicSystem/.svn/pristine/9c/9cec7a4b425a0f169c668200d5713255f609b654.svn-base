package BusinessLogic;

import BusinessData.DAL_Stock;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JSONException;

import org.apache.commons.collections.CollectionUtils;
import BusinessData.DAL_Supplier;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Iterator;
import javax.servlet.http.Part;
import net.sf.json.JSONSerializer;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author N0535
 */
@WebServlet(name = "Servlet_Supplier", urlPatterns = {"/Servlet_Supplier"})
public class Servlet_Supplier extends HttpServlet{
    
    public void Bind_Supplier_List(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException 
    {
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        String sSupCode = "";
        String sSupName = "";
        String sSupCatFrom = "";
        String sSupCatTo = "";
        String sSupStatus = "";
        String sSupState = "";
        String sSupCountry = "";

        JSONObject json = new JSONObject();

        //Get page and rows value from JSP page
        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));
        sSupCode = request.getParameter("SUPCODE");
        sSupName = request.getParameter("SUPNAME");
        sSupCatFrom = request.getParameter("SUPCATFROM");
        sSupCatTo = request.getParameter("SUPCATTO");
        sSupStatus = request.getParameter("SUPSTATUS");
        sSupState = request.getParameter("SUPSTATE");
        sSupCountry = request.getParameter("SUPCOUNTRY");

        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord"); 
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }

        //Calculate offset value
        //int offset = (page - 1) * rows;
        DAL_Supplier DAL_supplier = new DAL_Supplier();

        int total = 0;
        double pageval = 0;

        BLL_Common.Common_Object SignUpList = DAL_supplier.DAL_GET_SUPPLIERLIST(SiteName, new String[]{
            "GET_SUPPLIER_LIST", sSupCode, sSupName, sSupCatFrom, sSupCatTo, sSupStatus, sSupState, sSupCountry, sOrder, Integer.toString(page), Integer.toString(rows)});

        BLL_Common.Common_Object SignUpTotalRow = DAL_supplier.DAL_GET_SUPPLIERLIST(SiteName, new String[]{
            "COUNT_SUPPLIER_LIST", sSupCode, sSupName, sSupCatFrom, sSupCatTo, sSupStatus, sSupState, sSupCountry, "", "", ""});

        //Execute all queries here
        try {

            total = SignUpTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", SignUpList.getJSONArray(0));

            //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }

        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    
    public void Bind_Supplier_Detail(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException
    {
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        PrintWriter out = response.getWriter();
        response.setContentType("text/json");
        //JSON object
        JSONObject json = new JSONObject();

        try {
            String sSupCode = request.getParameter("SUPCODE");
             DAL_Supplier SupDetail = new DAL_Supplier();
             BLL_Common.Common_Object rsSupDetail = SupDetail.DAL_GET_SUPPLIERLIST(SiteName, new String[]{
             "SUPPLIER_DETAIL", sSupCode, "", "", "", "", "", "", "", "", ""});
              json.put("rows", rsSupDetail.getJSONArray(0));
              out.print(rsSupDetail.getJSONArrayAsJSONObject("object"));
             

        } catch (Exception e) {
            out.println("Exception Error.");
            e.printStackTrace();
        } finally {
           // BLL_Common.closeResultSet(rs,"");
        }
    }
    
    protected void INSERT_SUPPLIER(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
        //JSONParser parser = new JSONParser();
        //boolean return_bool = false;
        //String return_msg = "";

        String sMessage = "";
        JSONArray jsonSupplier = JSONArray.fromObject(request.getParameter("ADDSUP"));
        String sMode = request.getParameter("MODE");
        DAL_Supplier obj_supplier = new DAL_Supplier();
        String[] arySupplier = {
            sMode /*sMethod VARCHAR(30)*/,
            "" /*1-sSupCode           varchar(10)*/,
            ""/*""/*2-sSupName           varchar(100)*/,
            ""/*""/*3-sSupAdd1           varchar(50)*/,
            ""/*""/*4-sSupAdd2           varchar(50)*/,
            ""/*""/*5-sSupAdd3           varchar(50)*/,
            ""/*""/*6-sSupPostCode       varchar(10)*/,
            ""/*""/*7-sSupTelephone      varchar(20)*/,
            ""/*""/*8-sSupFax            varchar(20)*/,
            ""/*""/*9-sSupCountry        varchar(6)*/,
            ""/*""/*10-sSupArea           varchar(6)*/,
            ""/*""/*11-sSupState          varchar(6)*/,
            ""/*""/*12-sRemarks           varchar(100)*/,
            ""/*""/*13-sContactPerson     varchar(100)*/,
            ""/*""/*14-sIsActive          varchar(1)*/,
            ""/*""/*15-sBusinessRegNo     varchar(20)*/,
            ""/*""/*16-sAccountGroup      varchar(20)*/,
            ""/*""/*17-sBusinessType      varchar(20)*/,
            ""/*""/*18-sAgent             varchar(20)*/,
            "0"/*""/*19-sCreditTerm        INTEGER*/,
            "0"/*""/*20-sCreditLimit       Numeric(15,3)*/,
            ""/*""/*21-sAgingOn           varchar(1)*/,
            ""/*""/*22-sCurrencyCode      varchar(6)*/,
            "Y"/*""/*23-sIsGST             varchar(1)*/,
            ""/*""/*24-sGSTCode           varchar(8)*/,
            ""/*""/*25-sGSTRegNo          varchar(20)*/,
            "N"/*""/*26-sGSTInclusive      varchar(1)*/,
            ""/*""/*27-sProductGroup      varchar(6)*/,
            ""/*""/*28-sWebsite           varchar(50)*/,
            ""/*""/*29-sEmail             varchar(50)*/,
            "0"/*""/*30-iInvoiceLimit     Numeric(15,3)*/,
            "N"/*31-sIsBrandOwner          varchar(10)*/,
            ""/*""/*32-sBy                varchar(10)*/,
            ""/*""/*33-srecstatus         varchar(4)*/};

        int length = jsonSupplier.size();
        for (int i = 0; i < length; i++) {
            JSONObject jsonObject = jsonSupplier.getJSONObject(i);
            String tempValue = jsonObject.getString("value");

            if (jsonObject.getString("name").equals("txtSupCode")) {
                arySupplier[1] = tempValue.toUpperCase();
            } else if (jsonObject.getString("name").equals("txtSupName")) {
                arySupplier[2] = tempValue.toUpperCase();
            } else if (jsonObject.getString("name").equals("txtAdd1")) {
                arySupplier[3] = tempValue.toUpperCase();
            } else if (jsonObject.getString("name").equals("txtAdd2")) {
                arySupplier[4] = tempValue.toUpperCase();
            } else if (jsonObject.getString("name").equals("txtAdd3")) {
                arySupplier[5] = tempValue.toUpperCase();
            } else if (jsonObject.getString("name").equals("txtPostCode")) {
                arySupplier[6] = tempValue.toUpperCase();
            } else if (jsonObject.getString("name").equals("txtPhone")) {
                arySupplier[7] = tempValue.toUpperCase();
            } else if (jsonObject.getString("name").equals("txtFax")) {
                arySupplier[8] = tempValue.toUpperCase();                 
            } else if (jsonObject.getString("name").equals("ddlCountry")) {
                arySupplier[9] = tempValue.toUpperCase();
            } else if (jsonObject.getString("name").equals("ddlArea")) {
                arySupplier[10] = tempValue.toUpperCase();
            } else if (jsonObject.getString("name").equals("ddlState")) {
                arySupplier[11] = tempValue.toUpperCase();
            } else if (jsonObject.getString("name").equals("txtRemarks")) {
                arySupplier[12] = tempValue.toUpperCase();
            }else if (jsonObject.getString("name").equals("txtAttention")) {
                arySupplier[13] = tempValue.toUpperCase();
            } else if (jsonObject.getString("name").equals("ddlStatus")) {
                arySupplier[14] = tempValue.toUpperCase();
            }else if (jsonObject.getString("name").equals("txtRegNo")) {
                arySupplier[15] = tempValue.toUpperCase();
            }else if (jsonObject.getString("name").equals("ddlAccGrp")) {
                arySupplier[16] = tempValue.toUpperCase();
            }else if (jsonObject.getString("name").equals("txtBusiness")) {
                arySupplier[17] = tempValue.toUpperCase();
            }else if (jsonObject.getString("name").equals("txtAgent")) {
                arySupplier[18] = tempValue.toUpperCase();
            }else if (jsonObject.getString("name").equals("txtCreditTerm")) {
                if (!tempValue.toUpperCase().equals("")){
                arySupplier[19] = tempValue.toUpperCase();}
            }else if (jsonObject.getString("name").equals("txtCreditLimit")) {
                if (!tempValue.toUpperCase().equals("")){
                arySupplier[20] = tempValue.toUpperCase();}
            }else if (jsonObject.getString("name").equals("rdAging")) {
                arySupplier[21] = tempValue.toUpperCase();
            }else if (jsonObject.getString("name").equals("ddlCurrency")) {
                arySupplier[22] = tempValue.toUpperCase();
            }else if (jsonObject.getString("name").equals("chkGSTSup")) {
                if (tempValue.toUpperCase().equals("N")){
                arySupplier[23] = tempValue.toUpperCase();}
            }else if (jsonObject.getString("name").equals("ddlGSTCode")) {
                arySupplier[24] = tempValue.toUpperCase();
            }else if (jsonObject.getString("name").equals("txtGstReg")) {
                arySupplier[25] = tempValue.toUpperCase();
            }else if (jsonObject.getString("name").equals("chkGSTInc")) {
                if(tempValue.toUpperCase().equals("Y")){
                arySupplier[26] = tempValue.toUpperCase();}
            }else if (jsonObject.getString("name").equals("ddlCategory")) {
                arySupplier[27] = tempValue.toUpperCase();
            }else if (jsonObject.getString("name").equals("txtWebsite")) {
                arySupplier[28] = tempValue.toUpperCase();
            }else if (jsonObject.getString("name").equals("txtEmail")) {
                arySupplier[29] = tempValue.toUpperCase();
            }else if (jsonObject.getString("name").equals("txtInvLimit")) {
                if (!tempValue.toUpperCase().equals("")){
                arySupplier[30] = tempValue.toUpperCase();}
            }else if (jsonObject.getString("name").equals("chkIsBrandOwner")) {
                if (!tempValue.toUpperCase().equals("")){
                    arySupplier[31] = tempValue.toUpperCase();} 
            }   else if (jsonObject.getString("name").equals("chkrecstatus")) {
                if (!tempValue.toUpperCase().equals("")){
                    arySupplier[33] = tempValue.toUpperCase();
                } 
            }            
        }
        
        BLL_Common.Common_Object obj = obj_supplier.DAL_ADDEDIT_SUPPLIER(SiteName, arySupplier);
        boolean bReturn = false;

        try {
            if (obj.getObjectArray(0).toString().equals("00000")) {
                obj.commit();             
                bReturn = true;
                sMessage = obj.getObjectArray(1).toString();
            } else {
                obj.rollback();
            }
        } catch (Exception e) {
            try {
                obj.rollback();
            } catch (SQLException ex) {
                bReturn = false;
            }
        }

        json.put("bool", bReturn);
        json.put("msg", sMessage);

        out.println(json);
    }
    
    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        // processRequest(request, response);
         String p_method = null;
        p_method = request.getParameter("SFC");
        
        if (p_method.equals("GET_SUP_DETAIL")) {
            try {
                Bind_Supplier_Detail(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }      
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // processRequest(request, response);
        String p_method = null;
        p_method = request.getParameter("SFC");

        if (p_method.equals("GET_SUPPLIER_LIST")) {
            try {
                Bind_Supplier_List(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else if (p_method.equals("INSERT_SUPPLIER")) {
            try {
                INSERT_SUPPLIER(request, response);
           } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        else if (p_method.equals("UPDATE_SUPPLIER")) {
            try {
                INSERT_SUPPLIER(request, response);
           } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
}
