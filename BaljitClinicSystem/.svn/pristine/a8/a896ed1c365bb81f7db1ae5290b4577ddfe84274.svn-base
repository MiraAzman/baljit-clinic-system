package BusinessLogic;
import java.math.RoundingMode;
import java.text.DecimalFormat;

import BusinessData.DAL_PopulateData;
import BusinessData.DAL_Stock;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JSONException;

import org.apache.commons.collections.CollectionUtils;
import BusinessData.DAL_StockCostQty;
import BusinessData.DAL_StockReq;
import BusinessData.DAL_StockTransfer;
import static BusinessLogic.Servlet_Stock.Product_Pricing;
import static BusinessLogic.Servlet_Stock.TRX_UOM_CONVERT;


import java.util.Iterator;
import net.sf.json.JSONSerializer;
import org.json.simple.parser.JSONParser;

/**
 *
 * 1) 2016-01-15 By CPK Add UOM Conversion
 */
@WebServlet(name = "Servlet_StockTransfer", urlPatterns = {"/Servlet_StockTransfer"})
public class Servlet_StockCostQty extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet Servlet_StockTransfer</title>");            
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet Servlet_StockTransfer at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // processRequest(request, response);
        String p_method = null;
        p_method = request.getParameter("SFC");

        if (p_method.equals("GET_STOCK_COSTQTY_DETAILS")) {
            try {
                DAL_GET_STOCK_COSTQTY_DETAILS(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }
        else if (p_method.equals("GET_STOCK_COSTQTY_DETAILS")) {
            try {
                DAL_GET_STOCK_COSTQTY_DETAILS(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }

    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // processRequest(request, response);
        String p_method = null;
        p_method = request.getParameter("SFC");

//        if (p_method.equals("COMPANY_STOCK_BAL")) {
//            try {
//                Bind_Company_StockBalance_List(request, response);
//            } catch (SQLException e) {
//                e.printStackTrace();
//           
//            } 
//        }
//        else if (p_method.equals("GET_LOCATION_STK_BAL")) {
//            try {
//                GET_LOCATION_STK_BAL(request, response);
//            } catch (SQLException e) {
//                e.printStackTrace();
//           
//            } 
//        }
//        else if (p_method.equals("CREATE_STOCK_TRANSFER")) {
//            try {
//                CREATE_STOCK_TRANSFER(request, response);
//            } catch (SQLException e) {
//                e.printStackTrace();
//           
//            } 
//        }
    }
    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

        
    public void DAL_GET_STOCK_COSTQTY_DETAILS(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        String sCompCode = "";
        String sStkCode = "";
        String sMethod = "";         
        String sLocation = "";
        String sSortBy = "";
        String sConvUOM = "";

        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        sMethod = request.getParameter("METHOD");
        sStkCode = request.getParameter("STKCODE");
        sCompCode = request.getParameter("COMPCODE");
        sLocation = request.getParameter("LOCATIONCODE");
        sSortBy = request.getParameter("SORT");
        sConvUOM = request.getParameter("CONVUOM");
        
        DAL_StockCostQty LocStkBalList = new DAL_StockCostQty();
        
       
        BLL_Common.Common_Object obj = LocStkBalList.DAL_GET_STOCK_COSTQTY_DETAILS
        (SiteName, new String[]{sMethod,sStkCode, sConvUOM, sCompCode, sLocation, sSortBy});
           
        //Execute all queries here
        try {

            json.put("rows", obj.getJSONArray(0));

            //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }

        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    
   public static boolean UPDATE_STOCK_COSTQTY(String SiteName, JSONObject JsonStkCostQty) throws IOException, SQLException {
        boolean b = false;
        String sMethod = null;
        DAL_StockCostQty objUpdStkCostQty = new DAL_StockCostQty();
        BLL_Common.Common_Object objStkCostQty = new BLL_Common.Common_Object();
//        JSONArray aryStkCostQty = (JSONArray) JSONSerializer.toJSON(JsonStkCostQty);
        int i=0;
//        if (aryStkCostQty.size() > 0) {
//            for (Object js : aryStkCostQty) {
//                JSONObject StkCostQtyjson = (JSONObject) js;
//                JSONObject StkCostQtyjson = (JSONObject) JsonStkCostQty;
                sMethod = "ADD_COSTQTY";
                
                switch (JsonStkCostQty.getString("FUNCTION")) {
                    case "INSERT":
                        sMethod = "ADD_COSTQTY";
                        break;
                    case "UPDATE":
                        sMethod = "UPDATE_COSTQTY";
                        break;
                    case "DELETE":
                        sMethod = "DEL_COSTQTY";
                        break;
                    case "UPDATE_EX":
                        sMethod = "UPD_COSTQTY_EX";
                        break;
                    case "NO":
                        break;
                }

                if (sMethod != null) {
                    i=i+1;
                    
                    String ExpDate = JsonStkCostQty.get("scq_expirydate").toString();
                    String RecvDate = JsonStkCostQty.get("scq_receiveddate").toString();
                    
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MMM-dd");
                    java.util.Date parsedDate;
                    try {
                    parsedDate = dateFormat.parse(ExpDate);
                    dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    ExpDate = dateFormat.format(parsedDate);
                    }
                    catch(java.text.ParseException e){
                        ExpDate = "";
                    }
                    
                    try
                    {
                    parsedDate = dateFormat.parse(RecvDate);
                    dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    RecvDate = dateFormat.format(parsedDate);
                    }
                    catch(java.text.ParseException e){
                        RecvDate="";
                    }
    
                    String[] aryItm = {
                        sMethod /* 0 - sMethod VARCHAR(30)*/,
                        
      
    
    
                        JsonStkCostQty.get("scq_costqtyidx").toString().toUpperCase() /* 1 - sSCQCostQtyIdx Integer */,
                        JsonStkCostQty.get("scq_companycode").toString().toUpperCase() /* 2 - sSCQCompanyCode varchar(10) */,
                        JsonStkCostQty.get("scq_locationcode").toString().toUpperCase() /* 3 - sSCQLocationCode varchar(10) */,
                        JsonStkCostQty.get("scq_stockcode").toString().toUpperCase() /* 4 - sSCQStockCode varchar(10) */,
                        JsonStkCostQty.get("scq_stockidx").toString().toUpperCase() /* 5 - sSCQStockIdx Integer */,
                        JsonStkCostQty.get("scq_batchno").toString().toUpperCase() /* 6 - sSCQBatchNo varchar(10) */,
                         JsonStkCostQty.get("scq_expirydate").toString().toUpperCase() /* 7 - sSCQExpiryDate datetime */,
                        
                        JsonStkCostQty.get("scq_unitcost").toString().toUpperCase() /* 8 - sSCQUnitcCost varchar(20) */,
                        JsonStkCostQty.get("scq_uomcode").toString().toUpperCase() /* 9 - sSCQUOMCode varchar(6) */,
                        JsonStkCostQty.get("scq_uomidx").toString().toUpperCase() /* 10 - sSCQUOMIdx Integer */,
                        JsonStkCostQty.get("scq_qty").toString().toUpperCase() /* 11 - sSCQQty varchar(20) */,
                         JsonStkCostQty.get("scq_receiveddate").toString().toUpperCase() /* 12 - sSCQReceivedDate datetime */,
                        
                        JsonStkCostQty.get("scq_xfrdtlidx").toString().toUpperCase() /* 13 - scq_xfrdtlidx */,
                        
                        JsonStkCostQty.get("BY").toString().toUpperCase() /* 14 - sBy varchar(10) */,
                        JsonStkCostQty.get("recstatus").toString().toUpperCase() /* 15 - srecstatus varchar(4) */,
                            
                        JsonStkCostQty.get("dataexchangestatus").toString().toUpperCase() /* 16   */,
                        JsonStkCostQty.get("dataexchangeqty").toString() /* 17   */
                        
 //PENGKEE HERE - CHK ALL DATE FORMAT                       
                        };
                    
                    objStkCostQty = objUpdStkCostQty.DAL_UPDATE_STOCK_COSTQTY(SiteName, aryItm);
                    // System.out.println();
                    if (objStkCostQty.getObjectArray(0).toString().equals("00000")) {
                        sMethod = null;
                        objStkCostQty.commit();
                        b = objStkCostQty.getObjectArray(0).toString().equals("00000");
                        JsonStkCostQty.put("scq_costqtyidx",objStkCostQty.getObjectArray(2).toString());
                    } else {
                        sMethod = null;
                        objStkCostQty.rollback();
                    }
                }
//            }
//        }

        return b;//objStkCostQty.getObjectArray(0).toString().equals("00000");
    }
   
    
    
    public static JSONArray UpdateStockCostQty(HttpServletRequest request, String JsonXferItem, String[] sIn) throws ServletException, IOException, SQLException {
    //public static boolean UpdateStockCostQty(String JsonXferItem, String[] sIn) throws ServletException, IOException, SQLException {
    
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        boolean b = false;
         
        DAL_StockCostQty objUpdStkCostQty = new DAL_StockCostQty();
        DAL_StockReq objUpdReq = new DAL_StockReq();
        JSONArray aryProcessedCostQty = new JSONArray();
        
        
        String sStkCode = sIn[0];
        String sCompCode = sIn[1];
            
        String sLocation = sIn[2];
        String sConvUOM = sIn[5];
//        double dAvailQty = Double.parseDouble(sIn[4]);
        String sSortBy = "FIFO";
        String sMethod = "GET_DETAILS";     
        //JSON object
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
               
        BLL_Common.Common_Object obj = objUpdStkCostQty.DAL_GET_STOCK_COSTQTY_DETAILS
        (SiteName, new String[]{sMethod,sStkCode, sConvUOM, sCompCode, sLocation, sSortBy});
        JSONArray StkCostQty_array = obj.getJSONArray(0);
                       
        ArrayList aryUpdCostQty = new ArrayList();       
        String[] sCostQty = new String[2];
        
        
        JSONArray aryXferItem = (JSONArray) JSONSerializer.toJSON(JsonXferItem);
         
        if (aryXferItem.size() > 0) 
        {
            for (Object js : aryXferItem) 
            {
                aryUpdCostQty = new ArrayList(); 
                                               
                JSONObject XferItemJs = (JSONObject) js;
                
                String sStatus = XferItemJs.get("STATUS").toString();
                 
                double dXfrQty = Double.parseDouble(XferItemJs.get("XFER_QTY").toString());
                String sUOMFrom = XferItemJs.get("UOM_FROM").toString();
                String sUOMTo = XferItemJs.get("UOM_TO").toString();
                String sLocationTo = XferItemJs.get("LOCATION_TO").toString();
                double dTaken = 0;
                if (StkCostQty_array.size() > 0) 
                {
                    for (Object jsStkCostQty : StkCostQty_array) 
                    {
                        if (dXfrQty <= 0)
                            break;
                        
                        JSONObject StkCostQtyjson = (JSONObject) jsStkCostQty;                
                        //double dAvailQty = Double.parseDouble(StkCostQtyjson.get("scq_qty").toString());
                        double dAvailQty = Double.parseDouble(StkCostQtyjson.get("CONVERTED_QTY").toString());
                        if (dAvailQty > 0)
                        {
                            if (dAvailQty >= dXfrQty)
                            {
                                sCostQty = new String[2];
                                sCostQty[0] = StkCostQtyjson.get("scq_costqtyidx").toString();
                                sCostQty[1] = Double.valueOf(dXfrQty).toString();
                                aryUpdCostQty.add(sCostQty);
                                                                
                                dAvailQty = dAvailQty - dXfrQty;
                                dTaken = dTaken + dXfrQty;
                                dXfrQty = 0; 
//                                StkCostQtyjson.put("scq_qty", dAvailQty);
                            }
                            else
                            {
                                sCostQty = new String[2];
                                sCostQty[0] = StkCostQtyjson.get("scq_costqtyidx").toString();
                                sCostQty[1] = Double.valueOf(dAvailQty).toString();
                                aryUpdCostQty.add(sCostQty);
                                
                                dTaken = dTaken + dAvailQty;
                                dXfrQty = dXfrQty - dAvailQty;    
                                dAvailQty = 0;
//                                StkCostQtyjson.put("scq_qty", dAvailQty);
                            }
                        }
                    }
                }
            

                if (aryUpdCostQty.size() > 0)
                {

                    for (Object objIdx : aryUpdCostQty) 
                    {
                        String[] sIdx = (String[])objIdx;
                        String sStkCostQtyIdx = (String)sIdx[0];
                        String sDeductQty = (String)sIdx[1];
                        for (Object jsStkCostQty : StkCostQty_array) 
                        {
                            JSONObject StkCostQtyjson = (JSONObject) jsStkCostQty;                
                            //double dAvailQty = Double.parseDouble(StkCostQtyjson.get("scq_qty").toString());
                            double dAvailQty = Double.parseDouble(StkCostQtyjson.get("CONVERTED_QTY").toString());
                            double dRemainQty = dAvailQty - Double.parseDouble(sDeductQty);
                            //StkCostQtyjson.put("scq_qty", dRemainQty);
                            StkCostQtyjson.put("CONVERTED_QTY", dRemainQty);
                            String Idx = StkCostQtyjson.get("scq_costqtyidx").toString();

                            if (Idx == sStkCostQtyIdx)
                            {                            
                                JSONObject jsNew = new JSONObject();                             
                                jsNew.put("FUNCTION", "INSERT");
                                jsNew.put("scq_costqtyidx", "0");
                                jsNew.put("scq_companycode", StkCostQtyjson.get("scq_companycode").toString());
                                jsNew.put("scq_locationcode", sLocationTo);
                                jsNew.put("scq_stockcode", StkCostQtyjson.get("scq_stockcode").toString());
                                jsNew.put("scq_stockidx", StkCostQtyjson.get("scq_stockidx").toString());
                                jsNew.put("scq_batchno", StkCostQtyjson.get("scq_batchno").toString());
                                try
                                {
                                    jsNew.put("scq_expirydate", StkCostQtyjson.get("scq_expirydate").toString());
                                }
                                catch (Exception e) 
                                {jsNew.put("scq_expirydate", "");}
//PENGKEE
                                jsNew.put("scq_unitcost", StkCostQtyjson.get("scq_unitcost").toString());
                                //jsNew.put("scq_uomcode", StkCostQtyjson.get("scq_uomcode").toString());
                                jsNew.put("scq_uomcode", sConvUOM);
                                jsNew.put("scq_uomidx", StkCostQtyjson.get("scq_uomidx").toString());
                                jsNew.put("scq_qty", sDeductQty);
//                                jsNew.put("createdby", StkCostQtyjson.get("createdby").toString());
//                                jsNew.put("createddt", StkCostQtyjson.get("createddt").toString());
//                                jsNew.put("modifiedby", StkCostQtyjson.get("modifiedby").toString());
//                                jsNew.put("modifieddt", StkCostQtyjson.get("modifieddt").toString());
                                jsNew.put("BY", (String) session.getAttribute("loginid"));
                                jsNew.put("recstatus", "1");
//                                jsNew.put("systemname", StkCostQtyjson.get("systemname").toString());
                                try
                                {
                                    jsNew.put("scq_receiveddate", StkCostQtyjson.get("scq_receiveddate").toString());
                                }
                                 catch (Exception e) 
                                 {
                                     jsNew.put("scq_receiveddate","");
                                 }
                                jsNew.put("scq_xfrdtlidx", XferItemJs.get("XFERDTLIDX").toString());
                             
                                jsNew.put("dataexchangestatus", "I");
                                jsNew.put("dataexchangeqty", sDeductQty);
                    
//                                UPDATE_STOCK_COSTQTY(jsNew.toString()); //INSERT 
                                if (sStatus.equals("R"))
                                {
                                }
                                else
                                {
                                    UPDATE_STOCK_COSTQTY(SiteName, jsNew); //INSERT
                                    aryProcessedCostQty.add(jsNew);
                                }
                                    
                                
                                JSONObject jsUpdStkBal = new JSONObject();  //pengkee here
                                
                                if (sStatus.equals("R"))
                                {
                                    jsUpdStkBal.put("FUNCTION", "UPDATE_TEMPORARY_STOCK_BALANCE");
                                    jsUpdStkBal.put("bal_companycode", StkCostQtyjson.get("scq_companycode").toString());
                                    jsUpdStkBal.put("bal_location", sLocationTo);
                                    jsUpdStkBal.put("bal_stockcode", StkCostQtyjson.get("scq_stockcode").toString());
                                    //jsUpdStkBal.put("bal_uom", StkCostQtyjson.get("scq_uomcode").toString());                                
                                    jsUpdStkBal.put("bal_uom", sConvUOM);                                
                                    //jsUpdStkBal.put("UpdateQty", sDeductQty); 
                                    jsUpdStkBal.put("UpdateQty", "-" + sDeductQty);    //deduct qty
                                    jsUpdStkBal.put("BY", (String) session.getAttribute("loginid"));
                                    jsUpdStkBal.put("recstatus", "1");
                                }
                                else
                                {
                                    jsUpdStkBal.put("FUNCTION", "UPDATE_STOCK_BALANCE");
                                    jsUpdStkBal.put("bal_companycode", StkCostQtyjson.get("scq_companycode").toString());
                                    jsUpdStkBal.put("bal_location", sLocationTo);
                                    jsUpdStkBal.put("bal_stockcode", StkCostQtyjson.get("scq_stockcode").toString());
                                    //jsUpdStkBal.put("bal_uom", StkCostQtyjson.get("scq_uomcode").toString());                                
                                    jsUpdStkBal.put("bal_uom", sConvUOM);                                
                                    jsUpdStkBal.put("UpdateQty", sDeductQty);    
                                    jsUpdStkBal.put("BY", (String) session.getAttribute("loginid"));
                                    jsUpdStkBal.put("recstatus", "1");
                                }
                                BusinessLogic.Servlet_Stock.UPDATE_STOCK_BALANCE(jsUpdStkBal, SiteName);

                                JSONObject jsUpd = new JSONObject();     
                                jsNew = new JSONObject();                             
                                jsUpd.put("FUNCTION", "UPDATE");
                                jsUpd.put("scq_costqtyidx", StkCostQtyjson.get("scq_costqtyidx").toString());
                                jsUpd.put("scq_companycode", StkCostQtyjson.get("scq_companycode").toString());
                                jsUpd.put("scq_locationcode", StkCostQtyjson.get("scq_locationcode").toString());
                                jsUpd.put("scq_stockcode", StkCostQtyjson.get("scq_stockcode").toString());
                                jsUpd.put("scq_stockidx", StkCostQtyjson.get("scq_stockidx").toString());
                                jsUpd.put("scq_batchno", StkCostQtyjson.get("scq_batchno").toString());
                                try
                                {
                                    jsUpd.put("scq_expirydate", StkCostQtyjson.get("scq_expirydate").toString());
                                }
                                catch(Exception e)
                                {
                                    jsUpd.put("scq_expirydate","");
                                }
                                jsUpd.put("scq_unitcost", StkCostQtyjson.get("scq_unitcost").toString());
                                //jsUpd.put("scq_uomcode", StkCostQtyjson.get("scq_uomcode").toString());
                                jsUpd.put("scq_uomcode", sConvUOM);
                                jsUpd.put("scq_uomidx", StkCostQtyjson.get("scq_uomidx").toString());                                 
                                jsUpd.put("scq_qty", Double.valueOf(dRemainQty).toString());
//                                jsNew.put("createdby", StkCostQtyjson.get("createdby").toString());
//                                jsNew.put("createddt", StkCostQtyjson.get("createddt").toString());
//                                jsNew.put("modifiedby", StkCostQtyjson.get("modifiedby").toString());
//                                jsNew.put("modifieddt", StkCostQtyjson.get("modifieddt").toString());
                                jsUpd.put("BY", (String) session.getAttribute("loginid"));
                                jsUpd.put("recstatus", "1");
//                                jsNew.put("systemname", StkCostQtyjson.get("systemname").toString());
                                try
                                {
                                    jsUpd.put("scq_receiveddate", StkCostQtyjson.get("scq_receiveddate").toString());                                 
                                }
                                catch (Exception e)
                                {
                                    jsUpd.put("scq_receiveddate", "");                                 
                                }
                                jsUpd.put("scq_xfrdtlidx", "");  
                                
                                jsUpd.put("dataexchangestatus", "I");
                                jsUpd.put("dataexchangeqty", Double.valueOf(sDeductQty) * -1 );
                                
//                                UPDATE_STOCK_COSTQTY(jsNew.toString()); //UPDATE
                                if (sStatus.equals("R"))
                                {
                                }
                                else
                                {
                                    UPDATE_STOCK_COSTQTY(SiteName, jsUpd); //UPDATE   
                                     aryProcessedCostQty.add(jsUpd);
                                }
                               
                                
                                jsUpdStkBal = new JSONObject();  
                                
                                 if (sStatus.equals("R"))
                                {
                                    jsUpdStkBal.put("FUNCTION", "UPDATE_TEMPORARY_STOCK_BALANCE");
                                   
                                    jsUpdStkBal.put("bal_companycode", StkCostQtyjson.get("scq_companycode").toString());
                                    jsUpdStkBal.put("bal_location", StkCostQtyjson.get("scq_locationcode").toString());
                                    jsUpdStkBal.put("bal_stockcode", StkCostQtyjson.get("scq_stockcode").toString());
    //                                jsUpdStkBal.put("bal_uom", StkCostQtyjson.get("scq_uomcode").toString()); 
                                    jsUpdStkBal.put("bal_uom", sConvUOM);  
                                    //jsUpdStkBal.put("UpdateQty", "-" + sDeductQty);    //deduct qty
                                    jsUpdStkBal.put("UpdateQty", sDeductQty); 
                                    jsUpdStkBal.put("BY", (String) session.getAttribute("loginid"));
                                    jsUpdStkBal.put("recstatus", "1");
                                }
                                else
                                {                                                                    
                                    jsUpdStkBal.put("FUNCTION", "UPDATE_STOCK_BALANCE");
                                    jsUpdStkBal.put("bal_companycode", StkCostQtyjson.get("scq_companycode").toString());
                                    jsUpdStkBal.put("bal_location", StkCostQtyjson.get("scq_locationcode").toString());
                                    jsUpdStkBal.put("bal_stockcode", StkCostQtyjson.get("scq_stockcode").toString());
    //                                jsUpdStkBal.put("bal_uom", StkCostQtyjson.get("scq_uomcode").toString()); 
                                    jsUpdStkBal.put("bal_uom", sConvUOM);  
                                    jsUpdStkBal.put("UpdateQty", "-" + sDeductQty);    //deduct qty
                                    jsUpdStkBal.put("BY", (String) session.getAttribute("loginid"));
                                    jsUpdStkBal.put("recstatus", "1");
                                }
                                BusinessLogic.Servlet_Stock.UPDATE_STOCK_BALANCE(jsUpdStkBal, SiteName);
                                
                                String[] sFulFilled = new String[5];
                                sFulFilled[0] = StkCostQtyjson.get("scq_stockcode").toString();
                                sFulFilled[1] = StkCostQtyjson.get("scq_companycode").toString();
                                sFulFilled[2] = sLocationTo;
                                sFulFilled[3] = sConvUOM;
                                sFulFilled[4] = sDeductQty;
                                BusinessLogic.Servlet_StockRequest.Update_Fulfilled_Qty(SiteName, sFulFilled);
                                
                                 
                            }

                        }
                    }
                }

            }
        }
        if (aryProcessedCostQty.size()>0)
        {
           return aryProcessedCostQty; 
        }
        else
        {
            return null;    
        }


    }
    
    public static boolean UpdateStockCostQty_StkReturn_bak(HttpServletRequest request, String JsonRetItem, String[] sIn) throws ServletException, IOException, SQLException {
    
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        boolean bReturn = false;              
               
        String sStkCode = sIn[0];
        String sCompCode = sIn[1];            
        String sLocCode = sIn[2];
        String sUOMCode = sIn[3]; 
        
        //pengkee 2018JUN08
        String sRetDtlIdx = sIn[8]; 
        String sRecvLocCode = sIn[9]; 
               
        DAL_StockCostQty objUpdStkCostQty = new DAL_StockCostQty(); //get details of existing record
        BLL_Common.Common_Object obj = objUpdStkCostQty.DAL_GET_STOCK_COSTQTY_DETAILS (SiteName, new String[]{
            "GET_DETAILS",sStkCode, sUOMCode, sCompCode, sLocCode, ""});       
        JSONArray StkCostQty_array = obj.getJSONArray(0);                      
                
        JSONArray aryRetItem = (JSONArray) JSONSerializer.toJSON(JsonRetItem);
        
        if (aryRetItem.size() > 0) { 
            for (Object js : aryRetItem) { //iterate every item
                               
                JSONObject RetItemJs = (JSONObject) js;
                //pengkee 2018JUN08
                //need to filter with RETDTLIDX, only proceed when matached.
                String sRetDtlKey = RetItemJs.get("RETDTLIDX").toString(); 
                if (sRetDtlKey.equals(sRetDtlIdx) )
                {                    
                    double dReturnQty = Double.parseDouble(RetItemJs.get("ACCEPTED_QTY").toString());
                    sUOMCode = RetItemJs.get("UOMCODE").toString();
                    String sUnitCost = RetItemJs.get("UNITCOST").toString();
                    String sBatchNo = RetItemJs.get("BATCHNO").toString();
                    String sExpiryDate = RetItemJs.get("EXPIRYDATE").toString();
                    double deductQty = dReturnQty;

                    if (StkCostQty_array.size() > 0) { 
                        for (Object jsStkCostQty : StkCostQty_array) { //iterate every record from get details 


                            JSONObject StkCostQtyjson = (JSONObject) jsStkCostQty;         

                            String scq_uomcode = StkCostQtyjson.get("scq_uomcode").toString();
                            String scq_unitcost = StkCostQtyjson.get("scq_unitcost").toString();
                            String scq_batchno = StkCostQtyjson.get("scq_batchno").toString();
                            String scq_expirydate;
                            try {
                                scq_expirydate = StkCostQtyjson.get("scq_expirydate").toString();
                                scq_expirydate = scq_expirydate.substring(0,10);
                            }
                            catch(Exception e) {
                                scq_expirydate = "";
                            }                       

                            Date date1;
                            Date date2;
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");


                            try
                            {date1 = sdf.parse(scq_expirydate);}
                            catch(Exception e)
                            {date1 = null;}

                            try
                            {date2 = sdf.parse(sExpiryDate);}
                            catch(Exception e)
                            {date2 = null;}


                            if (date1 == null)
                            {
                                try
                                {date1 = sdf.parse("2010-01-01");}
                                catch(Exception e)
                                {}                       
                            }

                            if (date2 == null)
                            {
                                try
                                {date2 = sdf.parse("2010-01-01");}
                                catch(Exception e)
                                {}                       
                            }


    //                        if ((sUOMCode.equals(scq_uomcode)) && (sUnitCost.equals(scq_unitcost)) &&
    //                            (sBatchNo.equals(scq_batchno)) && (sExpiryDate.equals(scq_expirydate)))

                            DecimalFormat df2 = new DecimalFormat(".##");
                            df2.setRoundingMode(RoundingMode.UP);
//                            System.out.println("double (UP) : " + df2.format(input));
                            String sUCost1 = df2.format(Double.parseDouble(sUnitCost));
                            String sUCost2 = df2.format(Double.parseDouble(scq_unitcost));
                            if ((sUOMCode.equals(scq_uomcode)) 
                                    && (sUCost1.equals(sUCost2)) 
                                    && (sBatchNo.equals(scq_batchno)) 
                                    && (date1.compareTo(date2)==0)
                                    )
                            {
//                            if ((sUOMCode.equals(scq_uomcode)) 
//                                    && (Double.compare(Double.parseDouble(sUnitCost),Double.parseDouble(scq_unitcost))) == 0 
//                                    && (sBatchNo.equals(scq_batchno)) 
//                                    && (date1.compareTo(date2)==0)
//                                    )
//                            {    
                                bReturn = true;
                                double currentQty = Double.parseDouble(StkCostQtyjson.get("scq_qty").toString());                            
                                double updatedQty = 0;
                                double qtyDeducted = deductQty;

                                if (deductQty > 0) { //deduction takes place
                                    /*
                                    if (currentQty >= deductQty) {   

                                        qtyDeducted = deductQty;
                                        updatedQty = currentQty - deductQty;
                                        deductQty = 0;
                                    }
                                    else if (currentQty < deductQty) {

                                        qtyDeducted = currentQty;
                                        updatedQty = 0;
                                        deductQty = deductQty - currentQty;                                      
                                    }
                                    */

    //                                if (currentQty >= deductQty) {   

                                        qtyDeducted = deductQty;
                                        updatedQty = currentQty - deductQty;
                                        deductQty = 0;
    //                                }
    //                                else if (currentQty < deductQty) {
    //                                   
    //                                    qtyDeducted = currentQty;
    //                                    updatedQty = 0;
    //                                    deductQty = deductQty - currentQty;                                      
    //                                }


                                    JSONObject jsUpd = new JSONObject();     
//                                    jsUpd.put("FUNCTION", "UPDATE");
                                    jsUpd.put("FUNCTION", "INSERT");
                                    jsUpd.put("scq_costqtyidx", StkCostQtyjson.get("scq_costqtyidx").toString());
                                    jsUpd.put("scq_companycode", StkCostQtyjson.get("scq_companycode").toString());
                                    jsUpd.put("scq_locationcode", StkCostQtyjson.get("scq_locationcode").toString());
                                    jsUpd.put("scq_stockcode", StkCostQtyjson.get("scq_stockcode").toString());
                                    jsUpd.put("scq_stockidx", StkCostQtyjson.get("scq_stockidx").toString());
                                    jsUpd.put("scq_uomidx", StkCostQtyjson.get("scq_uomidx").toString());
                                    jsUpd.put("BY", (String) session.getAttribute("loginid"));
                                    jsUpd.put("recstatus", "1");
                                    jsUpd.put("scq_xfrdtlidx", "");  
                                    jsUpd.put("dataexchangestatus", "I");
                                    jsUpd.put("dataexchangeqty", Double.valueOf(qtyDeducted) * -1 );
                                    jsUpd.put("scq_uomcode", scq_uomcode); 
                                    jsUpd.put("scq_batchno", scq_batchno);                                                      
                                    jsUpd.put("scq_expirydate", scq_expirydate);
                                    jsUpd.put("scq_unitcost", scq_unitcost);                          
                                    jsUpd.put("scq_qty", Double.valueOf(updatedQty).toString());     

                                    try {
                                        jsUpd.put("scq_receiveddate", StkCostQtyjson.get("scq_receiveddate").toString());                                 
                                    }
                                    catch (Exception e) {
                                        jsUpd.put("scq_receiveddate", "");                                 
                                    }

                                    UPDATE_STOCK_COSTQTY(SiteName, jsUpd);
                                    
                                    
                                    JSONObject jsUpdStkBal = new JSONObject();     
                                    jsUpdStkBal.put("FUNCTION", "UPDATE_STOCK_BALANCE");
                                    jsUpdStkBal.put("bal_companycode", StkCostQtyjson.get("scq_companycode").toString());
                                    jsUpdStkBal.put("bal_location", StkCostQtyjson.get("scq_locationcode").toString());
                                    jsUpdStkBal.put("bal_stockcode", StkCostQtyjson.get("scq_stockcode").toString());
                                    jsUpdStkBal.put("bal_uom", scq_uomcode);  
                                    jsUpdStkBal.put("UpdateQty", "-" + qtyDeducted);  
                                    jsUpdStkBal.put("BY", (String) session.getAttribute("loginid"));
                                    jsUpdStkBal.put("recstatus", "1");

                                    BusinessLogic.Servlet_Stock.UPDATE_STOCK_BALANCE(jsUpdStkBal, SiteName);
                                    
                                    /* add qty to recieve location*/

                                    JSONObject jsUpdRecv = new JSONObject();     
                                    jsUpdRecv.put("FUNCTION", "UPDATE_EX");
                                    jsUpdRecv.put("scq_costqtyidx", "0");
                                    jsUpdRecv.put("scq_companycode", sCompCode);
                                    jsUpdRecv.put("scq_locationcode", sRecvLocCode);
                                    jsUpdRecv.put("scq_stockcode", sStkCode);
                                    jsUpdRecv.put("scq_stockidx", "0");
                                    jsUpdRecv.put("scq_uomidx", "0");
                                    jsUpdRecv.put("BY", (String) session.getAttribute("loginid"));
                                    jsUpdRecv.put("recstatus", "1");
                                    jsUpdRecv.put("scq_xfrdtlidx", "0");  
                                    jsUpdRecv.put("dataexchangestatus", "I");
                                    jsUpdRecv.put("dataexchangeqty", Double.valueOf(qtyDeducted) * -1); //2018Jun16
                                    jsUpdRecv.put("scq_uomcode", sUOMCode); 
                                    jsUpdRecv.put("scq_batchno", sBatchNo);                                                      
                                    jsUpdRecv.put("scq_expirydate", sExpiryDate);
                                    jsUpdRecv.put("scq_unitcost", sUnitCost);                          
                                    jsUpdRecv.put("scq_qty", Double.valueOf(qtyDeducted).toString());     
                                    
                                    jsUpdRecv.put("scq_receiveddate", "");                                 
                                     

                                    UPDATE_STOCK_COSTQTY(SiteName, jsUpdRecv);
                                    /* add qty to recieve location using UPDATE_EX or UPD_COSTQTY_EX in SP*/
                                    /* SKIP UPDATE_STOCK_BALANCE for recv location*/
                                    /* UPD_COSTQTY_EX already handled UPDATE_STOCK_BALANCE inside SP_TRX_STOCK_COSTQTY */
                                    /* for this recieve location */
                                   

                                       
                                }                                                                                                                                                                       
                            }
                        }                                                
                    } 

                }
            }
        }
        return bReturn;
    }
    
    public static boolean UpdateStockCostQty_StkReturn(HttpServletRequest request, String JsonRetItem, String[] sIn) throws ServletException, IOException, SQLException {
    
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        boolean bReturn = false;              
               
        String sStkCode = sIn[0];
        String sCompCode = sIn[1];            
        String sLocCode = sIn[2];
        String sUOMCode = sIn[3]; 
        
        //pengkee 2018JUN08
        String sRetDtlIdx = sIn[8]; 
        String sRecvLocCode = sIn[9]; 
               
        DAL_StockCostQty objUpdStkCostQty = new DAL_StockCostQty(); //get details of existing record
        BLL_Common.Common_Object obj = objUpdStkCostQty.DAL_GET_STOCK_COSTQTY_DETAILS (SiteName, new String[]{
            "GET_DETAILS",sStkCode, sUOMCode, sCompCode, sLocCode, ""});       
        JSONArray StkCostQty_array = obj.getJSONArray(0);                      
                
        JSONArray aryRetItem = (JSONArray) JSONSerializer.toJSON(JsonRetItem);
        
        if (aryRetItem.size() > 0) { 
            for (Object js : aryRetItem) { //iterate every item
                               
                JSONObject RetItemJs = (JSONObject) js;
                //pengkee 2018JUN08
                //need to filter with RETDTLIDX, only proceed when matached.
                String sRetDtlKey = RetItemJs.get("RETDTLIDX").toString(); 
                if (sRetDtlKey.equals(sRetDtlIdx) )
                {                    
                    double dReturnQty = Double.parseDouble(RetItemJs.get("ACCEPTED_QTY").toString());
                    sUOMCode = RetItemJs.get("UOMCODE").toString();
                    String sUnitCost = RetItemJs.get("UNITCOST").toString();
                    String sBatchNo = RetItemJs.get("BATCHNO").toString();
                    String sExpiryDate = RetItemJs.get("EXPIRYDATE").toString();
                    double deductQty = dReturnQty;

                    if (StkCostQty_array.size() > 0) { 
                        for (Object jsStkCostQty : StkCostQty_array) { //iterate every record from get details 


                            JSONObject StkCostQtyjson = (JSONObject) jsStkCostQty;         

                            String scq_uomcode = StkCostQtyjson.get("scq_uomcode").toString();
                            String scq_unitcost = StkCostQtyjson.get("scq_unitcost").toString();
                            String scq_batchno = StkCostQtyjson.get("scq_batchno").toString();
                            String scq_expirydate;
                            try {
                                scq_expirydate = StkCostQtyjson.get("scq_expirydate").toString();
                                scq_expirydate = scq_expirydate.substring(0,10);
                            }
                            catch(Exception e) {
                                scq_expirydate = "";
                            }                       

                            Date date1;
                            Date date2;
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");


                            try
                            {date1 = sdf.parse(scq_expirydate);}
                            catch(Exception e)
                            {date1 = null;}

                            try
                            {date2 = sdf.parse(sExpiryDate);}
                            catch(Exception e)
                            {date2 = null;}


                            if (date1 == null)
                            {
                                try
                                {date1 = sdf.parse("2010-01-01");}
                                catch(Exception e)
                                {}                       
                            }

                            if (date2 == null)
                            {
                                try
                                {date2 = sdf.parse("2010-01-01");}
                                catch(Exception e)
                                {}                       
                            }


    //                        if ((sUOMCode.equals(scq_uomcode)) && (sUnitCost.equals(scq_unitcost)) &&
    //                            (sBatchNo.equals(scq_batchno)) && (sExpiryDate.equals(scq_expirydate)))

                            DecimalFormat df2 = new DecimalFormat(".##");
                            df2.setRoundingMode(RoundingMode.UP);
//                            System.out.println("double (UP) : " + df2.format(input));
                            String sUCost1 = df2.format(Double.parseDouble(sUnitCost));
                            String sUCost2 = df2.format(Double.parseDouble(scq_unitcost));
                            if ((sUOMCode.equals(scq_uomcode)) 
                                    && (sUCost1.equals(sUCost2)) 
                                    && (sBatchNo.equals(scq_batchno)) 
                                    && (date1.compareTo(date2)==0)
                                    )
                            {
//                            if ((sUOMCode.equals(scq_uomcode)) 
//                                    && (Double.compare(Double.parseDouble(sUnitCost),Double.parseDouble(scq_unitcost))) == 0 
//                                    && (sBatchNo.equals(scq_batchno)) 
//                                    && (date1.compareTo(date2)==0)
//                                    )
//                            {    
                                bReturn = true;
                                double currentQty = Double.parseDouble(StkCostQtyjson.get("scq_qty").toString());                            
                                double updatedQty = 0;
                                double qtyDeducted = deductQty;

                                if (deductQty > 0) { //deduction takes place
                                    /*
                                    if (currentQty >= deductQty) {   

                                        qtyDeducted = deductQty;
                                        updatedQty = currentQty - deductQty;
                                        deductQty = 0;
                                    }
                                    else if (currentQty < deductQty) {

                                        qtyDeducted = currentQty;
                                        updatedQty = 0;
                                        deductQty = deductQty - currentQty;                                      
                                    }
                                    */

    //                                if (currentQty >= deductQty) {   

                                        qtyDeducted = deductQty;
                                        updatedQty = currentQty - deductQty;
                                        deductQty = 0;
    //                                }
    //                                else if (currentQty < deductQty) {
    //                                   
    //                                    qtyDeducted = currentQty;
    //                                    updatedQty = 0;
    //                                    deductQty = deductQty - currentQty;                                      
    //                                }


                                    JSONObject jsUpd = new JSONObject();     
//                                    jsUpd.put("FUNCTION", "UPDATE");
                                    jsUpd.put("FUNCTION", "INSERT");
                                    jsUpd.put("scq_costqtyidx", StkCostQtyjson.get("scq_costqtyidx").toString());
                                    jsUpd.put("scq_companycode", StkCostQtyjson.get("scq_companycode").toString());
                                    jsUpd.put("scq_locationcode", StkCostQtyjson.get("scq_locationcode").toString());
                                    jsUpd.put("scq_stockcode", StkCostQtyjson.get("scq_stockcode").toString());
                                    jsUpd.put("scq_stockidx", StkCostQtyjson.get("scq_stockidx").toString());
                                    jsUpd.put("scq_uomidx", StkCostQtyjson.get("scq_uomidx").toString());
                                    jsUpd.put("BY", (String) session.getAttribute("loginid"));
                                    jsUpd.put("recstatus", "1");
                                    jsUpd.put("scq_xfrdtlidx", "");  
                                    jsUpd.put("dataexchangestatus", "I");
                                    jsUpd.put("dataexchangeqty", Double.valueOf(qtyDeducted) * -1 );
                                    jsUpd.put("scq_uomcode", scq_uomcode); 
                                    jsUpd.put("scq_batchno", scq_batchno);                                                      
                                    jsUpd.put("scq_expirydate", scq_expirydate);
                                    jsUpd.put("scq_unitcost", scq_unitcost);                          
                                    //jsUpd.put("scq_qty", Double.valueOf(updatedQty).toString());     
                                    jsUpd.put("scq_qty", Double.valueOf(qtyDeducted) * -1 );  

                                    try {
                                        jsUpd.put("scq_receiveddate", StkCostQtyjson.get("scq_receiveddate").toString());                                 
                                    }
                                    catch (Exception e) {
                                        jsUpd.put("scq_receiveddate", "");                                 
                                    }

                                    UPDATE_STOCK_COSTQTY(SiteName, jsUpd);
                                    
                                    
                                    JSONObject jsUpdStkBal = new JSONObject();     
                                    jsUpdStkBal.put("FUNCTION", "UPDATE_STOCK_BALANCE");
                                    jsUpdStkBal.put("bal_companycode", StkCostQtyjson.get("scq_companycode").toString());
                                    jsUpdStkBal.put("bal_location", StkCostQtyjson.get("scq_locationcode").toString());
                                    jsUpdStkBal.put("bal_stockcode", StkCostQtyjson.get("scq_stockcode").toString());
                                    jsUpdStkBal.put("bal_uom", scq_uomcode);  
                                    jsUpdStkBal.put("UpdateQty", "-" + qtyDeducted);  
                                    jsUpdStkBal.put("BY", (String) session.getAttribute("loginid"));
                                    jsUpdStkBal.put("recstatus", "1");

                                    BusinessLogic.Servlet_Stock.UPDATE_STOCK_BALANCE(jsUpdStkBal, SiteName);
                                    
                                    /* add qty to recieve location*/

                                    JSONObject jsUpdRecv = new JSONObject();     
                                    jsUpdRecv.put("FUNCTION", "UPDATE_EX");
                                    jsUpdRecv.put("scq_costqtyidx", "0");
                                    jsUpdRecv.put("scq_companycode", sCompCode);
                                    jsUpdRecv.put("scq_locationcode", sRecvLocCode);
                                    jsUpdRecv.put("scq_stockcode", sStkCode);
                                    jsUpdRecv.put("scq_stockidx", "0");
                                    jsUpdRecv.put("scq_uomidx", "0");
                                    jsUpdRecv.put("BY", (String) session.getAttribute("loginid"));
                                    jsUpdRecv.put("recstatus", "1");
                                    jsUpdRecv.put("scq_xfrdtlidx", "0");  
                                    jsUpdRecv.put("dataexchangestatus", "I");
                                    jsUpdRecv.put("dataexchangeqty", Double.valueOf(qtyDeducted) * -1); //2018Jun16
                                    jsUpdRecv.put("scq_uomcode", sUOMCode); 
                                    jsUpdRecv.put("scq_batchno", sBatchNo);                                                      
                                    jsUpdRecv.put("scq_expirydate", sExpiryDate);
                                    jsUpdRecv.put("scq_unitcost", sUnitCost);                          
                                    jsUpdRecv.put("scq_qty", Double.valueOf(qtyDeducted).toString());     
                                    
                                    jsUpdRecv.put("scq_receiveddate", "");                                 
                                     

                                    UPDATE_STOCK_COSTQTY(SiteName, jsUpdRecv);
                                    /* add qty to recieve location using UPDATE_EX or UPD_COSTQTY_EX in SP*/
                                    /* SKIP UPDATE_STOCK_BALANCE for recv location*/
                                    /* UPD_COSTQTY_EX already handled UPDATE_STOCK_BALANCE inside SP_TRX_STOCK_COSTQTY */
                                    /* for this recieve location */
                                   

                                       
                                }                                                                                                                                                                       
                            }
                        }                                                
                    } 

                }
            }
        }
        return bReturn;
    }
    
}