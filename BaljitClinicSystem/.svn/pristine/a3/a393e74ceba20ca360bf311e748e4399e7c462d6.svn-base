/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BusinessLogic;

import BusinessData.BaseDAL;
import BusinessData.DAL_MasterRecSync;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import net.sf.json.JSONArray;

/**
 *
 * @author N3359
 */
@WebServlet(name = "Servlet_MasterRecSync", urlPatterns = {"/Servlet_MasterRecSync"})
public class Servlet_MasterRecSync extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet Servlet_MasterRecSync</title>");            
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet Servlet_MasterRecSync at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }
 public static String UPDATE_MASTERREC_SYNC(String[] MasterRecSyncValues, String SiteName) {
//public void UPDATE_MASTERREC_SYNC(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
    
//        HttpSession session = request.getSession();
//        String SiteName = (String) session.getAttribute("SiteName");
         
        
//        response.setContentType("text/html");
//        PrintWriter out = response.getWriter();
//        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
               
//        String sType = request.getParameter("type");
//        String sKey1 = request.getParameter("key1");
//        String sKey2 = request.getParameter("key2");
//        String sStatus = request.getParameter("status");
//        String sFunc = request.getParameter("FUNCTION");
        
        String sFunc = MasterRecSyncValues[0]; //function
        String sType = MasterRecSyncValues[1]; //type
        String sComp = MasterRecSyncValues[2]; //comp
        String sLoc = MasterRecSyncValues[3]; //loc
        String sKey1 = MasterRecSyncValues[4]; //key1
        String sKey2 = MasterRecSyncValues[5]; //key2
        String sStatus = MasterRecSyncValues[6]; //status
        String sBy = MasterRecSyncValues[7]; //by
        String sMessage = "";
        
               
        boolean bReturn = false;   
        String sMethod = "";
        
        if ( sFunc.equals("ADD") ){
            sMethod = "ADD_MASTERREC"; 
            
        } else if ( sFunc.equals("EDIT") ) {           
            sMethod = "EDIT_MASTERREC";      
            
        }
        
        String[] aryRecord = {
            sMethod,    // sMethod varchar(20)
            sType,       // sci_ciidx integer
            sComp, //Comp
            sLoc, //LOC
            sKey1,  // sci_cicategory varchar(6)
            sKey2,      // sci_cicode varchar(10)
            sStatus,      // sci_cidesc varchar(100)       
//            (String)session.getAttribute("loginid"),  // sBy varchar(10)
            sBy,
            "1"         // srecstatus varchar(4)
        };
        DAL_MasterRecSync MasterRecSync = new DAL_MasterRecSync();       
        BLL_Common.Common_Object obj = MasterRecSync.DAL_UPDATE_MASTERREC_SYNC(SiteName, aryRecord);
        
        try {              
            if (obj.getObjectArray(0).toString().equals("00000")) {

                obj.commit();   
                 
                bReturn = true;                    
            } else {
                obj.rollback();
            }
        }catch (Exception e) {
            try {
                obj.rollback();
            } catch (SQLException ex) {
//                out.println("Exception Error.");
//                e.printStackTrace();
                bReturn = false;
            }
        }    
//        json.put("bool", bReturn);
//        out.println(json);
        if (bReturn)
        {
            sMessage = "OK";
        }
        else
        {
            sMessage = "FALIED";
        }
        return sMessage;
    } 
   
 public static String CALL_MASTERREC_SYNC_PROCESS(String SiteName) {

        
         
        String sMessage = "";
        
        boolean bReturn = true;   
        String sMethod = "";
        
//        BLL_Common.Common_Object objSchEvents = BaseDAL.Get_Multiple_QueryReturn(conn, "SP_GET_COMMON(?,?,?)", new String[]{"GET_SCHEDULED_EVENT", "", ""}, new int[]{});        
        
        BLL_Common.Common_Object objMasRec = BaseDAL.Get_Multiple_QueryReturn("SP_GET_MASTERREC_SYNC(?,?,?,?,?,?,?)", 
                new String[]{"GET_MASTERREC_LIST", "", "","","","",""}, new int[]{}, SiteName); 
        if (objMasRec.getJSONArray(0).size() > 0)
        {

            JSONArray aryMasRec = objMasRec.getJSONArray(0);
            for (int a = 0; a < aryMasRec.size(); a++) {
                String[] param_mrec = new String[11];
                /* param
                            0 - index
                            1 - sch type -> the type of event
                            2 - sch sitename -> which inventory database to use for the process
                            3 - sch recurring (minute) -> loop after how many minutes
                            4 - sch valid hours range -> effetive on which hours with the day. 
                                    eg. 08:00-18:00 => 8am - 6pm. BLANK will mean no restriction.
                            5 - sch week days -> effective on which days of the week. BALNK will mean all days
                            6 - created by
                            7 - created on
                            8 - modified by
                            9 - modified on                                
                            10 - sch last run -> Last run. Null mean never un before.
                 */

                param_mrec[0] = aryMasRec.getJSONObject(a).getString("msync_datatransfer_type");
                param_mrec[1] = aryMasRec.getJSONObject(a).getString("msync_company");
                param_mrec[2] = aryMasRec.getJSONObject(a).getString("msync_location");
                param_mrec[3] = aryMasRec.getJSONObject(a).getString("msync_key1");
                param_mrec[4] = aryMasRec.getJSONObject(a).getString("msync_key2");
                param_mrec[5] = aryMasRec.getJSONObject(a).getString("msync_status");

//                if (
//                    (param_mrec[0].equals("STOCKMASTER")) 
//                        
//                        || (param_mrec[0].equals("CODEDESC")) 
//                        || (param_mrec[0].equals("CHARGEITEM")) 
//                        || (param_mrec[0].equals("STOCKUOM")) 
//                        || (param_mrec[0].equals("CHARGEPACKAGEHDR"))
//                        || (param_mrec[0].equals("CHARGEPACKAGEDTL")) 
//                    )
//                    {
                        if (!param_mrec[3].equals("")  && !param_mrec[2].equals("") && !param_mrec[1].equals("")) 
                        {
                            String sStatus = "";
                            switch (param_mrec[0])
                            {
                                case "STOCKMASTER":
                                {
                                    sStatus = Servlet_Stock.DataTransfer_Stock(param_mrec[3] , SiteName, param_mrec[1], param_mrec[2]);
                                    break;
                                }
                                case "CODEDESC":
                                {
                                    sStatus = Servlet_Stock.DataTransfer_CodeDesc(param_mrec[3], param_mrec[4], SiteName, param_mrec[1], param_mrec[2]);
                                    break;
                                }
                                case "STOCKUOM":
                                {
                                    sStatus = Servlet_StockUOM.DataTransfer_StockUOM(param_mrec[3] , SiteName, param_mrec[1], param_mrec[2]);
                                    break;
                                }
                                case "CHARGEITEM":
                                {
                                    sStatus = Servlet_ChargeItem.DataTransfer_ChargeItem(param_mrec[3] , SiteName, param_mrec[1], param_mrec[2]);
                                    break;
                                }
                                case "CHARGEPACKAGE":
                                {
                                    sStatus = Servlet_ChargePackage.DataTransfer_Package(param_mrec[3] , SiteName, param_mrec[1], param_mrec[2]);
                                    break;
                                }
                                default:
                                {
                                    sStatus = "";
                                    break;
                                }
                            }
                            
                            

                            if (sStatus.equals("SITE CONTACTED"))
                            {
                                DAL_MasterRecSync MasterRecSync = new DAL_MasterRecSync();  
                                String[] aryDeleteRec = new String[]{"DELETE_MASTERREC",param_mrec[0] , param_mrec[1], param_mrec[2], param_mrec[3],param_mrec[4],param_mrec[5],"",""};


                                BLL_Common.Common_Object obj = MasterRecSync.DAL_DELETE_MASTERREC_SYNC(SiteName, aryDeleteRec);

                                try {              
                                    if (obj.getObjectArray(0).toString().equals("00000")) {

                                        obj.commit();   
                                    } else {
                                        obj.rollback();
                                    }
                                }catch (Exception e) {
                                    try {
                                        obj.rollback();
                                    } catch (SQLException ex) {
                                    }
                                }
                            }

                        }

//                    }
                }
            }
            
        
        if (bReturn)
        {
            sMessage = "OK";
        }
        else
        {
            sMessage = "FALIED";
        }
        return sMessage;
    } 
   
    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
