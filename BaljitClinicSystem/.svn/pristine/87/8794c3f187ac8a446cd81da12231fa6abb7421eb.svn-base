package BusinessLogic;

import static BusinessData.BaseDAL.Object_BLL_Common;
import BusinessData.DAL_PopulateData;
import BusinessData.DAL_ShowGrid;
import BusinessData.DAL_Stock;
import BusinessData.DAL_StockLedger;
import BusinessData.DAL_StockDespatch;
import BusinessData.DAL_StockTransfer;
import static BusinessLogic.Servlet_GRN.DataTransfer_GRN;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JSONException;

import org.apache.commons.collections.CollectionUtils;

import static BusinessLogic.Servlet_Stock.Product_Pricing;
import static BusinessLogic.Servlet_Stock.TRX_UOM_CONVERT;
import static BusinessLogic.Servlet_StockTransfer.UpdateTemporaryStockBalance;

import java.util.Iterator;
import net.sf.json.JSONSerializer;
import org.json.simple.parser.JSONParser;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
/**
 *
 * @author N3359
 */
@WebServlet(name = "Servlet_StockDespatch", urlPatterns = {"/Servlet_StockDespatch"})
public class Servlet_StockDespatch extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet Servlet_StockTransfer</title>");            
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet Servlet_StockTransfer at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // processRequest(request, response);
        String p_method = null;
        p_method = request.getParameter("SFC");

        
//        if (p_method.equals("GET_UNDISPATCHED_STOCK_LIST")) {
//            try {
//                Get_Undispatached_StockList(request, response);
//            } catch (SQLException e) {
//                e.printStackTrace();
//            }
//
//        }

    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // processRequest(request, response);
        String p_method = null;
        p_method = request.getParameter("SFC");

        if (p_method.equals("CREATE_STOCK_DESPATCH")) {
            try {
                //CREATE_STOCK_DESPATCH(request, response);
                ADDUPDATE_STOCK_DESPATCH(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } 
        if (p_method.equals("UPDATE_STOCK_DESPATCH")) {
            try {
                //CREATE_STOCK_DESPATCH(request, response);
                ADDUPDATE_STOCK_DESPATCH(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } 
        else if (p_method.equals("GET_STKDESPATCH_LIST")) {
            try {
                GET_STOCK_DESPATCH_LIST(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } 
        else if (p_method.equals("GET_STKDESPATCH_ITEMS")) {
            try {
                GET_STOCK_DESPATCH_ITEMS(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } 
        else if (p_method.equals("GET_STKDESPATCH_HEADER")) {
            try {
                GET_STOCK_DESPATCH_HEADER(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
           
            } 
        } 
        //else if (p_method.equals("GET_UNDISPATCHED_STOCK_LIST")) {
//            try {
//                Get_Undispatached_StockList(request, response);
//            } catch (SQLException e) {
//                e.printStackTrace();
//           
//            } 
//        } 
        
    }
    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
    
    public void ADDUPDATE_STOCK_DESPATCH(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {

        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
        //JSONParser parser = new JSONParser();
        //boolean return_bool = false;
        //String return_msg = "";

        String sMessage = "";
        
         
        String JsonDespatch = request.getParameter("ITEMS");
         
        String sFunction = request.getParameter("FUNCTION");
        String sMethod = "ADD_DESPATCH_HEADER";
        if (sFunction.equals("INSERT"))
        {
           sMethod = "ADD_DESPATCH_HEADER"; 
        }
        else if (sFunction.equals("UPDATE"))
        {
            sMethod = "UPD_DESPATCH_HEADER"; 
        }
         
        String sCompCode = request.getParameter("COMPCODE");
        
        String sRemark = request.getParameter("REMARKS") ;
       
        String sPersonName = request.getParameter("PERSON_NAME") ;
        String sPersonID = request.getParameter("PERSON_ID") ;
        String sIssue = request.getParameter("ISSUE") ;
        String sRecieve = request.getParameter("RECIEVE") ;
 
        String sDespHdrIdx = request.getParameter("DESPHDRIDX") ;
        String sStatus = request.getParameter("STATUS") ;
        String sControlDateTime = request.getParameter("CONTROL_DATETIME") ;

    //-------------------- 
        String sDespatchDocNo = "";
        JSONArray aryDespNo = null;
        DAL_PopulateData obj_No = new DAL_PopulateData();
        
        
        if (sFunction.equals("INSERT"))
        {
            BLL_Common.Common_Object rsNo = obj_No.DAL_GetNumber(SiteName, new String[]{"GET_NUMBER","DESP",""});  
            aryDespNo = (JSONArray) JSONSerializer.toJSON(rsNo.getJSONArray(0).toString());
            JSONObject objDocNo = aryDespNo.getJSONObject(0);

            sDespatchDocNo =  objDocNo.getString("NewNumber");
            rsNo.commit();        
        }
        DAL_StockDespatch objHdr = new DAL_StockDespatch();
        String[] aryHdr = {
            //"ADD_DESPATCH_HEADER", /*sMethod            varchar(30),*/
            sMethod,
                sDespHdrIdx, /*sdesh_despatchhdridx INTEGER,*/
                "0", /*sdesd_despatchdtlidx INTEGER ,*/
                sCompCode, /*sdesh_company         VARCHAR(10),*/
                sDespatchDocNo, /*sdesh_docno                 VARCHAR(10),*/
                "", /*sdesh_docdate         DATETIME,*/
                sRemark, /*sdesh_remark         VARCHAR(100),*/
                sStatus, /*sdesh_status        VARCHAR(4),*/
                sPersonName, /*sdesh_personname        VARCHAR(200),*/
                sPersonID, /*sdesh_personid        VARCHAR(20),*/
                sIssue, /*sdesh_issuelocation          VARCHAR(10),*/
                sRecieve, /*sdesh_recievelocation        VARCHAR(10),*/
                "0", /*sdesd_lineno        INTEGER,*/
                "", /*sdesd_stockcode        VARCHAR(16),*/
                "", /*sdesd_uomcode        VARCHAR(6),*/
                "0", /*sdesd_uomidx        INTEGER,*/
                "0", /*sdesd_qty        NUMERIC(15,3),*/
                "", /*sdesd_issuelocation        VARCHAR(10),*/
                "", /*sdesd_recievelocation        VARCHAR(10),*/
                "", /*sdesd_status        VARCHAR(4),*/
                "", /*sdesd_remarks        VARCHAR(200),*/
                "0", /*sdesd_stockxfrdtlidx        INTEGER,*/
                "0", /* desd_accepted_qty */
                (String) session.getAttribute("loginid"), /*sBy                varchar(10),*/
                "", /*sRecStatus         varchar(4),*/
                sControlDateTime // CreatedDT VARCHAR(20)
             
//            ""/*44-Result varchar(30)*/,
//            ""/*45-Message varchar(30)*/,
//            "0"/*46-xfrh_stockxfrhdridx INTEGER*/,
//            "0"/*47-xfrd_stockxfrdtlidx INTEGER*/

            };


        BLL_Common.Common_Object obj = objHdr.DAL_ADDEDIT_STOCKT_DESPATCH(SiteName, aryHdr);

//--------------------      
         
//        String[] ary = {sProdCode, sCompCode, sLocationCode,sDespatchDocNo,sAvailQty,sConvUOM};
        boolean bReturn = false;
        try {
            if (obj.getObjectArray(0).toString().equals("00000")) {

                sMessage = obj.getObjectArray(2).toString();
                
                //String[] aryDtlIdxs = Despatch_Items(JsonDespatch,obj.getObjectArray(2).toString());
                ArrayList aryDtlIdxs = Despatch_Items(request, JsonDespatch,obj.getObjectArray(2).toString());

                String JsonDespatchWithDtlIdx = "";
                if (aryDtlIdxs != null)
                {
                    JSONArray DespItem_array = (JSONArray) JSONSerializer.toJSON(JsonDespatch);
                    if (DespItem_array.size() > 0) {
//                        int z = 0;
//                        for (Object js : DespItem_array) {
//                            JSONObject DespItemjson = (JSONObject) js;
//                            DespItemjson.put("DESPDTLIDX", aryDtlIdxs[z]);
//                            z=z+1;
//                        }
                        JsonDespatchWithDtlIdx = DespItem_array.toString(); 

                    }
                }
                             
                if (aryDtlIdxs != null)
                {
                    boolean bUpdCostQtySuccessful = true;
                    if (!sFunction.equals("INSERT"))
                    {
                        String[] s = {sCompCode, sIssue};
                        bUpdCostQtySuccessful = UpdateStockCostQty(request, JsonDespatchWithDtlIdx, s);

                        if (bUpdCostQtySuccessful)
                        {
                            UpdateTemporaryStockBalance(request,sCompCode,JsonDespatch ); //update temporary stock balance
                            obj.commit();
//                            ExecutorService executor = Executors.newFixedThreadPool(50);  
//                            Runnable DEThread = new BLL_GRNDataExchange();
//                            executor.execute(DEThread);
                                                  
                            DataTransfer_GRN(SiteName);                           
                            
                            bReturn = true;
                            sMessage = obj.getObjectArray(1).toString();
                        }
                        else
                        {
                            Object_BLL_Common.write_log("UpdateStockCostQty failed", "");
                           obj.rollback(); 
                        }
                    }
                    else
                    {
                        bReturn = true;
                        obj.commit();
                    }
                }
                else
                {
                    Object_BLL_Common.write_log("aryDtlIdx is null", "");
                    obj.rollback();
                    
                }
                
                if (sFunction.equals("INSERT"))
                 {                 
                    DAL_StockTransfer objXfr = new DAL_StockTransfer();

                    for (int i=0; i< aryDtlIdxs.size(); i++)
                    {
                        Object s = aryDtlIdxs.get(i);
                        String[] ss = (String[])s;
                            String[] upd ={"UPD_DISPATCHED_QTY",
                                "0",
                               ss[0],
                                "0","0","0","0","0","0","0",
                                "0","0","0","0","0","0","0",
                                null,"0","0","0","0","0","0",
                                "0","0","0","0","0","0","0",
                                "0","0","0",
                                ss[1],
                                "0","0","","0","0","0","0","0",""}; //CONTROLDATETIME
                        BLL_Common.Common_Object objChk = objXfr.DAL_ADDEDIT_STOCKTRANSFER(SiteName, upd);
                        if (objChk.getObjectArray(0).toString().equals("00000"))
                                {
                                    objChk.commit();
                                }
                                else
                                {
                                    objChk.rollback();
                                    Object_BLL_Common.write_log("UPD_DISPATCHED_QTY failed", "");
                                }

                    }  
                }
                
            } else {
                // objPrice.rollback();
                //  objUom.rollback();
                obj.rollback();
            }
        } catch (Exception e) {
            Object_BLL_Common.write_log("Exception : " + e.toString(), "");
            try {
                obj.rollback();
            } catch (SQLException ex) {
                bReturn = false;
            }
        }
              
        json.put("bool", bReturn);
        json.put("msg", sMessage);
        //json.put("CorpCode", sCorpCode);
        out.println(json);
    }
     public static boolean UpdateStockCostQty(HttpServletRequest request, String JsonDespatchItem, String[] sIn)  throws ServletException, IOException, SQLException  {

        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        boolean bReturn = true; 
        try { 
        String sCompCode = sIn[0];
        String sLocationCode = sIn[1];
String sControlDateTime = ""; 
        ArrayList aryStockList = new ArrayList();
        String sCurrStkCode = "";
        JSONArray DespItem_array = (JSONArray) JSONSerializer.toJSON(JsonDespatchItem);
        if (DespItem_array.size() > 0) {
            int z = 0;
            boolean bFound = false;
            for (Object js : DespItem_array) {
                bFound = false;
                JSONObject DespItemjson = (JSONObject) js;
                sCurrStkCode = DespItemjson.get("PRODCODE").toString();
        sControlDateTime = DespItemjson.get("CONTROL_DATETIME").toString();
                for (Object s : aryStockList)
                {
                    String sStk = (String)s;
                    if (sStk.equals(sCurrStkCode))
                    {
                       bFound = true;
                       break;
                    }
                }
                if (!bFound)
                {
                    aryStockList.add(sCurrStkCode); 
                }

                z=z+1;
            }
                      
            if (aryStockList.size() > 0)
            {
                for (Object s : aryStockList)
                {
                    String sStk = (String)s;
                    String sUOM = "";
                    JSONArray DespItemSingleStk_array = new JSONArray();
                    
                    JSONArray UpdRevBalanceArray = new JSONArray();
                    
                    for (Object js : DespItem_array) {
                
                        JSONObject DespItemjson = (JSONObject) js;
                        
                        sCurrStkCode = DespItemjson.get("PRODCODE").toString();
                        if (sStk.equals(sCurrStkCode))
                        {
                                             
                            //DespItemjson.put("XFER_QTY", DespItemjson.get("QTY"));
                            DespItemjson.put("XFER_QTY", DespItemjson.get("ACCPQTY"));
                            DespItemjson.put("UOM_FROM", DespItemjson.get("UOM"));
                            DespItemjson.put("UOM_TO", DespItemjson.get("UOM"));
                            
                            DespItemjson.put("XFERDTLIDX", DespItemjson.get("XFERIDX"));
                            
                            sUOM = DespItemjson.get("UOM").toString();
                            DespItemSingleStk_array.add(DespItemjson);
                            
                            //2016Jun01
                            JSONObject jsUpdStkBal = new JSONObject(); 
                            double dRevQty = Double.parseDouble(DespItemjson.get("QTY").toString()) 
                                    - Double.parseDouble(DespItemjson.get("ACCPQTY").toString());     
                            jsUpdStkBal.put("FUNCTION", "UPDATE_TEMPORARY_STOCK_BALANCE");                                   
                            jsUpdStkBal.put("bal_companycode", sCompCode);
                            jsUpdStkBal.put("bal_location", DespItemjson.get("LOCATION_FROM"));
                            jsUpdStkBal.put("bal_stockcode", DespItemjson.get("PRODCODE"));
                            jsUpdStkBal.put("bal_uom",  DespItemjson.get("UOM"));                                                        
                            jsUpdStkBal.put("UpdateQty", dRevQty); 
                            jsUpdStkBal.put("BY", (String) session.getAttribute("loginid"));
                            jsUpdStkBal.put("recstatus", "1");  
                            UpdRevBalanceArray.add(jsUpdStkBal);
                            BusinessLogic.Servlet_Stock.UPDATE_STOCK_BALANCE(jsUpdStkBal, SiteName);
                           
                            jsUpdStkBal = new JSONObject();  
                            jsUpdStkBal.put("FUNCTION", "UPDATE_TEMPORARY_STOCK_BALANCE");                                   
                            jsUpdStkBal.put("bal_companycode", sCompCode);
                            jsUpdStkBal.put("bal_location", DespItemjson.get("LOCATION_TO"));
                            jsUpdStkBal.put("bal_stockcode", DespItemjson.get("PRODCODE"));
                            jsUpdStkBal.put("bal_uom",  DespItemjson.get("UOM"));                                                             
                            jsUpdStkBal.put("UpdateQty", dRevQty * -1); 
                            jsUpdStkBal.put("BY", (String) session.getAttribute("loginid"));
                            jsUpdStkBal.put("recstatus", "1");  
                            UpdRevBalanceArray.add(jsUpdStkBal);
                            BusinessLogic.Servlet_Stock.UPDATE_STOCK_BALANCE(jsUpdStkBal, SiteName);  
                            
                        }
                    }
                    String JsonDespatchWithDtlIdx = DespItemSingleStk_array.toString();
//                    String[] ary = {sStk, sCompCode, sLocationCode,"","0",sUOM};
                    String[] ary = {sStk, sCompCode, sLocationCode,"","0",sUOM, sControlDateTime};
                    //here
                    JSONArray aryProcessdCostQty =
                    BusinessLogic.Servlet_StockCostQty.UpdateStockCostQty(request, JsonDespatchWithDtlIdx, ary);
                  
                    if (aryProcessdCostQty != null)
                    {
                        UpdateStockLedger(aryProcessdCostQty.toString(), ary, SiteName);
              
                        //2016Jun01
                        
                    }
                    else
                    {
//                         bReturn = false;
//                         break;
                    }                
                }
            }         
        /*                
JSONArray aryProcessdCostQty =
                BusinessLogic.Servlet_StockCostQty.UpdateStockCostQty(JsonDespatchWithDtlIdx, ary);
                if (aryProcessdCostQty != null)
                {
                    obj.commit();
                    bReturn = true;
                    sMessage = obj.getObjectArray(1).toString();
                }
                else
                {
                    obj.rollback();
                }
               
*/
        }
         }
         catch (Exception e){
             Object_BLL_Common.write_log("Exception : " + e.toString(), "");
         }
        return bReturn;
        
        
    }
    private static boolean UpdateStockLedger(String JsonCostQty, String[] sIn, String SiteName) throws IOException, SQLException {
        boolean b = false;
        String sMethod = null;
        
        String sStkCode = sIn[0];
        String sCompCode = sIn[1];            
        String sLocation = sIn[2];
        String sXfrNo = sIn[3];
        String sControlDateTime = sIn[6];
        Date dt =  new Date();
         
        SimpleDateFormat ft = 
            new SimpleDateFormat ("yyyy-MM-dd hh:mm:ss");
        String sDt = ft.format(dt);
        String sLegderHdrIdx = "";
        
        int year = Calendar.getInstance().get(Calendar.YEAR);
        int mth = Calendar.getInstance().get(Calendar.MONTH);
        
        JSONArray XferItem_array = (JSONArray) JSONSerializer.toJSON(JsonCostQty);
        int i=0;
        JSONObject jsNew = null;
        if (XferItem_array.size() > 0) {
                        
            //Create header
            jsNew = new JSONObject();                             
            jsNew.put("HEADER_DETAIL", "HEADER");
            
            jsNew.put("FUNCTION","INSERT");
            jsNew.put("StockLedgerHdrIdx",0);
            jsNew.put("StockLedgerDtlIdx",0);
            jsNew.put("sldg_company",sCompCode);
            jsNew.put("sldg_location",sLocation);
            jsNew.put("sldg_finyear",year);
            jsNew.put("sldg_finperiod",mth);
            jsNew.put("sldg_reasoncode","XFR");
            jsNew.put("sldg_trxtype","XFRD");
            jsNew.put("sldg_suppliercode","");
            jsNew.put("sldg_intercompanysupplier","");
            jsNew.put("sldg_docno",sXfrNo);
            jsNew.put("sldg_docdate",sDt);
            jsNew.put("sldg_refno","");
            jsNew.put("sldg_refdate","");
            jsNew.put("sldg_invno","");
            jsNew.put("sldg_invdate","");
            jsNew.put("sldg_dono","");
            jsNew.put("sldg_dodate","");
            jsNew.put("sldg_remark","");
            jsNew.put("sldg_isgstinclusive","");
            jsNew.put("sldl_lineno",0);
            jsNew.put("sldl_stockidx",0);
            jsNew.put("sldl_stockcode","");
            jsNew.put("sldl_uomcode","");
            jsNew.put("sldl_uomidx",0);
            jsNew.put("sldl_unitcost",0);
            jsNew.put("sldl_qty",0);
            jsNew.put("sldl_discamt",0);
            jsNew.put("sldl_subtotalamt",0);
            jsNew.put("sldl_discpercent",0);
            jsNew.put("sldl_discoption",0);
            jsNew.put("sldl_expirydate","");
            jsNew.put("sldl_batchno","");
            jsNew.put("sldl_pono","");
            jsNew.put("sldl_location","");
            jsNew.put("sldl_poqty",0);
            jsNew.put("sldl_bonusqty",0);
            jsNew.put("sldl_pobonusqty",0);
            jsNew.put("sldl_polineno",0);
            jsNew.put("sldl_poidx",0);
            jsNew.put("sldl_convuomidx",0);
            jsNew.put("sldl_convqty",0);
            jsNew.put("sldl_convunitcost",0);
            jsNew.put("sldl_convuomcode",0);
            jsNew.put("sldl_unitprice",0);
            jsNew.put("sldl_gstpurcode","");
            jsNew.put("sldl_gsttaxrates",0);
            jsNew.put("sldl_gstamt",0);
            jsNew.put("sldl_grosstotal",0);
            jsNew.put("systemname","PORTAL");
            jsNew.put("By","");
            jsNew.put("recstatus","1");    
    jsNew.put("CONTROL_DATETIME", sControlDateTime);            
 
            BLL_Common.Common_Object objLedgerHdr = BusinessLogic.Servlet_StockLedger.UPDATE_STOCK_LEDGER(SiteName, jsNew);             
            if (objLedgerHdr.getObjectArray(0).toString().equals("00000")) {
               
                sLegderHdrIdx = objLedgerHdr.getObjectArray(2).toString();
            } else {
                return false;
            }       
            
            for (Object js : XferItem_array) {
                JSONObject XferItemjson = (JSONObject) js;
                
                if (XferItemjson.get("scq_locationcode").toString().toUpperCase()
                        != sLocation.toUpperCase())
                {    
                    //Create detail - Recive End (+qty)
                    jsNew = new JSONObject();                             
                    jsNew.put("HEADER_DETAIL", "DETAIL");

                    jsNew.put("FUNCTION","INSERT");
                    jsNew.put("StockLedgerHdrIdx",sLegderHdrIdx);
                    jsNew.put("StockLedgerDtlIdx",0);
                    jsNew.put("sldg_company",sCompCode);
                    jsNew.put("sldg_location",XferItemjson.get("scq_locationcode").toString().toUpperCase());
                    jsNew.put("sldg_finyear",year);
                    jsNew.put("sldg_finperiod",mth);
                    jsNew.put("sldg_reasoncode","XFR");
                    jsNew.put("sldg_trxtype","XFR"); 
                    String dQty = XferItemjson.get("scq_qty").toString();
                    double dRevQty = Double.parseDouble(dQty) * -1;
                    //jsNew.put("sldl_qty",XferItemjson.get("scq_qty").toString().toUpperCase()); 
//20181219 amira                    
jsNew.put("sldl_qty",XferItemjson.get("dataexchangeqty").toString()); 
                    jsNew.put("sldg_suppliercode",""); 
                    jsNew.put("sldg_intercompanysupplier","");
                    jsNew.put("sldg_docno",sXfrNo);
                    jsNew.put("sldg_docdate",sDt);
                    jsNew.put("sldg_refno","");
                    jsNew.put("sldg_refdate","");
                    jsNew.put("sldg_invno","");
                    jsNew.put("sldg_invdate","");
                    jsNew.put("sldg_dono","");
                    jsNew.put("sldg_dodate","");
                    jsNew.put("sldg_remark","");
                    jsNew.put("sldg_isgstinclusive","");
                    jsNew.put("sldl_lineno",0);
                    jsNew.put("sldl_stockidx",0);
                    jsNew.put("sldl_stockcode",XferItemjson.get("scq_stockcode").toString().toUpperCase());
                    jsNew.put("sldl_uomcode",XferItemjson.get("scq_uomcode").toString().toUpperCase());
                    jsNew.put("sldl_uomidx",0);
                    jsNew.put("sldl_unitcost",XferItemjson.get("scq_unitcost").toString().toUpperCase());                
                    jsNew.put("sldl_discamt",0);
                    jsNew.put("sldl_subtotalamt",0);
                    jsNew.put("sldl_discpercent",0);
                    jsNew.put("sldl_discoption",0);
                    if (XferItemjson.get("scq_expirydate") != null)
                        jsNew.put("sldl_expirydate",XferItemjson.get("scq_expirydate").toString());
                    else
                        jsNew.put("sldl_expirydate","");
                    jsNew.put("sldl_batchno",XferItemjson.get("scq_batchno").toString().toUpperCase());
                    jsNew.put("sldl_pono","");
                    jsNew.put("sldl_location",XferItemjson.get("scq_locationcode").toString().toUpperCase());
                    jsNew.put("sldl_poqty",0);
                    jsNew.put("sldl_bonusqty",0);
                    jsNew.put("sldl_pobonusqty",0);
                    jsNew.put("sldl_polineno",0);
                    jsNew.put("sldl_poidx",0);
                    jsNew.put("sldl_convuomidx",0);
                    //jsNew.put("sldl_convqty",XferItemjson.get("scq_qty").toString().toUpperCase());
//20181219 amira 
jsNew.put("sldl_convqty",XferItemjson.get("dataexchangeqty").toString());
                    jsNew.put("sldl_convunitcost",XferItemjson.get("scq_unitcost").toString().toUpperCase());
                    jsNew.put("sldl_convuomcode",XferItemjson.get("scq_uomcode").toString().toUpperCase());
                    jsNew.put("sldl_unitprice",0);
                    jsNew.put("sldl_gstpurcode","");
                    jsNew.put("sldl_gsttaxrates",0);
                    jsNew.put("sldl_gstamt",0); //not included, if needed pls recalculate base on qty transferred
                    jsNew.put("sldl_grosstotal",0);
                    jsNew.put("systemname","PORTAL");
                    jsNew.put("By","");
                    jsNew.put("recstatus","1");    
jsNew.put("CONTROL_DATETIME", sControlDateTime);

                    BLL_Common.Common_Object objLedgerDtl = BusinessLogic.Servlet_StockLedger.UPDATE_STOCK_LEDGER(SiteName, jsNew);             
                    if (objLedgerDtl.getObjectArray(0).toString().equals("00000")) {
                            sMethod = null;
                            objLedgerDtl.commit();
                            b = objLedgerDtl.getObjectArray(0).toString().equals("00000");
//20181219 amira 
                            /*
                            jsNew.put("sldl_location",sLocation);  
                            jsNew.put("sldl_qty",dRevQty); 
                            jsNew.put("sldl_convqty",dRevQty); 
                            BLL_Common.Common_Object objLedgerDtlRev = BusinessLogic.Servlet_StockLedger.UPDATE_STOCK_LEDGER(SiteName, jsNew);             
                            if (objLedgerDtlRev.getObjectArray(0).toString().equals("00000")) 
                            { 
                                objLedgerDtlRev.commit();
                            }
                            else
                            {
                                objLedgerDtlRev.rollback();
                            } */
//20181219 amira
                    }
                    else {
                            sMethod = null;
                            objLedgerDtl.rollback();
                        }
                }
                
            }
        }

        return b;//objXferItem.getObjectArray(0).toString().equals("00000");
    }
  
    
    public static ArrayList Despatch_Items(HttpServletRequest request, String JsonDespatchItem, String DespHdrIdx) throws IOException, SQLException {
           
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        boolean b = false;
        String sMethod = null;
        DAL_StockDespatch obj_Desp = new DAL_StockDespatch();
        BLL_Common.Common_Object objDespItem = new BLL_Common.Common_Object();
        JSONArray DespItem_array = (JSONArray) JSONSerializer.toJSON(JsonDespatchItem);
        
        String[] aryDtlIdxs = new String[DespItem_array.size()];
        ArrayList arylstDtlIdxs = new ArrayList();
        
        int i=0;
        if (DespItem_array.size() > 0) {
            for (Object js : DespItem_array) {
                System.out.println("js-->" + js);
               
                if (js != null)
                {
                try {
                JSONObject DespItemjson = (JSONObject) js;
                
                String sFunction = DespItemjson.getString("FUNCTION");
                        
                sMethod = "ADD_DESPATCH_DETAIL";
                
                switch (sFunction) {
                    case "INSERT":
                        sMethod = "ADD_DESPATCH_DETAIL";
                        break;
                    case "UPDATE":
                        sMethod = "UPD_DESPATCH_DETAIL";
                        break;
//                    case "DELETE":
//                        sMethod = "DEL_PRDPRICE";
//                        break;
                    case "NO":
                        break;
                }

                if (sMethod != null) {
                    i=i+1;
                    
                    double dPrevAccpQty = Double.parseDouble(DespItemjson.get("PREVACCPQTY").toString());
                    double dTotAccpQty = Double.parseDouble(DespItemjson.get("ACCPQTY").toString())  + dPrevAccpQty;
                            
                    String[] aryDtl = {
                    sMethod, /*sMethod            varchar(30),*/
                    DespHdrIdx, /*sdesh_despatchhdridx INTEGER,*/
                    DespItemjson.get("DESPDTLIDX").toString(),// "0", /*sdesd_despatchdtlidx INTEGER ,*/
                    "", /*sdesh_company         VARCHAR(10),*/
                    "", /*sdesh_docno                 VARCHAR(10),*/
                    "", /*sdesh_docdate         DATETIME,*/
                    "", /*sdesh_remark         VARCHAR(100),*/
                    "", /*sdesh_status        VARCHAR(4),*/
                    "", /*sdesh_personname        VARCHAR(200),*/
                    "", /*sdesh_personid        VARCHAR(20),*/
                    DespItemjson.get("LOCATION_FROM").toString().toUpperCase(), /*sdesh_issuelocation          VARCHAR(10),*/
                    DespItemjson.get("LOCATION_TO").toString().toUpperCase(), /*sdesh_recievelocation        VARCHAR(10),*/
                    String.valueOf(i), /*sdesd_lineno        INTEGER,*/
                    DespItemjson.get("PRODCODE").toString().toUpperCase(), /*sdesd_stockcode        VARCHAR(16),*/
                    DespItemjson.get("UOM").toString().toUpperCase(), /*sdesd_uomcode        VARCHAR(6),*/
                    "0", /*sdesd_uomidx        INTEGER,*/
                    DespItemjson.get("QTY").toString().toUpperCase(), /*sdesd_qty        NUMERIC(15,3),*/
                    DespItemjson.get("LOCATION_FROM").toString().toUpperCase(), /*sdesd_issuelocation        VARCHAR(10),*/
                    DespItemjson.get("LOCATION_TO").toString().toUpperCase(), /*sdesd_recievelocation        VARCHAR(10),*/
                    DespItemjson.get("STATUS").toString().toUpperCase(), /*sdesd_status        VARCHAR(4),*/
                    DespItemjson.get("REMARKS").toString(), /*sdesd_remarks        VARCHAR(200),*/
                    DespItemjson.get("XFERIDX").toString().toUpperCase(), /*sdesd_stockxfrdtlidx        INTEGER,*/
                    Double.toString(dTotAccpQty), //DespItemjson.get("ACCPQTY").toString().toUpperCase(), /*ACCPQTY */
                    
                    (String) session.getAttribute("loginid"), /*sBy                varchar(10),*/
                    "1", /*sRecStatus         varchar(4),*/
                    DespItemjson.get("CONTROL_DATETIME").toString() // CreatedDT VARCHAR(20)

                };
                
                    objDespItem = obj_Desp.DAL_ADDEDIT_STOCKT_DESPATCH(SiteName, aryDtl);
                    // System.out.println();
                    if (objDespItem.getObjectArray(0).toString().equals("00000")) {
                        sMethod = null;
                        objDespItem.commit();
                        b = objDespItem.getObjectArray(0).toString().equals("00000");
                        aryDtlIdxs[i-1] = objDespItem.getObjectArray(3).toString();
                        
                        
                        //arylstDtlIdxs.add(objDespItem.getObjectArray(3).toString());
                        String[] resultsArray = new String[2];
                        resultsArray[0] = DespItemjson.get("XFERIDX").toString();
                        resultsArray[1] = DespItemjson.get("QTY").toString();
                        arylstDtlIdxs.add(resultsArray);
                        
//                        DAL_StockTransfer objXfr = new DAL_StockTransfer();
//                        String[] upd ={"UPD_DISPATCHED_QTY",
//                            "0",
//                           DespItemjson.get("XFERIDX").toString(),
//                            "0","0","0","0","0","0","0",
//                            "0","0","0","0","0","0","0",
//                            null,"0","0","0","0","0","0",
//                            "0","0","0","0","0","0","0",
//                            "0","0","0",
//                            DespItemjson.get("QTY").toString(),
//                            "0","0","","0","0","0","0","0"};
//                        objXfr.DAL_ADDEDIT_STOCKTRANSFER(upd);
                        
                        
                        //DespItemjson.put("XFRHDRIDX", objDespItem.getObjectArray(3).toString());
                    } else {
                        sMethod = null;
                        objDespItem.rollback();
                    }
                }
            }
                catch (Exception e) 
                {
                   
                 }
                }
        }
        }
        if (b)
        {
            //return aryDtlIdxs;
            return arylstDtlIdxs;
        }
        else
        {
            return null;
        }
        //return b;//objDespItem.getObjectArray(0).toString().equals("00000");
    }
    
    public static boolean UpdateTemporaryStockBalance(HttpServletRequest request,String CompCode, String JsonXferItem ) throws ServletException, IOException, SQLException //update temporary stock balance
    {
        // This process is a reversal of UpdateTemporaryStockBalance in StockTransfer
        boolean b = false;
         
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
         
        JSONArray aryXferItem = (JSONArray) JSONSerializer.toJSON(JsonXferItem);
         
        if (aryXferItem.size() > 0) 
        {
            for (Object js : aryXferItem) 
            {
                
                JSONObject XferItemJs = (JSONObject) js;
                String sComp = CompCode; //XferItemJs.get("COMPCODE").toString(); //missing
                double dXfrQty = Double.parseDouble(XferItemJs.get("ACCPQTY").toString()); //ACCPQTY
                String sUOMFrom = XferItemJs.get("UOM").toString(); //UOM
                String sUOMTo = XferItemJs.get("UOM").toString(); //UOM
                String sLocationFrom = XferItemJs.get("LOCATION_FROM").toString(); 
                String sLocationTo = XferItemJs.get("LOCATION_TO").toString();
                String sStkCode = XferItemJs.getString("PRODCODE").toString();
                
                JSONObject jsUpdStkBal = new JSONObject();  
                jsUpdStkBal.put("FUNCTION", "UPDATE_TEMPORARY_STOCK_BALANCE");
                jsUpdStkBal.put("bal_companycode", sComp);
                jsUpdStkBal.put("bal_location", sLocationTo);
                jsUpdStkBal.put("bal_stockcode", sStkCode);                                                
                jsUpdStkBal.put("bal_uom", sUOMTo);                                
                jsUpdStkBal.put("UpdateQty", dXfrQty  * -1);    
                jsUpdStkBal.put("BY", (String) session.getAttribute("loginid"));
                jsUpdStkBal.put("recstatus", "1");
                b = BusinessLogic.Servlet_Stock.UPDATE_STOCK_BALANCE(jsUpdStkBal, SiteName);
                
                if (b)
                {                
                    JSONObject jsUpdStkBalDeduct = new JSONObject();  
                    jsUpdStkBalDeduct.put("FUNCTION", "UPDATE_TEMPORARY_STOCK_BALANCE");
                    jsUpdStkBalDeduct.put("bal_companycode", sComp);
                    jsUpdStkBalDeduct.put("bal_location", sLocationFrom);
                    jsUpdStkBalDeduct.put("bal_stockcode", sStkCode);                                                
                    jsUpdStkBalDeduct.put("bal_uom", sUOMTo);                                
                    jsUpdStkBalDeduct.put("UpdateQty", dXfrQty);    
                    jsUpdStkBalDeduct.put("BY", (String) session.getAttribute("loginid"));
                    jsUpdStkBalDeduct.put("recstatus", "1");
                    BusinessLogic.Servlet_Stock.UPDATE_STOCK_BALANCE(jsUpdStkBalDeduct, SiteName);
                }
                                
            }
        }
         
        return b;
     }
   
    public void GET_STOCK_DESPATCH_LIST(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
 
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        //Get page and rows value from JSP page
        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));

        String sDespHdrIdx = "";
        String sDespDtlIdx = "";
        String sCompCode = "";
        String sStkCode = "";
        String sMethod = ""; 
                       
        String sLocation = "";
        String sPerson = "";
        
        String sDocDate = "";
       
        sMethod = ""; //request.getParameter("METHOD");
        
        sDespHdrIdx = request.getParameter("DESPHDRIDX");   
        sDespDtlIdx = request.getParameter("DESPDTLIDX");   
                
        sStkCode = request.getParameter("STKCODE");         
        sCompCode = request.getParameter("COMPCODE");          
        sLocation = request.getParameter("LOCATION");
        sPerson = request.getParameter("PERSON");  
        sDocDate = request.getParameter("DOCDATE");  
         
        
        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }
        
        DAL_StockDespatch LocStkBalList = new DAL_StockDespatch();
        
        int total = 0;
        double pageval = 0;
        sMethod = "GET_STOCK_DESPATCH";
        BLL_Common.Common_Object ItemList = LocStkBalList.DAL_GET_STOCK_DESPATCH(SiteName, new String[]{sMethod, sDespHdrIdx, sDespDtlIdx, sStkCode, sCompCode, sLocation,sDocDate,sPerson,sOrder, Integer.toString(page), Integer.toString(rows)});
    
        sMethod = "COUNT_STOCK_DESPATCH";
        BLL_Common.Common_Object ItemTotalRow = LocStkBalList.DAL_GET_STOCK_DESPATCH(SiteName, new String[]{sMethod, sDespHdrIdx, sDespDtlIdx, sStkCode, sCompCode, sLocation,sDocDate,sPerson,"", "", ""});
      
        //Execute all queries here
        try {

            total = ItemTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", ItemList.getJSONArray(0));

        //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }
        
        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    public void GET_STOCK_DESPATCH_HEADER(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
 
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        //Get page and rows value from JSP page
        int page = 0; //Integer.parseInt(request.getParameter("page"));
        int rows = 0; //Integer.parseInt(request.getParameter("rows"));

        String sDespHdrIdx = "";
        String sDespDtlIdx = "";
        String sCompCode = "";
        String sStkCode = "";
        String sMethod = ""; 
                      
        String sLocation = "";
        String sPerson = "";
        
        String sDocDate = "";
      
        sMethod = ""; //request.getParameter("METHOD");
        
        sDespHdrIdx = request.getParameter("DESPHDRIDX");   
        sDespDtlIdx = request.getParameter("DESPDTLIDX");   
                
        sStkCode = request.getParameter("STKCODE");         
        sCompCode = request.getParameter("COMPCODE");          
        sLocation = request.getParameter("LOCATION");
        sPerson = request.getParameter("PERSON");  
        sDocDate = request.getParameter("DOCDATE");  
         
        
        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }
        
        DAL_StockDespatch LocStkBalList = new DAL_StockDespatch();
        
        int total = 0;
        double pageval = 0;
        sMethod = "GET_STOCK_DESPATCH_HEADER";
       BLL_Common.Common_Object ItemList = LocStkBalList.DAL_GET_STOCK_DESPATCH(SiteName, new String[]{sMethod, sDespHdrIdx, sDespDtlIdx, sStkCode, sCompCode, sLocation,sDocDate,sPerson,sOrder, Integer.toString(page), Integer.toString(rows)});
    
//       sMethod = "COUNT_STOCK_DESPATCH";
//       BLL_Common.Common_Object ItemTotalRow = LocStkBalList.DAL_GET_STOCK_DESPATCH(new String[]{sMethod, sStkCode, sCompCode, sLocation,sDocDate,sPerson,"", "", ""});
// 
     
        //Execute all queries here
        try {

//            total = ItemTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");
//
//            if (total > 0) {
//                pageval = (double) total / rows;
//            } else {
//                pageval = 0;
//            }
//
//            //put total no records in json object with total key           
//            json.put("total", (int) (Math.ceil(pageval)));
//            json.put("page", page);
//            json.put("records", total);

            json.put("rows", ItemList.getJSONArray(0));

        //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }
        
        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    public void GET_STOCK_DESPATCH_ITEMS(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
 
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        //Get page and rows value from JSP page
        int page = 0; //Integer.parseInt(request.getParameter("page"));
        int rows = 0; //Integer.parseInt(request.getParameter("rows"));

        String sDespHdrIdx = "";
        String sDespDtlIdx = "";
        String sCompCode = "";
        String sStkCode = "";
        String sMethod = ""; 
                        
        String sLocation = "";
        String sPerson = "";
        
        String sDocDate = "";
      
        sMethod = ""; //request.getParameter("METHOD");
        
        sDespHdrIdx = request.getParameter("DESPHDRIDX");   
        sDespDtlIdx = request.getParameter("DESPDTLIDX");   
                
        sStkCode = request.getParameter("STKCODE");         
        sCompCode = request.getParameter("COMPCODE");          
        sLocation = request.getParameter("LOCATION");
        sPerson = request.getParameter("PERSON");  
        sDocDate = request.getParameter("DOCDATE");  
                
        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }
        
        DAL_StockDespatch LocStkBalList = new DAL_StockDespatch();
        
        int total = 0;
        double pageval = 0;
        sMethod = "GET_STOCK_DESPATCH_ITEMS";
        BLL_Common.Common_Object ItemList = LocStkBalList.DAL_GET_STOCK_DESPATCH(SiteName, new String[]{sMethod, sDespHdrIdx, sDespDtlIdx, sStkCode, sCompCode, sLocation,sDocDate,sPerson,sOrder, Integer.toString(page), Integer.toString(rows)});
    
//       sMethod = "COUNT_STOCK_DESPATCH";
//       BLL_Common.Common_Object ItemTotalRow = LocStkBalList.DAL_GET_STOCK_DESPATCH(new String[]{sMethod, sStkCode, sCompCode, sLocation,sDocDate,sPerson,"", "", ""});
// 
     

        //Execute all queries here
        try {

//            total = ItemTotalRow.getJSONArray(0).getJSONObject(0).getInt("Total");
//
//            if (total > 0) {
//                pageval = (double) total / rows;
//            } else {
//                pageval = 0;
//            }
//
//            //put total no records in json object with total key           
//            json.put("total", (int) (Math.ceil(pageval)));
//            json.put("page", page);
//            json.put("records", total);

            json.put("rows", ItemList.getJSONArray(0));

        //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }
        
        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    
    
// 
//     protected void UPDATE_DESPATCH(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
//        response.setContentType("text/html");
//        PrintWriter out = response.getWriter();
//        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
//        //JSONParser parser = new JSONParser();
//        //boolean return_bool = false;
//        //String return_msg = "";
//
//        String sMessage = "";
//        JSONArray jsonDespatch = JSONArray.fromObject(request.getParameter("UPDPROD"));
//        String JsonItem = request.getParameter("UOMCONV");
//        String JsonPrice = request.getParameter("PRDPRICE");
//        DAL_StockDespatch obj_Despatch = new DAL_StockDespatch();
//        String[] aryDespatch = {
//            "", /*sMethod varchar(30),*/
//            "", /*sdesh_despatchhdridx INTEGER,*/
//            "", /*sdesd_despatchdtlidx INTEGER*/
//            "", /*sdesh_company VARCHAR(10),*/
//            "", /*sdesh_docno VARCHAR(10),*/
//            "", /*sdesh_docdate VARCHAR(20),*/
//            "", /*sdesh_remark VARCHAR(100),*/
//            "", /*sdesh_status VARCHAR(4),*/
//            "", /*sdesh_personname VARCHAR(200),*/
//            "", /*sdesh_personid VARCHAR(20),*/
//            "", /*sdesh_issuelocation VARCHAR(10),*/
//            "", /*sdesh_recievelocation VARCHAR(10),*/
//            "", /*sdesd_lineno INTEGER,*/
//            "", /*sdesd_stockcode VARCHAR(16),*/
//            "", /*sdesd_uomcode VARCHAR(6),*/
//            "", /*sdesd_uomidx INTEGER,*/
//            "", /*sdesd_qty NUMERIC(15,3),*/
//            "", /*sdesd_issuelocation VARCHAR(10),*/
//            "", /*sdesd_recievelocation VARCHAR(10),*/
//            "", /*sdesd_status VARCHAR(4),*/
//            "", /*sdesd_remarks VARCHAR(200),*/
//            "", /*sdesd_stockxfrdtlidx INTEGER,*/
//            "", /*sBy varchar(10),*/
//            "", /*srecstatus varchar(4),*/
//
//
//            "UPDATE_PRODUCTMASTER" /*sMethod VARCHAR(30)*/,
//            "" /*1-sStockCode VARCHAR(20)*/,
//            ""/*2-sStockDesc VARCHAR(100)*/,
//            ""/*3-sStockGrpCode VARCHAR(6)*/,
//            ""/*4-sStockTypeCode VARCHAR(6)*/,
//            ""/*5-sBaseUOMCode VARCHAR(6)*/,
//            ""/*""/*6-sBarCode VARCHAR(50)*/,
//            ""/*""/*7-sPrecautionCode VARCHAR(10)*/,
//            ""/*""/*8-sInstructionCode VARCHAR(10)*/,
//            ""/*""/*9-sIndicationCode VARCHAR(10)*/,
//            "Y"/*""/*10-sIsActive VARCHAR(1)*/,
//            "N"/*""/*11-sIsRestrict VARCHAR(1)*/,
//            "N"/*""/*12-sIsPsychotropic VARCHAR(1)*/,
//            ""/*""/*13-sDosageCode VARCHAR(10)*/,
//            ""/*""/*14-sFrequencyCode VARCHAR(10)*/,
//            "0"/*""/*15-sBaseUOMIdx VARCHAR(10)*/,
//            "0"/*""/*16-sUnitCost VARCHAR(10)*/,
//            "Y"/*""/*17-sPrintLabel VARCHAR(1)*/,
//            ""/*""/*18-sConsumable VARCHAR(6)*/,
//            "N"/*""/*19-sIsOTC VARCHAR(1)*/,
//            ""/*""/*20-sOTCGroup VARCHAR(6)*/,
//            "N"/*""/*21-sIsVCN VARCHAR(1)*/,
//            ""/*""/*22-sShortName VARCHAR(50)*/,
//            ""/*""/*23-sGSTPurCode VARCHAR(8)*/,
//            ""/*""/*24-sGSTMedSupCode VARCHAR(8)*/,
//            ""/*""/*25-sGSTOTCSupCode VARCHAR(8)*/,
//            ""/*""/*26-sBy VARCHAR(10)*/,
//            "1"/*""/*27-srecstatus VARCHAR(4)*/,
//            ""/*""/*28-sConvTo VARCHAR(10)*/,
//            ""/*""/*29-sFactor VARCHAR(10)*/,
//            ""/*""/*30-sPrice1 VARCHAR(10)*/,
//            ""/*""/*31-sPrice2 VARCHAR(10)*/,
//            ""/*""/*32-sPrice3 VARCHAR(10)*/,
//            ""/*""/*33-sPrice4 VARCHAR(10)*/,
//            ""/*""/*34-sIDX VARCHAR(10)*/,
//            ""/*""/*35-sFunction VARCHAR(20)*/};
//
//        int length = jsonDespatch.size();
//        for (int i = 0; i < length; i++) {
//            JSONObject jsonObject = jsonDespatch.getJSONObject(i);
//            String tempValue = jsonObject.getString("value");
//
//            if (jsonObject.getString("name").equals("lblPrdCode")) {
//                aryDespatch[1] = tempValue.toUpperCase();
//
//            } else if (jsonObject.getString("name").equals("ddlPrdGrp")) {
//                aryDespatch[3] = tempValue.toUpperCase();
//
//            } else if (jsonObject.getString("name").equals("ddlPrdType")) {
//                aryDespatch[4] = tempValue.toUpperCase();
//
//            } else if (jsonObject.getString("name").equals("ddlPrdUOM")) {
//                aryDespatch[5] = tempValue.toUpperCase();
//
//            } else if (jsonObject.getString("name").equals("txtBarCode")) {
//                aryDespatch[6] = tempValue.toUpperCase();
//
//            } else if (jsonObject.getString("name").equals("ddlPrecaution")) {
//                aryDespatch[7] = tempValue.toUpperCase();
//
//            } else if (jsonObject.getString("name").equals("ddlInstruction")) {
//                aryDespatch[8] = tempValue.toUpperCase();
//            } else if (jsonObject.getString("name").equals("ddlDuration")) {
//                aryDespatch[9] = tempValue.toUpperCase();
//
//            } else if (jsonObject.getString("name").equals("ddlDosage")) {
//                aryDespatch[13] = tempValue.toUpperCase();
//            } else if (jsonObject.getString("name").equals("ddlFreq")) {
//                aryDespatch[14] = tempValue.toUpperCase();
//            } else if (jsonObject.getString("name").equals("rdPrdCat")) {
//                aryDespatch[18] = tempValue.toUpperCase();
//            } else if (jsonObject.getString("name").equals("txtShortName")) {
//                aryDespatch[22] = tempValue.toUpperCase();
//            }
//
//        }
//
//        BLL_Common.Common_Object obj = obj_Despatch.DAL_ADDEDIT_PRODUCT(aryDespatch);
//
//        boolean bReturn = false;
//        //boolean UomReturn = false;
//        // String sMethod = null;
//        try {
//            if (obj.getObjectArray(0).toString().equals("00000")) {
//                // Remove_UomConvert(JsonItem);
//                TRX_UOM_CONVERT(JsonItem);
//                //System.out.println("UomReturn-->" + UomReturn);
//
//                Product_Pricing(JsonPrice);
//
//                obj.commit();
//                bReturn = true;
//                sMessage = obj.getObjectArray(1).toString();
//            } else {
//                // objPrice.rollback();
//                //  objUom.rollback();
//                obj.rollback();
//            }
//        } catch (Exception e) {
//            try {
//                obj.rollback();
//            } catch (SQLException ex) {
//                bReturn = false;
//            }
//        }
//
//        json.put("bool", bReturn);
//        json.put("msg", sMessage);
//        //json.put("CorpCode", sCorpCode);
//        out.println(json);
//
//    }

}