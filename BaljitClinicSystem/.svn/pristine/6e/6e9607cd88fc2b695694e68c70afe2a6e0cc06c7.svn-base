package BusinessLogic;

import static BusinessData.BaseDAL.Object_BLL_Common;
import BusinessData.DAL_GRN;
import BusinessData.DAL_PopulateData;
import BusinessData.DAL_PurchaseOrder;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.List;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;

/**
 *
 * @author N3355
 */
@WebServlet(name = "Servlet_PurchaseOrder", urlPatterns = {"/Servlet_PurchaseOrder"})
public class Servlet_PurchaseOrder extends HttpServlet {
    
    private static DecimalFormat df2 = new DecimalFormat(".##");

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet Servlet_PurchaseOrder</title>");
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet Servlet_PurchaseOrder at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }
    //Kenji Low Insert Po Header
    protected void INSERT_PO(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject jsonReturn = new net.sf.json.JSONObject();
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
      //  try {
            String sMessage = "";
            DAL_PurchaseOrder obj_Po = new DAL_PurchaseOrder();
            DAL_PopulateData obj_No = new DAL_PopulateData();
            JSONArray jsonPOMaster = JSONArray.fromObject(request.getParameter("POMASTER"));

            String sPoDetail = request.getParameter("PODETAIL");
            JSONObject jsonFilter = (JSONObject) JSONSerializer.toJSON(sPoDetail);
            JSONObject json = null;
            
            JSONArray jsonPoArr = jsonFilter.names();            
            JSONArray aryPOItem = null;
            JSONArray aryPoNo = null;
            JSONArray aryGrpPoNo = null;
           

            double sumQty = 0;
            double sumBonus = 0;
            double sumGross = 0;
            double sumNett = 0, sumDiscVal = 0, sumGstAmt=0;
            boolean bReturn = false;
            String sCompany = "", sSuppCode = "", sPoNo = "", sPoDT = "", sGrpPoNo="";
            
             BLL_Common.Common_Object rsGRPPoNo = obj_No.DAL_GetNumber(SiteName, new String[]{"GET_NUMBER","POGRP",""});  
             aryGrpPoNo = (JSONArray) JSONSerializer.toJSON(rsGRPPoNo.getJSONArray(0).toString());
             JSONObject objGrpPoNo = aryGrpPoNo.getJSONObject(0);
             sGrpPoNo = objGrpPoNo.getString("NewNumber");
             
            for (int i = 0; i < jsonPoArr.size(); i++) {
                JSONArray innerArray = jsonFilter.getJSONArray((String) jsonPoArr.get(i));
                // JSONArray PrdDetailArr = (JSONArray) JSONSerializer.toJSON(innerArray);
                if (sCompany.equals("")) {
                    sCompany = jsonPoArr.get(i).toString();
                } else {
                    sCompany = jsonPoArr.get(i).toString();
                    sumQty = 0;
                    sumBonus = 0;
                    sumGross = 0;
                    sumNett = 0;
                    sumGstAmt = 0;
                    sumDiscVal = 0;
                }

                BLL_Common.Common_Object rsPoNo = obj_No.DAL_GetNumber(SiteName, new String[]{"GET_NUMBER","PO",""});  
                aryPoNo = (JSONArray) JSONSerializer.toJSON(rsPoNo.getJSONArray(0).toString());
                JSONObject objPoNo = aryPoNo.getJSONObject(0);                
                sPoNo =  objPoNo.getString("NewNumber");
                
                for (Object js : innerArray) {
                    json = (JSONObject) js;

                    if (sCompany.equals(json.get("COMPANY").toString().trim())) {
                        sumQty = (double) sumQty + json.getDouble("QTY");
                        sumBonus = (double) sumBonus + json.getDouble("BONUS");
                        sumGross = (double) sumGross + json.getDouble("GROSSTOTAL");
                        sumNett = (double)  sumNett + json.getDouble("NETTTOTAL");
                        sumDiscVal = (double) sumDiscVal + json.getDouble("DISCVal");
                        sumGstAmt = (double) sumGstAmt + json.getDouble("GSTAMT");
                    }

                 aryPOItem = JSONArray.fromObject(json);                 
                 
                    sCompany = json.get("COMPANY").toString();

                }
                String[] aryPO = {
                    "ADD_PRODUCTMASTER" /*0. pMethod    varchar(30)*/,
                    sCompany /*1. pCompCode  varchar(10)*/,
                    sGrpPoNo /*2. pPoGrpNo   varchar(10)*/,
                    "" /*3. pSuppCode  varchar(10)*/,
                    sPoNo /*4. pPoNo      varchar(30)*/,
                    sPoDT /*5. pPoDT      varchar(20)*/,
                    "" /*6. pDONo      varchar(30)*/,
                    "" /*7. pDODT      varchar(30)*/,
                    "" /*8. pInvNo     varchar(30)*/,
                    "" /*9. pInvDT     varchar(20)*/,
                    "" /*10. pRefNo     varchar(30)*/,
                    "" /*11. pRefDT     varchar(20)*/,
                    "" /*12. pLocCode   varchar(10)*/,
                    String.valueOf(df2.format(sumDiscVal)) /*13. pTotalDiscAmt varchar(15)*/,
                    String.valueOf(df2.format(sumNett)) /*14. pTotalNettAmt varchar(15)*/,
                    "" /*15. pPurchaseOpt  varchar(2)*/,
                    "O" /*16. pPOStatus      varchar(1)*/,
                    "" /*17. pPurchaser     varchar(10)*/,
                    "" /*18. pDelvCont      varchar(100)*/,
                    "" /*19. pDelAdd1       varchar(50)*/,
                    "" /*20. pDelAdd2           varchar(50)*/,
                    "" /*21. pDelAdd3           varchar(50)*/,
                    "" /*22. pDelPostCode       varchar(10)*/,
                    "" /*23. pDelTelNo          varchar(20)*/,
                    "" /*24. pDelFaxNo          varchar(20)*/,
                    "" /*25. pBillCont          varchar(100)*/,
                    "" /*26. pBillAdd1          varchar(50)*/,
                    "" /*27. pBillAdd2          varchar(50)*/,
                    "" /*28. pBillAdd3          varchar(50)*/,
                    "" /*29. pBillPostCode      varchar(10)*/,
                    "" /*30. pBillTelNo         varchar(20)*/,
                    "" /*31. pBillFaxNo         varchar(20)*/,
                    "" /*32. pSuppCont          varchar(100)*/,
                    "" /*33. pCreditTerm        varchar(10)*/,
                    "" /*34. pDelDate           varchar(20)*/,
                    "0" /*35. pFullFill          varchar(10)*/,
                    "" /*36. pRemarks           varchar(250)*/,
                    String.valueOf(df2.format((sumGstAmt))) /*37. pGSTTotal varchar(15)*/,
                    String.valueOf(df2.format((sumGross))) /*38. pGrossTotal varchar(15)*/,
                    "" /*39. pGSTInc            varchar(1)*/,
                    "1" /*40. precstatus         varchar(4)*/,
                    "" /*41. pPOIDX             varchar(10)*/,
                    "" /*42. pLineNo            varchar(10)*/,
                    "" /*43. pStkCode           varchar(16)*/,
                    "" /*44. pUOMCode           varchar(6)*/,
                    "" /*45. pUnitCost          varchar(15)*/,
                    "" /*46. pQty               varchar(15)*/,
                    "" /*47. pDiscAmt           varchar(15)*/,
                    "" /*48. pSubTotalAmt       varchar(15)*/,
                    "" /*49. pDiscPercent       varchar(15)*/,
                    "" /*50. pDiscOption        varchar(1)*/,
                    "" /*51. pQtyBonus          varchar(15)*/,
                    "" /*52. pRcvQty            varchar(15)*/,
                    "" /*53. pRcvQtyBonus       varchar(15)*/,
                    "" /*54. pDTLFullFill       varchar(10)*/,
                    "" /*55. pGSTPurCode        varchar(8)*/,
                    "" /*56. pGstTaxRates       varchar(15)*/,
                    "0" /*57. pGstAmt            varchar(15)*/,
                    "" /*58. pGrossAmt          varchar(15)*/,
                    (String) session.getAttribute("loginid") /*59. sBy                varchar(10)*/};

                int length = jsonPOMaster.size();
                for (int x = 0; x < length; x++) {
                    JSONObject jsonObject = jsonPOMaster.getJSONObject(x);
                    String tempValue = jsonObject.getString("value");

                    if (jsonObject.getString("name").equals("ddlSupplier")) {
                        aryPO[3] = tempValue.toUpperCase();

                    } else if (jsonObject.getString("name").equals("txtRefNo")) {
                        aryPO[10] = tempValue.toUpperCase();

                    } else if (jsonObject.getString("name").equals("txtPoDate")) {
                        aryPO[5] = tempValue.toUpperCase();
                    } else if (jsonObject.getString("name").equals("chkGstInc")) {
                        aryPO[39] = tempValue.toUpperCase();
                    }else if (jsonObject.getString("name").equals("txtPoDate")) {
                        aryPO[11] = tempValue.toUpperCase();

                    }

                }
                //System.out.println("aryPO-->" + aryPO.toString());
                BLL_Common.Common_Object obj = obj_Po.DAL_ADDEDIT_PO(SiteName, aryPO);
                
              

                try {
                    if (obj.getObjectArray(0).toString().equals("00000")) {
                        TRX_PO_Detail(sPoDetail, sCompany, obj.getObjectArray(2).toString(), (String) session.getAttribute("loginid"), SiteName);
                        obj.commit();
                        bReturn = true;
                        sMessage = sGrpPoNo;//obj.getObjectArray(1).toString();
                    } else {
                        obj.rollback();
                    }
                } catch (Exception e) {
                    try {
                            obj.rollback();
                        } catch (SQLException ex) {
                            bReturn = false;
                        }
                }

               
            }

//        } catch (Exception e) {
//            Object_BLL_Common.write_log("INSERT_PO Error : " + e.toString(), "");
//            //out.println("Exception Error.");
//            e.printStackTrace();
//        } finally {
//            // BLL_Common.closeResultSet(rs,"");
//        }
            
            jsonReturn.put("bool", bReturn);
            jsonReturn.put("msg", sMessage);
            out.println(jsonReturn);


    }
    //Kenji Low End Insert Po Header
    
    
    //Kenji Low - Insert Po Detail
    public static boolean TRX_PO_Detail(String JsonString, String pCompany, String IdxKey, String sBy, String SiteName) throws IOException, SQLException {       
        
        boolean b = false;
        DAL_PurchaseOrder obj_Po = new DAL_PurchaseOrder();
        BLL_Common.Common_Object objPoDet = new BLL_Common.Common_Object();
        JSONObject jsonFilter = (JSONObject) JSONSerializer.toJSON(JsonString);
        JSONArray jsonPoArr = jsonFilter.names();

        int iLineNo = 1;
       // Double pGrossTotal = 0;
        // String[] aryPOItem = null;
      //  System.out.println("IDXKEY-->" + IdxKey);
        for (int i = 0; i < jsonPoArr.size(); i++) {
            JSONArray innerArray = jsonFilter.getJSONArray((String) jsonPoArr.get(i));
            for (Object js : innerArray) {
                JSONObject json = (JSONObject) js;

                if (pCompany.equals(json.get("COMPANY").toString().trim())) {
                    // System.out.println("pCompany-->" + json.get("COMPANY").toString().trim());
                    String[] aryPOItem = {
                        "ADD_PRODUCTDETAIL" /*0. pMethod    varchar(30)*/,
                        "" /*1. pCompCode  varchar(10)*/,
                        "0" /*2. pPoGrpNo   varchar(10)*/,
                        "" /*3. pSuppCode  varchar(10)*/,
                        "" /*4. pPoNo      varchar(30)*/,
                        "" /*5. pPoDT      varchar(20)*/,
                        "" /*6. pDONo      varchar(30)*/,
                        "" /*7. pDODT      varchar(30)*/,
                        "" /*8. pInvNo     varchar(30)*/,
                        "" /*9. pInvDT     varchar(20)*/,
                        "" /*10. pRefNo     varchar(30)*/,
                        "" /*11. pRefDT     varchar(20)*/,
                        "" /*12. pLocCode   varchar(10)*/,
                        "" /*13. pTotalDiscAmt varchar(15)*/,
                        "" /*14. pTotalNettAmt varchar(15)*/,
                        "" /*15. pPurchaseOpt  varchar(2)*/,
                        "" /*16. pPOStatus      varchar(1)*/,
                        "" /*17. pPurchaser     varchar(10)*/,
                        "" /*18. pDelvCont      varchar(100)*/,
                        "" /*19. pDelAdd1       varchar(50)*/,
                        "" /*20. pDelAdd2           varchar(50)*/,
                        "" /*21. pDelAdd3           varchar(50)*/,
                        "" /*22. pDelPostCode       varchar(10)*/,
                        "" /*23. pDelTelNo          varchar(20)*/,
                        "" /*24. pDelFaxNo          varchar(20)*/,
                        "" /*25. pBillCont          varchar(100)*/,
                        "" /*26. pBillAdd1          varchar(50)*/,
                        "" /*27. pBillAdd2          varchar(50)*/,
                        "" /*28. pBillAdd3          varchar(50)*/,
                        "" /*29. pBillPostCode      varchar(10)*/,
                        "" /*30. pBillTelNo         varchar(20)*/,
                        "" /*31. pBillFaxNo         varchar(20)*/,
                        "" /*32. pSuppCont          varchar(100)*/,
                        "" /*33. pCreditTerm        varchar(10)*/,
                        "" /*34. pDelDate           varchar(20)*/,
                        "0" /*35. pFullFill          varchar(10)*/,
                        "" /*36. pRemarks           varchar(250)*/,
                        "0" /*37. pGSTTotal           varchar(15)*/,
                        "" /*38. pGrossTotal varchar(15)*/,
                        json.get("GSTINC").toString().trim() /*39. pGSTInc            varchar(1)*/,
                        "1" /*40. precstatus         varchar(4)*/,
                        IdxKey /*41. pPOIDX             varchar(10)*/,
                        String.valueOf(iLineNo) /*42. pLineNo            varchar(10)*/,
                        json.get("PRDCODE").toString().trim() /*43. pStkCode           varchar(16)*/,
                        json.get("UOM").toString().trim() /*44. pUOMCode           varchar(6)*/,
                        json.get("UCOST").toString().trim() /*45. pUnitCost          varchar(15)*/,
                        json.get("QTY").toString().trim() /*46. pQty               varchar(15)*/,
                        json.get("DISCVal").toString().trim() /*47. pDiscAmt           varchar(15)*/,
                        json.get("NETTTOTAL").toString().trim() /*48. pSubTotalAmt       varchar(15)*/,
                        json.get("DISCAMT").toString().trim() /*49. pDiscPercent       varchar(15)*/,
                        json.get("DISC").toString().trim() /*50. pDiscOption        varchar(1)*/,
                        json.get("BONUS").toString().trim() /*51. pQtyBonus          varchar(15)*/,
                        "0" /*52. pRcvQty            varchar(15)*/,
                        "0" /*53. pRcvQtyBonus       varchar(15)*/,
                        "0" /*54. pDTLFullFill       varchar(10)*/,
                        json.get("GST").toString().trim() /*55. pGSTPurCode   varchar(8)*/,
                        json.get("GSTRATE").toString().trim() /*56. pGstTaxRates       varchar(15)*/,
                        json.get("GSTAMT").toString().trim() /*57. pGstAmt            varchar(15)*/,
                        json.get("GROSSTOTAL").toString().trim()/*58. pGrossAmt varchar(15)*/,
                        sBy /*59. sBy                varchar(10)*/};
                    
                    
                    
                  objPoDet = obj_Po.DAL_ADDEDIT_PO(SiteName, aryPOItem);
                    if (objPoDet.getObjectArray(0).toString().equals("00000")) {
                        b = objPoDet.getObjectArray(0).toString().equals("00000");
                        iLineNo = iLineNo + 1;
                        objPoDet.commit();
                    } else {                        
                        objPoDet.rollback();
                    }
                }
            }
          

           
        }
        
         return b;
    }
    //End Insert Po Detail

    
//LLT - bind po list
    public void Bind_PO_List(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException 
    {
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        String sSupCode = "", sCompany = "", sPONo="" , sDTFrom="", sDTTo="", sGrpNo="", sStkCode="", sPoStatus="", sStatus="";
        String pPoStatus = null;
          int countPoStatus;

        //JSON object
        JSONObject json = new JSONObject();

        //Get page and rows value from JSP page
        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));
        sSupCode = request.getParameter("SUPCODE");
        sCompany = request.getParameter("COMPANY");
        sPONo = request.getParameter("PONO");
        sDTFrom = request.getParameter("DTFROM");
        sDTTo = request.getParameter("DTTO");
        sGrpNo = request.getParameter("GRPNO");
        sStkCode = request.getParameter("STKCODE");
        sPoStatus = request.getParameter("POSTATUS");
        sStatus = request.getParameter("STATUS");
        
         if (!"".equals(sPoStatus) && sPoStatus != null) {
            countPoStatus = sPoStatus.length();
            pPoStatus = sPoStatus.substring(0, countPoStatus - 1);
        } else {
            pPoStatus = null;
        }

        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }

        //Calculate offset value
        //int offset = (page - 1) * rows;
        DAL_PurchaseOrder objPO = new DAL_PurchaseOrder();

        int total = 0;
        double pageval = 0;

        //LLT 2016-06-06 add parameter
        BLL_Common.Common_Object rsPo = objPO.DAL_GET_POLIST(SiteName, new String[]{
            "GET_PO_LIST", sSupCode, sCompany, sPONo, sStatus, sDTFrom, sDTTo, sGrpNo, sStkCode, pPoStatus, "", "", sOrder, Integer.toString(page), Integer.toString(rows)});

        BLL_Common.Common_Object rsPoTotal = objPO.DAL_GET_POLIST(SiteName, new String[]{
            "COUNT_PO_LIST", sSupCode, sCompany, sPONo, sStatus, sDTFrom, sDTTo, sGrpNo, sStkCode, pPoStatus, "", "", "", "",""});

        //Execute all queries here
        try {

            total = rsPoTotal.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", rsPo.getJSONArray(0));

            //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }

        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    //LLT - end bind po list 
    
    //kenji - bind po history
    public void Bind_PO_History(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException 
    {
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();

        String sSupCode = "", sCompany = "", sPONo="" , sDTFrom="", sDTTo="", sGrpNo="", sStkCode="", sPoStatus="";
        String pPoStatus = null;
          int countPoStatus;
        String sRefNo = ""; //LLT 2016-06-02 Add Ref no in seach criteria

        //JSON object
        JSONObject json = new JSONObject();

        //Get page and rows value from JSP page
        int page = Integer.parseInt(request.getParameter("page"));
        int rows = Integer.parseInt(request.getParameter("rows"));
        sSupCode = request.getParameter("SUPCODE");
        sCompany = request.getParameter("COMPANY");
        sPONo = request.getParameter("PONO");
        sDTFrom = request.getParameter("DTFROM");
        sDTTo = request.getParameter("DTTO");
        sGrpNo = request.getParameter("GRPNO");
        sStkCode = request.getParameter("STKCODE");
        sPoStatus = request.getParameter("POSTATUS");
        //sStatus = request.getParameter("STATUS");
        sRefNo = request.getParameter("REFNO"); //LLT 2016-06-02 Add Ref no in seach criteria
        
         if (!"".equals(sPoStatus)) {
            countPoStatus = sPoStatus.length();
            pPoStatus = sPoStatus.substring(0, countPoStatus - 1);
        } else {
            pPoStatus = "";
        }

        String sortName = request.getParameter("sidx");
        String sortOrder = request.getParameter("sord");
        String sOrder = "";
        if (sortName != null) {
            sOrder = sortName + " " + sortOrder;
        }

        //Calculate offset value
        //int offset = (page - 1) * rows;
        DAL_PurchaseOrder objPO = new DAL_PurchaseOrder();

        int total = 0;
        double pageval = 0;

        //LLT 2016-06-06 add parameter refno
        BLL_Common.Common_Object rsPoHist = objPO.DAL_GET_POLIST(SiteName, new String[]{
            "PO_HISTORY_LIST", sSupCode, sCompany, sPONo, "", sDTFrom, sDTTo, sGrpNo, sStkCode, pPoStatus, "",  sRefNo, sOrder, Integer.toString(page), Integer.toString(rows)});

        BLL_Common.Common_Object RsPoHistTotal = objPO.DAL_GET_POLIST(SiteName, new String[]{
            "COUNT_PO_HISTORY", sSupCode, sCompany, sPONo, "", sDTFrom, sDTTo, sGrpNo, sStkCode, pPoStatus, "", sRefNo, "", "", ""});

        //Execute all queries here
        try {

            total = RsPoHistTotal.getJSONArray(0).getJSONObject(0).getInt("Total");

            if (total > 0) {
                pageval = (double) total / rows;
            } else {
                pageval = 0;
            }

            //put total no records in json object with total key           
            json.put("total", (int) (Math.ceil(pageval)));
            json.put("page", page);
            json.put("records", total);

            json.put("rows", rsPoHist.getJSONArray(0));

            //} catch (SQLException e1) {
        } catch (NullPointerException e1) {
            e1.printStackTrace();
        } finally {

        }

        //return json data to JSP page
        out.print(json);
        out.flush();
        out.close();
    }
    //kenji - end bind po history
    
    public void Bind_PO_Header(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession(); 
        String SiteName = (String) session.getAttribute("SiteName");
         
        PrintWriter out = response.getWriter();
        response.setContentType("text/json");
        //JSON object
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        try {
            String sPoNo = request.getParameter("PONO");
            DAL_PurchaseOrder objPO = new DAL_PurchaseOrder();
            BLL_Common.Common_Object objPoHead = objPO.DAL_GET_POLIST(SiteName, new String[]{
            "PO_DETAIL", "", "", sPoNo, "", "", "", "", "", "", "", "", "", "",""}); //LLT 2016-06-06 add parameter
            
            json.put("data", objPoHead.getJSONArray(0));
            out.print(objPoHead.getJSONArrayAsJSONObject("object"));

        } catch (Exception e) {
            out.println("Exception Error.");
            e.printStackTrace();
        } finally {
            // BLL_Common.closeResultSet(rs,"");
        }
    }   
      //kenji - end bind po history
    
    public void Bind_PO_Item(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
        PrintWriter out = response.getWriter();
        response.setContentType("text/json");
        //JSON object
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();

        try {
            String sIdx = request.getParameter("IDX");
            DAL_PurchaseOrder objPO = new DAL_PurchaseOrder();
            BLL_Common.Common_Object objPoItem = objPO.DAL_GET_POLIST(SiteName, new String[]{
            "PO_ITEM", "", "", "", "", "", "", "", "", "", sIdx, "", "", "",""}); //LLT 2016-06-06 add parameter
            
            json.put("data", objPoItem.getJSONArray(0));
            out.print(objPoItem.getJSONArrayAsJSONObject("object"));

        } catch (Exception e) {
            out.println("Exception Error.");
            e.printStackTrace();
        } finally {
            // BLL_Common.closeResultSet(rs,"");
        }
    }
     
       //Kenji Low Update Po Item
    protected void UPDATE_PO(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject jsonReturn = new net.sf.json.JSONObject();
        boolean bReturn = false;
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
      //  try {
            String sMessage = "";
            DAL_PurchaseOrder obj_Po = new DAL_PurchaseOrder();
            
            JSONArray jsonPOItem = JSONArray.fromObject(request.getParameter("POITEM"));

           //System.out.println("jsonPOItem-->" + jsonPOItem);
            
            String[] aryPOItem = {
                    "UPDATE_POITEM" /*0. pMethod    varchar(30)*/,
                    "" /*1. pCompCode  varchar(10)*/,
                    "" /*2. pPoGrpNo   varchar(10)*/,
                    "" /*3. pSuppCode  varchar(10)*/,
                    "" /*4. pPoNo      varchar(30)*/,
                    "" /*5. pPoDT      varchar(20)*/,
                    "" /*6. pDONo      varchar(30)*/,
                    "" /*7. pDODT      varchar(30)*/,
                    "" /*8. pInvNo     varchar(30)*/,
                    "" /*9. pInvDT     varchar(20)*/,
                    "" /*10. pRefNo     varchar(30)*/,
                    "" /*11. pRefDT     varchar(20)*/,
                    "" /*12. pLocCode   varchar(10)*/,
                    "" /*13. pTotalDiscAmt varchar(15)*/,
                    "" /*14. pTotalNettAmt varchar(15)*/,
                    "" /*15. pPurchaseOpt  varchar(2)*/,
                    "" /*16. pPOStatus      varchar(1)*/,
                    "" /*17. pPurchaser     varchar(10)*/,
                    "" /*18. pDelvCont      varchar(100)*/,
                    "" /*19. pDelAdd1       varchar(50)*/,
                    "" /*20. pDelAdd2           varchar(50)*/,
                    "" /*21. pDelAdd3           varchar(50)*/,
                    "" /*22. pDelPostCode       varchar(10)*/,
                    "" /*23. pDelTelNo          varchar(20)*/,
                    "" /*24. pDelFaxNo          varchar(20)*/,
                    "" /*25. pBillCont          varchar(100)*/,
                    "" /*26. pBillAdd1          varchar(50)*/,
                    "" /*27. pBillAdd2          varchar(50)*/,
                    "" /*28. pBillAdd3          varchar(50)*/,
                    "" /*29. pBillPostCode      varchar(10)*/,
                    "" /*30. pBillTelNo         varchar(20)*/,
                    "" /*31. pBillFaxNo         varchar(20)*/,
                    "" /*32. pSuppCont          varchar(100)*/,
                    "" /*33. pCreditTerm        varchar(10)*/,
                    "" /*34. pDelDate           varchar(20)*/,
                    "" /*35. pFullFill          varchar(10)*/,
                    "" /*36. pRemarks           varchar(250)*/,
                    "" /*37. pGSTTotal varchar(15)*/,
                    "" /*38. pGrossTotal varchar(15)*/,
                    "" /*39. pGSTInc            varchar(1)*/,
                    "" /*40. precstatus         varchar(4)*/,
                    "" /*41. pPOIDX             varchar(10)*/,
                    "" /*42. pLineNo            varchar(10)*/,
                    "" /*43. pStkCode           varchar(16)*/,
                    "" /*44. pUOMCode           varchar(6)*/,
                    "" /*45. pUnitCost          varchar(15)*/,
                    "" /*46. pQty               varchar(15)*/,
                    "" /*47. pDiscAmt           varchar(15)*/,
                    "" /*48. pSubTotalAmt       varchar(15)*/,
                    "" /*49. pDiscPercent       varchar(15)*/,
                    "" /*50. pDiscOption        varchar(1)*/,
                    "" /*51. pQtyBonus          varchar(15)*/,
                    "" /*52. pRcvQty            varchar(15)*/,
                    "" /*53. pRcvQtyBonus       varchar(15)*/,
                    "" /*54. pDTLFullFill       varchar(10)*/,
                    "" /*55. pGSTPurCode        varchar(8)*/,
                    "" /*56. pGstTaxRates       varchar(15)*/,
                    "" /*57. pGstAmt            varchar(15)*/,
                    "" /*58. pGrossAmt          varchar(15)*/,
                    (String) session.getAttribute("loginid") /*59. sBy                varchar(10)*/};
            
            
            
             int length = jsonPOItem.size();
                for (int x = 0; x < length; x++) {
                    JSONObject jsonObject = jsonPOItem.getJSONObject(x);
                    String tempValue = jsonObject.getString("value");

                    if (jsonObject.getString("name").equals("lblEditIdx")) {
                        aryPOItem[41] = tempValue.toUpperCase();
                    }else if (jsonObject.getString("name").equals("txtEditUnitCost")) {
                        aryPOItem[45] = tempValue.toUpperCase();
                    } 
                    else if (jsonObject.getString("name").equals("txtEditQty")) {
                        aryPOItem[46] = tempValue.toUpperCase();
                    } else if (jsonObject.getString("name").equals("txtEditBonus")) {
                        aryPOItem[51] = tempValue.toUpperCase();
                    } else if (jsonObject.getString("name").equals("ddlEditDisOpt")) {
                        aryPOItem[50] = tempValue.toUpperCase();
                    }else if (jsonObject.getString("name").equals("txtEditDiscVal")) {
                        aryPOItem[49] = tempValue.toUpperCase();
                    }else if (jsonObject.getString("name").equals("txtEditDiscAmt")) {
                        aryPOItem[47] = tempValue.toUpperCase();
                    }else if (jsonObject.getString("name").equals("ddlEditGst")) {
                        aryPOItem[55] = tempValue.toUpperCase();
                    }else if (jsonObject.getString("name").equals("lblEditGstTaxRate")) {
                        aryPOItem[56] = tempValue.toUpperCase();
                    }else if (jsonObject.getString("name").equals("lblEditGstAmt")) {
                        aryPOItem[57] = tempValue.toUpperCase();
                    }else if (jsonObject.getString("name").equals("lblEditGrossTotal")) {
                        aryPOItem[58] = tempValue.toUpperCase();
                    }else if (jsonObject.getString("name").equals("lblEditNettAmt")) {
                        aryPOItem[48] = tempValue.toUpperCase();
                    }else if (jsonObject.getString("name").equals("lblEditPoNo")) {
                        aryPOItem[4] = tempValue.toUpperCase();
                    }

                }
                //System.out.println("aryPO-->" + aryPO.toString());
                BLL_Common.Common_Object obj = obj_Po.DAL_ADDEDIT_PO(SiteName, aryPOItem);
            
                 try {
                    if (obj.getObjectArray(0).toString().equals("00000")) {
                       
                        obj.commit();
                        bReturn = true;
                       // sMessage = sGrpPoNo;//obj.getObjectArray(1).toString();
                    } else {
                        obj.rollback();
                    }
                } catch (Exception e) {
                    try {
                            obj.rollback();
                        } catch (SQLException ex) {
                            bReturn = false;
                        }
                }

                jsonReturn.put("bool", bReturn);
                jsonReturn.put("msg", sMessage);
                out.println(jsonReturn);
                
            }
//Kenji Low End Update Po Item
    
    protected void VOID_PO(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject jsonReturn = new net.sf.json.JSONObject();
        boolean bReturn = false;
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
      //  try {
            String sMessage = "";
            DAL_PurchaseOrder obj_Po = new DAL_PurchaseOrder();
            
            JSONArray jsonPOItem = JSONArray.fromObject(request.getParameter("POITEM"));

           //System.out.println("jsonPOItem-->" + jsonPOItem);
            
            String[] aryPOItem = {
                    "VOID_PO" /*0. pMethod    varchar(30)*/,
                    "" /*1. pCompCode  varchar(10)*/,
                    "" /*2. pPoGrpNo   varchar(10)*/,
                    "" /*3. pSuppCode  varchar(10)*/,
                    "" /*4. pPoNo      varchar(30)*/,
                    "" /*5. pPoDT      varchar(20)*/,
                    "" /*6. pDONo      varchar(30)*/,
                    "" /*7. pDODT      varchar(30)*/,
                    "" /*8. pInvNo     varchar(30)*/,
                    "" /*9. pInvDT     varchar(20)*/,
                    "" /*10. pRefNo     varchar(30)*/,
                    "" /*11. pRefDT     varchar(20)*/,
                    "" /*12. pLocCode   varchar(10)*/,
                    "" /*13. pTotalDiscAmt varchar(15)*/,
                    "" /*14. pTotalNettAmt varchar(15)*/,
                    "" /*15. pPurchaseOpt  varchar(2)*/,
                    "X" /*16. pPOStatus      varchar(1)*/,
                    "" /*17. pPurchaser     varchar(10)*/,
                    "" /*18. pDelvCont      varchar(100)*/,
                    "" /*19. pDelAdd1       varchar(50)*/,
                    "" /*20. pDelAdd2           varchar(50)*/,
                    "" /*21. pDelAdd3           varchar(50)*/,
                    "" /*22. pDelPostCode       varchar(10)*/,
                    "" /*23. pDelTelNo          varchar(20)*/,
                    "" /*24. pDelFaxNo          varchar(20)*/,
                    "" /*25. pBillCont          varchar(100)*/,
                    "" /*26. pBillAdd1          varchar(50)*/,
                    "" /*27. pBillAdd2          varchar(50)*/,
                    "" /*28. pBillAdd3          varchar(50)*/,
                    "" /*29. pBillPostCode      varchar(10)*/,
                    "" /*30. pBillTelNo         varchar(20)*/,
                    "" /*31. pBillFaxNo         varchar(20)*/,
                    "" /*32. pSuppCont          varchar(100)*/,
                    "" /*33. pCreditTerm        varchar(10)*/,
                    "" /*34. pDelDate           varchar(20)*/,
                    "" /*35. pFullFill          varchar(10)*/,
                    "" /*36. pRemarks           varchar(250)*/,
                    "" /*37. pGSTTotal varchar(15)*/,
                    "" /*38. pGrossTotal varchar(15)*/,
                    "" /*39. pGSTInc            varchar(1)*/,
                    "" /*40. precstatus         varchar(4)*/,
                    "" /*41. pPOIDX             varchar(10)*/,
                    "" /*42. pLineNo            varchar(10)*/,
                    "" /*43. pStkCode           varchar(16)*/,
                    "" /*44. pUOMCode           varchar(6)*/,
                    "" /*45. pUnitCost          varchar(15)*/,
                    "" /*46. pQty               varchar(15)*/,
                    "" /*47. pDiscAmt           varchar(15)*/,
                    "" /*48. pSubTotalAmt       varchar(15)*/,
                    "" /*49. pDiscPercent       varchar(15)*/,
                    "" /*50. pDiscOption        varchar(1)*/,
                    "" /*51. pQtyBonus          varchar(15)*/,
                    "" /*52. pRcvQty            varchar(15)*/,
                    "" /*53. pRcvQtyBonus       varchar(15)*/,
                    "" /*54. pDTLFullFill       varchar(10)*/,
                    "" /*55. pGSTPurCode        varchar(8)*/,
                    "" /*56. pGstTaxRates       varchar(15)*/,
                    "" /*57. pGstAmt            varchar(15)*/,
                    "" /*58. pGrossAmt          varchar(15)*/,
                    (String) session.getAttribute("loginid") /*59. sBy                varchar(10)*/};
            
            
            
             int length = jsonPOItem.size();
                for (int x = 0; x < length; x++) {
                    JSONObject jsonObject = jsonPOItem.getJSONObject(x);
                    String tempValue = jsonObject.getString("value");

                    if (jsonObject.getString("name").equals("lblPoNo")) {
                        aryPOItem[4] = tempValue.toUpperCase();
                    }
//                    else if (jsonObject.getString("name").equals("txtEditUnitCost")) {
//                        aryPOItem[45] = tempValue.toUpperCase();
//                    } 
//                    else if (jsonObject.getString("name").equals("txtEditQty")) {
//                        aryPOItem[46] = tempValue.toUpperCase();
//                    } else if (jsonObject.getString("name").equals("txtEditBonus")) {
//                        aryPOItem[51] = tempValue.toUpperCase();
//                    } else if (jsonObject.getString("name").equals("ddlEditDisOpt")) {
//                        aryPOItem[50] = tempValue.toUpperCase();
//                    }else if (jsonObject.getString("name").equals("txtEditDiscVal")) {
//                        aryPOItem[49] = tempValue.toUpperCase();
//                    }else if (jsonObject.getString("name").equals("txtEditDiscAmt")) {
//                        aryPOItem[47] = tempValue.toUpperCase();
//                    }else if (jsonObject.getString("name").equals("ddlEditGst")) {
//                        aryPOItem[55] = tempValue.toUpperCase();
//                    }else if (jsonObject.getString("name").equals("lblEditGstTaxRate")) {
//                        aryPOItem[56] = tempValue.toUpperCase();
//                    }else if (jsonObject.getString("name").equals("lblEditGstAmt")) {
//                        aryPOItem[57] = tempValue.toUpperCase();
//                    }else if (jsonObject.getString("name").equals("lblEditGrossTotal")) {
//                        aryPOItem[58] = tempValue.toUpperCase();
//                    }else if (jsonObject.getString("name").equals("lblEditNettAmt")) {
//                        aryPOItem[48] = tempValue.toUpperCase();
//                    }else if (jsonObject.getString("name").equals("lblEditPoNo")) {
//                        aryPOItem[4] = tempValue.toUpperCase();
//                    }

                }
                //System.out.println("aryPO-->" + aryPO.toString());
                BLL_Common.Common_Object obj = obj_Po.DAL_ADDEDIT_PO(SiteName, aryPOItem);
            
                 try {
                    if (obj.getObjectArray(0).toString().equals("00000")) {
                       
                        obj.commit();
                        bReturn = true;
                        sMessage = obj.getObjectArray(1).toString();
                    } else {
                        obj.rollback();
                    }
                } catch (Exception e) {
                    try {
                            obj.rollback();
                        } catch (SQLException ex) {
                            bReturn = false;
                        }
                }

                jsonReturn.put("bool", bReturn);
                jsonReturn.put("msg", sMessage);
                out.println(jsonReturn);
                
            }
    
    protected void ADD_POITEM(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject jsonReturn = new net.sf.json.JSONObject();
        
        HttpSession session = request.getSession();
        String SiteName = (String) session.getAttribute("SiteName");
        
      //  try {
            String sMessage = "";
            DAL_PurchaseOrder obj_Po = new DAL_PurchaseOrder();
            DAL_PopulateData obj_No = new DAL_PopulateData();
            //JSONObject jsonPOItem = (JSONObject) JSONSerializer.toJSON(request.getParameter("PODETAIL"));
            JSONArray jsonPOItem = JSONArray.fromObject(request.getParameter("PODETAIL"));

            String sPoIDX = request.getParameter("POIDX");
            System.out.println("jsonPOItem-->" + jsonPOItem);
            System.out.println("sPoIDX-->" + sPoIDX);
            System.out.println("jsonPoArr.size()-->" + jsonPOItem.size());
            
         
            boolean bReturn = false;
     
                if (jsonPOItem.size() > 0) {
            for (Object js : jsonPOItem) {
                JSONObject json = (JSONObject) js;
                 String[] aryPOItem = {
                        "ADD_POITEM" /*0. pMethod    varchar(30)*/,
                        "" /*1. pCompCode  varchar(10)*/,
                        "0" /*2. pPoGrpNo   varchar(10)*/,
                        "" /*3. pSuppCode  varchar(10)*/,
                        "" /*4. pPoNo      varchar(30)*/,
                        "" /*5. pPoDT      varchar(20)*/,
                        "" /*6. pDONo      varchar(30)*/,
                        "" /*7. pDODT      varchar(30)*/,
                        "" /*8. pInvNo     varchar(30)*/,
                        "" /*9. pInvDT     varchar(20)*/,
                        "" /*10. pRefNo     varchar(30)*/,
                        "" /*11. pRefDT     varchar(20)*/,
                        "" /*12. pLocCode   varchar(10)*/,
                        "" /*13. pTotalDiscAmt varchar(15)*/,
                        "" /*14. pTotalNettAmt varchar(15)*/,
                        "" /*15. pPurchaseOpt  varchar(2)*/,
                        "" /*16. pPOStatus      varchar(1)*/,
                        "" /*17. pPurchaser     varchar(10)*/,
                        "" /*18. pDelvCont      varchar(100)*/,
                        "" /*19. pDelAdd1       varchar(50)*/,
                        "" /*20. pDelAdd2           varchar(50)*/,
                        "" /*21. pDelAdd3           varchar(50)*/,
                        "" /*22. pDelPostCode       varchar(10)*/,
                        "" /*23. pDelTelNo          varchar(20)*/,
                        "" /*24. pDelFaxNo          varchar(20)*/,
                        "" /*25. pBillCont          varchar(100)*/,
                        "" /*26. pBillAdd1          varchar(50)*/,
                        "" /*27. pBillAdd2          varchar(50)*/,
                        "" /*28. pBillAdd3          varchar(50)*/,
                        "" /*29. pBillPostCode      varchar(10)*/,
                        "" /*30. pBillTelNo         varchar(20)*/,
                        "" /*31. pBillFaxNo         varchar(20)*/,
                        "" /*32. pSuppCont          varchar(100)*/,
                        "" /*33. pCreditTerm        varchar(10)*/,
                        "" /*34. pDelDate           varchar(20)*/,
                        "0" /*35. pFullFill          varchar(10)*/,
                        "" /*36. pRemarks           varchar(250)*/,
                        "0" /*37. pGSTTotal           varchar(15)*/,
                        "" /*38. pGrossTotal varchar(15)*/,
                        json.get("GSTINC").toString().trim() /*39. pGSTInc            varchar(1)*/,
                        "1" /*40. precstatus         varchar(4)*/,
                        sPoIDX /*41. pPOIDX             varchar(10)*/,
                        "" /*42. pLineNo            varchar(10)*/,
                        json.get("PRDCODE").toString().trim() /*43. pStkCode           varchar(16)*/,
                        json.get("UOM").toString().trim() /*44. pUOMCode           varchar(6)*/,
                        json.get("UCOST").toString().trim() /*45. pUnitCost          varchar(15)*/,
                        json.get("QTY").toString().trim() /*46. pQty               varchar(15)*/,
                        json.get("DISCVal").toString().trim() /*47. pDiscAmt           varchar(15)*/,
                        json.get("NETTTOTAL").toString().trim() /*48. pSubTotalAmt       varchar(15)*/,
                        json.get("DISCAMT").toString().trim() /*49. pDiscPercent       varchar(15)*/,
                        json.get("DISC").toString().trim() /*50. pDiscOption        varchar(1)*/,
                        json.get("BONUS").toString().trim() /*51. pQtyBonus          varchar(15)*/,
                        "0" /*52. pRcvQty            varchar(15)*/,
                        "0" /*53. pRcvQtyBonus       varchar(15)*/,
                        "0" /*54. pDTLFullFill       varchar(10)*/,
                        json.get("GST").toString().trim() /*55. pGSTPurCode   varchar(8)*/,
                        json.get("GSTRATE").toString().trim() /*56. pGstTaxRates       varchar(15)*/,
                        json.get("GSTAMT").toString().trim() /*57. pGstAmt            varchar(15)*/,
                        json.get("GROSSTOTAL").toString().trim()/*58. pGrossAmt varchar(15)*/,
                        (String) session.getAttribute("loginid") /*59. sBy                varchar(10)*/
                 };
                    
              
              
                //System.out.println("aryPO-->" + aryPO.toString());
                BLL_Common.Common_Object obj = obj_Po.DAL_ADDEDIT_PO(SiteName, aryPOItem);
                
                 try {
                    if (obj.getObjectArray(0).toString().equals("00000")) {
                       // TRX_PO_Detail(sPoDetail, sCompany, obj.getObjectArray(2).toString(), (String) session.getAttribute("loginid"));
                        obj.commit();
                        bReturn = true;
                      //  sMessage = sGrpPoNo;//obj.getObjectArray(1).toString();
                    } else {
                        obj.rollback();
                    }
                } catch (Exception e) {
                    try {
                            obj.rollback();
                        } catch (SQLException ex) {
                            bReturn = false;
                        }
                }

                
              }
                }                                                       
            jsonReturn.put("bool", bReturn);
            jsonReturn.put("msg", sMessage);
            out.println(jsonReturn);
    }

    protected void UPDATE_PO_FULFILL(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, SQLException {
        response.setContentType("text/html");
        PrintWriter out = response.getWriter();
        net.sf.json.JSONObject json = new net.sf.json.JSONObject();
        HttpSession session = request.getSession(); 
        String SiteName = (String) session.getAttribute("SiteName");        
        boolean bReturn = false;
        String sMessage = "";        
                
        try {
            String sGRNIDX = request.getParameter("GRNIDX");

            DAL_GRN DAL_GRN = new DAL_GRN();
            BLL_Common.Common_Object GRN = DAL_GRN.DAL_GET_GRNLIST(SiteName, new String[]{
                "GET_GRN_PO", sGRNIDX, "", "", "", "", "", ""});

            JSONArray GRN_array = GRN.getJSONArray(0);  

            DAL_PurchaseOrder obj_Po = new DAL_PurchaseOrder();

            for (Object jsGRN : GRN_array) { 

                JSONObject GRNjson = (JSONObject) jsGRN;         

                String[] aryPOItem = {
                    "",               // 1. pMethod varchar(30)
                    "",               // 2. pCompCode varchar(10)
                    "",               // 3. pPoGrpNo varchar(20)
                    "",               // 4. pSuppCode varchar(10)
                    "",               // 5. pPoNo varchar(30)
                    "",               // 6. pPoDT varchar(20)
                    "",               // 7. pDONo varchar(30)
                    "",               // 8. pDODT varchar(20)
                    "",               // 9. pInvNo varchar(30)
                    "",               // 10. pInvDT varchar(20)
                    "",               // 11. pRefNo varchar(30)
                    "",               // 12. pRefDT varchar(20)
                    "",               // 13. pLocCode varchar(10)
                    "",               // 14. pTotalDiscAmt varchar(15)
                    "",               // 15. pTotalNettAmt varchar(15)
                    "",               // 16. pPurchaseOpt varchar(2)
                    "",               // 17. pPOStatus varchar(1)
                    "",               // 18. pPurchaser varchar(10)
                    "",               // 19. pDelvCont varchar(100)
                    "",               // 20. pDelAdd1 varchar(50)
                    "",               // 21. pDelAdd2 varchar(50)
                    "",               // 22. pDelAdd3 varchar(50)
                    "",               // 23. pDelPostCode varchar(10)
                    "",               // 24. pDelTelNo varchar(20)
                    "",               // 25. pDelFaxNo varchar(20)
                    "",               // 26. pBillCont varchar(100)
                    "",               // 27. pBillAdd1 varchar(50)
                    "",               // 28. pBillAdd2 varchar(50)
                    "",               // 29. pBillAdd3 varchar(50)
                    "",               // 30. pBillPostCode varchar(10)
                    "",               // 31. pBillTelNo varchar(20)
                    "",               // 32. pBillFaxNo varchar(20)
                    "",               // 33. pSuppCont varchar(100)
                    "",               // 34. pCreditTerm varchar(10)
                    "",               // 35. pDelDate varchar(20)
                    "",               // 36. pFullFill varchar(10)
                    "",               // 37. pRemarks varchar(250)
                    "",               // 38. pGSTTotal varchar(15)
                    "",               // 39. pGrossTotal varchar(15)
                    "",               // 40. pGSTInc varchar(1)
                    "",               // 41. pRecStatus varchar(4)
                    sGRNIDX,          // 42. pPOIDX varchar(10)
                    "",               // 43. pLineNo varchar(10)
                    GRNjson.get("sgrd_stockidx").toString(), // 44. pStkCode varchar(16)
                    "",               // 45. pUOMCode varchar(6)
                    "",               // 46. pUnitCost varchar(15)
                    "",               // 47. pQty varchar(15)
                    "",               // 48. pDiscAmt varchar(15)
                    "",               // 49. pSubTotalAmt varchar(15)
                    "",               // 50. pDiscPercent varchar(15)
                    "",               // 51. pDiscOption varchar(1)
                    "",               // 52. pQtyBonus varchar(15)
                    "",               // 53. pRcvQty varchar(15)
                    "",               // 54. pRcvQtyBonus varchar(15)
                    "",               // 55. pDTLFullFill varchar(10)
                    "",               // 56. pGSTPurCode varchar(8)
                    "",               // 57. pGstTaxRates varchar(15)
                    "",               // 58. pGstAmt varchar(15)
                    "",               // 59. pGrossAmt varchar(15)
                    (String) session.getAttribute("loginid") // 60. sBy varchar(10)
                };

                String[] aryPOHdr = aryPOItem;
                String[] aryRecvQty = aryPOItem;

                //accumulate receive qty from previous grn dtl
                aryRecvQty[0] = "GET_RECV_QTY";
                //aryRecvQty[43] = GRNjson.get("sgrd_stockidx").toString();
                BLL_Common.Common_Object objRecvQty = obj_Po.DAL_ADDEDIT_PO(SiteName, aryRecvQty);
                objRecvQty.commit();
                double dRecvQty = Double.parseDouble(objRecvQty.getObjectArray(1).toString());

                //double dRecvQty = Double.parseDouble(GRNjson.get("sgrd_qty").toString());
                double dPOQty = Double.parseDouble(GRNjson.get("sgrd_poqty").toString());
                int iPOLineNo = Integer.parseInt(GRNjson.get("sgrd_polineno").toString());

                if (dRecvQty < dPOQty) {  //Fulfill - Partial             
                    aryPOItem[54] = "Partial";                
                } else { // Fulfill - Full                    
                    aryPOItem[54] = "Full";
                }

                aryPOItem[0] = "UPDATE_FULFILL_DTL";
                //aryPOItem[43] = GRNjson.get("sgrd_stockidx").toString();
                BLL_Common.Common_Object objDtl = obj_Po.DAL_ADDEDIT_PO(SiteName, aryPOItem);
             
                try {
                    if (objDtl.getObjectArray(0).toString().equals("00000")) {                      
                        objDtl.commit();

                        aryPOHdr[0] = "UPDATE_FULFILL_HDR";
                        //aryPOHdr[43] = GRNjson.get("sgrd_stockidx").toString();
                        BLL_Common.Common_Object objHdr = obj_Po.DAL_ADDEDIT_PO(SiteName, aryPOHdr);

                        try {
                            if (objHdr.getObjectArray(0).toString().equals("00000")) {                      
                                objHdr.commit();
                                bReturn = true;
                            } else {
                                objHdr.rollback();
                            }
                        } catch (Exception e) {
                            try {
                                objHdr.rollback();
                            } catch (SQLException ex) {
                                BLL_Common.write_log(ex.toString(), "");
                                bReturn = false;
                            }
                        }
                    } else {
                        objDtl.rollback();
                    }
                } catch (Exception e) {
                    try {
                        objDtl.rollback();
                    } catch (SQLException ex) {
                        BLL_Common.write_log(ex.toString(), "");
                        bReturn = false;
                    }
                }
            }
        } catch (Exception ex) {
            BLL_Common.write_log("Servlet_PurchaseOrder : " + ex.toString(),"");
        }
        json.put("bool", bReturn);
        out.println(json);
    }

        // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
        /**
         * Handles the HTTP <code>GET</code> method.
         *
         * @param request servlet request
         * @param response servlet response
         * @throws ServletException if a servlet-specific error occurs
         * @throws IOException if an I/O error occurs
         */
        @Override
        protected void doGet
        (HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
            // processRequest(request, response);
             String p_method = null;
            p_method = request.getParameter("SFC");
            if (p_method.equals("PO_HEADER")) {
                try {
                    Bind_PO_Header(request, response);
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } else if (p_method.equals("PO_ITEM")) {
                try {
                    Bind_PO_Item(request, response);
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }            
        }

        /**
         * Handles the HTTP <code>POST</code> method.
         *
         * @param request servlet request
         * @param response servlet response
         * @throws ServletException if a servlet-specific error occurs
         * @throws IOException if an I/O error occurs
         */
        @Override
        protected void doPost
        (HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
            //processRequest(request, response);

            String p_method = null;
            p_method = request.getParameter("SFC");

            if (p_method.equals("INSERT_PURCHASEORDER")) {
                try {
                    INSERT_PO(request, response);
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }else if (p_method.equals("GET_PO_LIST")) {
            try {
                Bind_PO_List(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }else if (p_method.equals("PO_HISTORY")) {
            try {
                Bind_PO_History(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }else if (p_method.equals("UPDATE_POITEM")) {
            try {
                UPDATE_PO(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }else if (p_method.equals("VOID_PO")) {
            try {
                VOID_PO(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else if (p_method.equals("ADD_POITEM")) {
            try {
                ADD_POITEM(request, response);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else if (p_method.equals("UPDATE_PO_FULFILL")) {
                try {
                    UPDATE_PO_FULFILL(request, response);
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }   
        }

        /**
         * Returns a short description of the servlet.
         *
         * @return a String containing servlet description
         */
        @Override
        public String getServletInfo
        
            () {
        return "Short description";
        }// </editor-fold>

    }


//    public final static Map strJson2Map(String jsonStr) throws ParseException {  
//        JSONObject jsonObject = new JSONObject(jsonStr);  
//        return json2Map(jsonObject);  
//    } 
//     
//     public final static Map json2Map(JSONObject jsonObject) {  
//        Map resultMap = new HashMap();  
//        Iterator iterator = jsonObject.keys();  
//  
//        while (iterator.hasNext()) {  
//            String key = (String) iterator.next();  
//            Object value = jsonObject.get(key);  
//  
//            if (value instanceof JSONObject) {  
//                value = json2Map((JSONObject) value);  
//                resultMap.put(key, value);  
//            } else if (value instanceof JSONArray) {  
//                value = json2List((JSONArray) value);  
//                resultMap.put(key, value);  
//            } else {  
//                resultMap.put(key, jsonObject.getString(key));  
//            }  
//        }  
//        return resultMap;  
//    }  
//     
//     public final static List json2List(JSONArray jsonArray) {  
//        List resultList = new ArrayList();  
//        for (int i = 0; i < jsonArray.size(); i++) {  
//            Object value = jsonArray.get(i);  
//            if (value instanceof JSONObject) {  
//                value = json2Map((JSONObject) value);  
//            } else if (value instanceof JSONArray) {  
//                value = json2List((JSONArray) value);  
//            }  
//            resultList.add(value);  
//        }  
//        return resultList;  
//    } 
//     
//    public static Object[] getObjectArray4Json(String jsonString) {  
//  
//        JSONArray jsonArray = JSONArray.fromObject(jsonString);  
//        return jsonArray.toArray();  
//    }  
//
//    public static Map getMap4Json(String jsonString) {  
//  
//        JSONObject jsonObject = JSONObject.fromObject(jsonString);  
//        Iterator keyIter = jsonObject.keys();  
//        String key;  
//        Object value;  
//        Map valueMap = new HashMap();  
//        while (keyIter.hasNext()) {  
//            key = (String) keyIter.next();  
//            value = jsonObject.get(key);  
//            valueMap.put(key, value);  
//        }  
//        return valueMap;  
//    }  
